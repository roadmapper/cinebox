
SD.elf:     file format elf32-littlenios2
SD.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x002801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00280000 paddr 0x00280000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00280020 paddr 0x00280020 align 2**12
         filesz 0x0000abd4 memsz 0x0000abd4 flags r-x
    LOAD off    0x0000bbf4 vaddr 0x0028abf4 paddr 0x0028c79c align 2**12
         filesz 0x00001ba8 memsz 0x00001ba8 flags rw-
    LOAD off    0x0000e344 vaddr 0x0028e344 paddr 0x0028e344 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00280000  00280000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00280020  00280020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007038  002801b8  002801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003a04  002871f0  002871f0  000081f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba8  0028abf4  0028c79c  0000bbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0028e344  0028e344  0000e344  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000d79c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000918  00000000  00000000  0000d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001140  00000000  00000000  0000e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001b5bf  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000518d  00000000  00000000  0002a7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d2f2  00000000  00000000  0002f96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001364  00000000  00000000  0003cc60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000172c  00000000  00000000  0003dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000036a8  00000000  00000000  0003f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00042d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00042db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000459d0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000459d3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000459d8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000459d9  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000459da  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000459e3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000459ec  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000005  00000000  00000000  000459f5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000018  00000000  00000000  000459fa  2**0
                  CONTENTS, READONLY
 26 .jdi          000047dd  00000000  00000000  00045a12  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00061191  00000000  00000000  0004a1ef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00280000 l    d  .entry	00000000 .entry
00280020 l    d  .exceptions	00000000 .exceptions
002801b8 l    d  .text	00000000 .text
002871f0 l    d  .rodata	00000000 .rodata
0028abf4 l    d  .rwdata	00000000 .rwdata
0028e344 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
002801f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
002871f0 l     O .rodata	00003840 C.1.1516
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
002805dc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0028abf4 l     O .rwdata	00001060 jtag_uart
0028bc54 l     O .rwdata	0000002c led_green
0028bc80 l     O .rwdata	00000038 ps2
0028bcb8 l     O .rwdata	00000034 usb
0028bcec l     O .rwdata	00000048 char_buffer
0028bd34 l     O .rwdata	00000054 pixel_buffer
0028bd88 l     O .rwdata	0000002c sd_card_interface
00280cb4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00280eec l     F .text	0000022c altera_avalon_jtag_uart_irq
00281118 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00283954 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
002839d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00283ab0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00283c9c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00283f98 l     F .text	000000dc alt_file_locked
002841fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0028bf5c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00284e80 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00285264 l     F .text	00000058 std
00285370 l     F .text	00000008 __fp_lock
00285378 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
002869ec l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
00286b20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00286c40 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00286d90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00286f50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
0028c798 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0028718c l     F .text	00000060 alt_get_errno
0028688c g     F .text	00000070 _isatty_r
00280648 g     F .text	0000006c alt_main
00282e04 g     F .text	000003d0 alt_up_pixel_buffer_dma_draw_vline
0028e394 g     O .bss	00000100 alt_irq
002819e0 g     F .text	00000058 alt_up_ps2_disable_read_interrupt
002868fc g     F .text	00000078 _lseek_r
0028c79c g       *ABS*	00000000 __flash_rwdata_start
0028e624 g       *ABS*	00000000 __alt_heap_start
002864c8 g     F .text	00000068 __sseek
002852cc g     F .text	000000a4 __sinit
00284ac4 g     F .text	00000130 __swbuf_r
00282028 g     F .text	00000114 alt_up_char_buffer_string
002817f8 g     F .text	00000034 read_CE_bit
002853cc g     F .text	00000068 __sfmoreglue
00286e10 g     F .text	00000020 __malloc_unlock
00281b8c g     F .text	000000b0 alt_up_ps2_read_data_byte_timeout
00281f58 g     F .text	000000d0 alt_up_char_buffer_draw
002853bc g     F .text	00000010 _cleanup
002821d8 g     F .text	000001a0 alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
00282198 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
00280000 g     F .entry	0000001c __reset
00280020 g       *ABS*	00000000 __flash_exceptions_start
00286818 g     F .text	00000074 _fstat_r
0028e35c g     O .bss	00000004 errno
0028e348 g     O .bss	00000004 alt_argv
00294764 g       *ABS*	00000000 _gp
00282378 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
0028bddc g     O .rwdata	00000180 alt_fd_list
00283bd8 g     F .text	00000094 alt_find_dev
002804bc g     F .text	000000a0 memcpy
0028213c g     F .text	0000005c alt_up_char_buffer_clear
002853b0 g     F .text	0000000c _cleanup_r
00283d60 g     F .text	00000078 alt_io_redirect
002871f0 g       *ABS*	00000000 __DTOR_END__
00282428 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
00281330 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00286b80 g     F .text	000000c0 isatty
00282ab4 g     F .text	00000350 alt_up_pixel_buffer_dma_draw_hline
00284658 g     F .text	00000090 alt_icache_flush
0028e360 g     O .bss	00000004 __malloc_top_pad
00286450 g     F .text	00000070 _sbrk_r
00283298 g     F .text	000000d0 helper_plot_pixel
00286974 g     F .text	00000078 _read_r
0028c774 g     O .rwdata	00000004 alt_max_fd
002866f4 g     F .text	00000110 _fclose_r
0028182c g     F .text	00000034 read_num_bytes_available
00285230 g     F .text	00000034 fflush
0028e364 g     O .bss	00000004 __malloc_max_sbrked_mem
00283dd8 g     F .text	000001c0 alt_irq_register
00281794 g     F .text	00000034 read_RI_bit
0028245c g     F .text	00000164 alt_up_pixel_buffer_dma_clear_screen
00286ca0 g     F .text	000000f0 lseek
0028c78c g     O .rwdata	00000004 _global_impure_ptr
0028e624 g       *ABS*	00000000 __bss_end
002825c0 g     F .text	000004f4 alt_up_pixel_buffer_dma_draw_box
00284354 g     F .text	0000010c alt_tick
00281894 g     F .text	0000002c read_data_byte
00285398 g     F .text	00000018 __fp_lock_all
002842bc g     F .text	00000098 alt_alarm_stop
002817c8 g     F .text	00000030 read_RE_bit
0028e350 g     O .bss	00000004 alt_irq_active
00280000 g       *ABS*	00000000 __alt_mem_onchip_mem
002800ec g     F .exceptions	000000cc alt_irq_handler
0028bdb4 g     O .rwdata	00000028 alt_dev_null
00281a38 g     F .text	00000078 alt_up_ps2_write_data_byte
002839b4 g     F .text	0000001c alt_dcache_flush_all
002831d4 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0028c79c g       *ABS*	00000000 __ram_rwdata_end
0028c76c g     O .rwdata	00000008 alt_dev_list
0028706c g     F .text	00000120 write
002848ac g     F .text	000000e8 _putc_r
00283368 g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
0028abf4 g       *ABS*	00000000 __ram_rodata_end
00286a4c g     F .text	000000d4 fstat
0028e624 g       *ABS*	00000000 end
00281dac g     F .text	000000a8 alt_up_ps2_write_fd
00281e94 g     F .text	00000084 alt_up_char_buffer_init
00280e34 g     F .text	000000b8 altera_avalon_jtag_uart_init
002871ec g       *ABS*	00000000 __CTOR_LIST__
002cb000 g       *ABS*	00000000 __alt_stack_pointer
00281554 g     F .text	00000240 altera_avalon_jtag_uart_write
002852bc g     F .text	00000004 __sfp_lock_acquire
00285650 g     F .text	00000314 _free_r
002806b4 g     F .text	00000258 alt_printf
00284e84 g     F .text	000001b0 __call_exitprocs
0028c794 g     O .rwdata	00000004 __malloc_sbrk_base
002801b8 g     F .text	0000003c _start
0028e354 g     O .bss	00000004 _alt_tick_rate
0028e358 g     O .bss	00000004 _alt_nticks
00286e30 g     F .text	00000120 read
00280980 g     F .text	00000334 alt_sys_init
00284d4c g     F .text	00000134 __register_exitproc
00281cb8 g     F .text	00000058 alt_up_ps2_clear_fifo
002811c8 g     F .text	00000074 altera_avalon_jtag_uart_close
0028abf4 g       *ABS*	00000000 __ram_rwdata_start
002871f0 g       *ABS*	00000000 __ram_rodata_start
0028e36c g     O .bss	00000028 __malloc_current_mallinfo
00280cec g     F .text	00000058 altera_avalon_jtag_uart_read_fd
002845a0 g     F .text	000000b8 alt_get_fd
00286684 g     F .text	00000070 _close_r
00284734 g     F .text	00000074 memcmp
00280d9c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0028e624 g       *ABS*	00000000 __alt_stack_base
00280de4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00284c10 g     F .text	0000013c __swsetup_r
00285434 g     F .text	000000f0 __sfp
0028c35c g     O .rwdata	00000408 __malloc_av_
002852c8 g     F .text	00000004 __sinit_lock_release
002865ac g     F .text	00000060 __sread
00284480 g     F .text	00000120 alt_find_file
002839fc g     F .text	000000b4 alt_dev_llist_insert
00286df0 g     F .text	00000020 __malloc_lock
00286fb0 g     F .text	000000bc sbrk
00285034 g     F .text	000001fc _fflush_r
0028e344 g       *ABS*	00000000 __bss_start
002863b8 g     F .text	00000098 memset
002801f4 g     F .text	000002c8 main
0028e34c g     O .bss	00000004 alt_envp
0028e368 g     O .bss	00000004 __malloc_max_total_mem
002823d0 g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
00281f18 g     F .text	00000040 alt_up_char_buffer_open_dev
00280d44 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00284bf4 g     F .text	0000001c __swbuf
002864c0 g     F .text	00000008 __sclose
002cb000 g       *ABS*	00000000 __alt_heap_limit
00286804 g     F .text	00000014 fclose
00281c3c g     F .text	0000007c alt_up_ps2_read_data_byte
0028e494 g     O .bss	00000190 _atexit0
00285c78 g     F .text	00000740 _malloc_r
0028c778 g     O .rwdata	00000004 alt_errno
00285a2c g     F .text	000000b8 _fwalk
00281e54 g     F .text	00000040 alt_up_ps2_open_dev
002847a8 g     F .text	00000104 putc
00285524 g     F .text	0000012c _malloc_trim_r
0028198c g     F .text	00000054 alt_up_ps2_enable_read_interrupt
002871f0 g       *ABS*	00000000 __CTOR_END__
00284994 g     F .text	000000bc strcmp
002871f0 g       *ABS*	00000000 __flash_rodata_start
002871f0 g       *ABS*	00000000 __DTOR_LIST__
0028094c g     F .text	00000034 alt_irq_init
0028425c g     F .text	00000060 alt_release_fd
00281860 g     F .text	00000034 read_data_valid
00281b20 g     F .text	0000006c alt_up_ps2_write_data_byte_with_ack
002846e8 g     F .text	00000014 atexit
0028660c g     F .text	00000078 _write_r
0028c788 g     O .rwdata	00000004 _impure_ptr
0028e344 g     O .bss	00000004 alt_argc
00283b74 g     F .text	00000064 _do_dtors
00280020 g       .exceptions	00000000 alt_irq_entry
00285380 g     F .text	00000018 __fp_unlock_all
0028c764 g     O .rwdata	00000008 alt_fs_list
00280020 g       *ABS*	00000000 __ram_exceptions_start
0028c79c g       *ABS*	00000000 _edata
0028e624 g       *ABS*	00000000 _end
002801b8 g       *ABS*	00000000 __ram_exceptions_end
0028123c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00286530 g     F .text	0000007c __swrite
0028c790 g     O .rwdata	00000004 __malloc_trim_threshold
00284460 g     F .text	00000020 altera_nios2_qsys_irq_init
002846fc g     F .text	00000038 exit
00285964 g     F .text	000000c8 _fwalk_reent
002818c0 g     F .text	000000cc alt_up_ps2_init
002cb000 g       *ABS*	00000000 __alt_data_end
00280020 g     F .exceptions	00000000 alt_exception
002852c0 g     F .text	00000004 __sfp_lock_release
00286a2c g     F .text	00000020 _exit
00283704 g     F .text	00000154 alt_alarm_start
00285ae4 g     F .text	00000194 __smakebuf_r
00281ab0 g     F .text	00000070 alt_up_ps2_wait_for_ack
00284a50 g     F .text	00000074 strlen
00284074 g     F .text	00000188 open
0028090c g     F .text	00000040 alt_putchar
00283c6c g     F .text	00000030 alt_icache_flush_all
0028c77c g     O .rwdata	00000004 alt_priority_mask
00281d10 g     F .text	0000009c alt_up_ps2_read_fd
0028c780 g     O .rwdata	00000008 alt_alarm_list
00283b10 g     F .text	00000064 _do_ctors
00283858 g     F .text	000000fc close
0028055c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
002852c4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00280000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  280000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  280004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  280008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  28000c:	00bffd16 	blt	zero,r2,280004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  280010:	00400a34 	movhi	at,40
    ori r1, r1, %lo(_start)
  280014:	08406e14 	ori	at,at,440
    jmp r1
  280018:	0800683a 	jmp	at
  28001c:	00000000 	call	0 <__reset-0x280000>

Disassembly of section .exceptions:

00280020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  280020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  280024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  280028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  28002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  280030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  280034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  280038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  28003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  280040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  280044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  280048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  28004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  280050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  280054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  280058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  28005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  280060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  280064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  280068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  28006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  280070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  280074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  280078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  28007c:	10000326 	beq	r2,zero,28008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  280080:	20000226 	beq	r4,zero,28008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  280084:	02800ec0 	call	2800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  280088:	00000306 	br	280098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  28008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  280090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  280094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  280098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  28009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  2800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  2800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  2800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  2800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  2800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  2800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  2800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  2800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  2800c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  2800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  2800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  2800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  2800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  2800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  2800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  2800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  2800e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  2800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  2800e8:	ef80083a 	eret

002800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  2800ec:	defff904 	addi	sp,sp,-28
  2800f0:	dfc00615 	stw	ra,24(sp)
  2800f4:	df000515 	stw	fp,20(sp)
  2800f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  2800fc:	0005313a 	rdctl	r2,ipending
  280100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  280104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  280108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  28010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  280110:	00800044 	movi	r2,1
  280114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  280118:	e0ffff17 	ldw	r3,-4(fp)
  28011c:	e0bffe17 	ldw	r2,-8(fp)
  280120:	1884703a 	and	r2,r3,r2
  280124:	1005003a 	cmpeq	r2,r2,zero
  280128:	1000171e 	bne	r2,zero,280188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  28012c:	e0bffd17 	ldw	r2,-12(fp)
  280130:	00c00a74 	movhi	r3,41
  280134:	18f8e504 	addi	r3,r3,-7276
  280138:	100490fa 	slli	r2,r2,3
  28013c:	10c5883a 	add	r2,r2,r3
  280140:	11800017 	ldw	r6,0(r2)
  280144:	e0bffd17 	ldw	r2,-12(fp)
  280148:	00c00a74 	movhi	r3,41
  28014c:	18f8e504 	addi	r3,r3,-7276
  280150:	100490fa 	slli	r2,r2,3
  280154:	10c5883a 	add	r2,r2,r3
  280158:	10800104 	addi	r2,r2,4
  28015c:	11000017 	ldw	r4,0(r2)
  280160:	e17ffd17 	ldw	r5,-12(fp)
  280164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  280168:	0005313a 	rdctl	r2,ipending
  28016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
  280170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  280174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  280178:	e0bfff17 	ldw	r2,-4(fp)
  28017c:	1004c03a 	cmpne	r2,r2,zero
  280180:	103fe21e 	bne	r2,zero,28010c <alt_irq_handler+0x20>
  280184:	00000706 	br	2801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  280188:	e0bffe17 	ldw	r2,-8(fp)
  28018c:	1085883a 	add	r2,r2,r2
  280190:	e0bffe15 	stw	r2,-8(fp)
      i++;
  280194:	e0bffd17 	ldw	r2,-12(fp)
  280198:	10800044 	addi	r2,r2,1
  28019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  2801a0:	003fdd06 	br	280118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  2801a4:	e037883a 	mov	sp,fp
  2801a8:	dfc00117 	ldw	ra,4(sp)
  2801ac:	df000017 	ldw	fp,0(sp)
  2801b0:	dec00204 	addi	sp,sp,8
  2801b4:	f800283a 	ret

Disassembly of section .text:

002801b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  2801b8:	06c00b34 	movhi	sp,44
    ori sp, sp, %lo(__alt_stack_pointer)
  2801bc:	deec0014 	ori	sp,sp,45056

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  2801c0:	06800a74 	movhi	gp,41
    ori gp, gp, %lo(_gp)
  2801c4:	d691d914 	ori	gp,gp,18276
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  2801c8:	00800a34 	movhi	r2,40
    ori r2, r2, %lo(__bss_start)
  2801cc:	10b8d114 	ori	r2,r2,58180

    movhi r3, %hi(__bss_end)
  2801d0:	00c00a34 	movhi	r3,40
    ori r3, r3, %lo(__bss_end)
  2801d4:	18f98914 	ori	r3,r3,58916

    beq r2, r3, 1f
  2801d8:	10c00326 	beq	r2,r3,2801e8 <_start+0x30>

0:
    stw zero, (r2)
  2801dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  2801e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  2801e4:	10fffd36 	bltu	r2,r3,2801dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  2801e8:	028055c0 	call	28055c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  2801ec:	02806480 	call	280648 <alt_main>

002801f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  2801f0:	003fff06 	br	2801f0 <alt_after_alt_main>

002801f4 <main>:
}
*/

#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma.h"
int main(void) {
  2801f4:	def1e704 	addi	sp,sp,-14436
  2801f8:	dfce1815 	stw	ra,14432(sp)
  2801fc:	df0e1715 	stw	fp,14428(sp)
  280200:	df0e1704 	addi	fp,sp,14428

	alt_up_char_buffer_dev * char_buf_dev;

	char_buf_dev = alt_up_char_buffer_open_dev("/dev/char_buffer");
  280204:	01000a74 	movhi	r4,41
  280208:	212a8c04 	addi	r4,r4,-21968
  28020c:	0281f180 	call	281f18 <alt_up_char_buffer_open_dev>
  280210:	e0b1ef15 	stw	r2,-14404(fp)
	// open the Char Buffer port
	if (char_buf_dev == NULL)
  280214:	e0b1ef17 	ldw	r2,-14404(fp)
  280218:	1004c03a 	cmpne	r2,r2,zero
  28021c:	1000041e 	bne	r2,zero,280230 <main+0x3c>
		alt_printf("Error: could not open char buffer device \n");
  280220:	01000a74 	movhi	r4,41
  280224:	212a9104 	addi	r4,r4,-21948
  280228:	02806b40 	call	2806b4 <alt_printf>
  28022c:	00000306 	br	28023c <main+0x48>
	else
		alt_printf("Opened char buffer device \n");
  280230:	01000a74 	movhi	r4,41
  280234:	212a9c04 	addi	r4,r4,-21904
  280238:	02806b40 	call	2806b4 <alt_printf>
	alt_up_char_buffer_clear(char_buf_dev);
  28023c:	e131ef17 	ldw	r4,-14404(fp)
  280240:	028213c0 	call	28213c <alt_up_char_buffer_clear>
	alt_up_char_buffer_string(char_buf_dev, "ECE4440 Team MSB", 5, 5);
  280244:	e131ef17 	ldw	r4,-14404(fp)
  280248:	01400a74 	movhi	r5,41
  28024c:	296aa304 	addi	r5,r5,-21876
  280250:	01800144 	movi	r6,5
  280254:	01c00144 	movi	r7,5
  280258:	02820280 	call	282028 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Video Demo", 5, 10);
  28025c:	e131ef17 	ldw	r4,-14404(fp)
  280260:	01400a74 	movhi	r5,41
  280264:	296aa804 	addi	r5,r5,-21856
  280268:	01800144 	movi	r6,5
  28026c:	01c00284 	movi	r7,10
  280270:	02820280 	call	282028 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Blue", 15, 20);
  280274:	e131ef17 	ldw	r4,-14404(fp)
  280278:	01400a74 	movhi	r5,41
  28027c:	296aab04 	addi	r5,r5,-21844
  280280:	018003c4 	movi	r6,15
  280284:	01c00504 	movi	r7,20
  280288:	02820280 	call	282028 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Red", 40, 20);
  28028c:	e131ef17 	ldw	r4,-14404(fp)
  280290:	01400a74 	movhi	r5,41
  280294:	296aad04 	addi	r5,r5,-21836
  280298:	01800a04 	movi	r6,40
  28029c:	01c00504 	movi	r7,20
  2802a0:	02820280 	call	282028 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Green", 40, 40);
  2802a4:	e131ef17 	ldw	r4,-14404(fp)
  2802a8:	01400a74 	movhi	r5,41
  2802ac:	296aae04 	addi	r5,r5,-21832
  2802b0:	01800a04 	movi	r6,40
  2802b4:	01c00a04 	movi	r7,40
  2802b8:	02820280 	call	282028 <alt_up_char_buffer_string>
	alt_up_char_buffer_string(char_buf_dev, "Purple", 15, 40);
  2802bc:	e131ef17 	ldw	r4,-14404(fp)
  2802c0:	01400a74 	movhi	r5,41
  2802c4:	296ab004 	addi	r5,r5,-21824
  2802c8:	018003c4 	movi	r6,15
  2802cc:	01c00a04 	movi	r7,40
  2802d0:	02820280 	call	282028 <alt_up_char_buffer_string>


	alt_up_pixel_buffer_dma_dev * pixel_buf_dev;
	// open the Pixel Buffer port
	pixel_buf_dev = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer");
  2802d4:	01000a74 	movhi	r4,41
  2802d8:	212ab204 	addi	r4,r4,-21816
  2802dc:	02821980 	call	282198 <alt_up_pixel_buffer_dma_open_dev>
  2802e0:	e0b1ee15 	stw	r2,-14408(fp)
	if (pixel_buf_dev == NULL)
  2802e4:	e0b1ee17 	ldw	r2,-14408(fp)
  2802e8:	1004c03a 	cmpne	r2,r2,zero
  2802ec:	1000041e 	bne	r2,zero,280300 <main+0x10c>
		alt_printf("Error: could not open pixel buffer device \n");
  2802f0:	01000a74 	movhi	r4,41
  2802f4:	212ab704 	addi	r4,r4,-21796
  2802f8:	02806b40 	call	2806b4 <alt_printf>
  2802fc:	00000306 	br	28030c <main+0x118>
	else
		alt_printf("Opened pixel buffer device \n");
  280300:	01000a74 	movhi	r4,41
  280304:	212ac204 	addi	r4,r4,-21752
  280308:	02806b40 	call	2806b4 <alt_printf>
	//Clear and draw a blue box on the screen
	alt_up_pixel_buffer_dma_clear_screen(pixel_buf_dev, 0);
  28030c:	e131ee17 	ldw	r4,-14408(fp)
  280310:	000b883a 	mov	r5,zero
  280314:	028245c0 	call	28245c <alt_up_pixel_buffer_dma_clear_screen>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buf_dev);
  280318:	e131ee17 	ldw	r4,-14408(fp)
  28031c:	02823d00 	call	2823d0 <alt_up_pixel_buffer_dma_swap_buffers>
	alt_up_pixel_buffer_dma_draw_box(pixel_buf_dev, 0, 0, 200, 200, 0x3FF, 0); //blue box
  280320:	00803204 	movi	r2,200
  280324:	d8800015 	stw	r2,0(sp)
  280328:	0080ffc4 	movi	r2,1023
  28032c:	d8800115 	stw	r2,4(sp)
  280330:	d8000215 	stw	zero,8(sp)
  280334:	e131ee17 	ldw	r4,-14408(fp)
  280338:	000b883a 	mov	r5,zero
  28033c:	000d883a 	mov	r6,zero
  280340:	01c03204 	movi	r7,200
  280344:	02825c00 	call	2825c0 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buf_dev, 200, 200, 400, 400, 0xFFC00, 1); //green box
  280348:	00806404 	movi	r2,400
  28034c:	d8800015 	stw	r2,0(sp)
  280350:	00800434 	movhi	r2,16
  280354:	10bf0004 	addi	r2,r2,-1024
  280358:	d8800115 	stw	r2,4(sp)
  28035c:	00800044 	movi	r2,1
  280360:	d8800215 	stw	r2,8(sp)
  280364:	e131ee17 	ldw	r4,-14408(fp)
  280368:	01403204 	movi	r5,200
  28036c:	01803204 	movi	r6,200
  280370:	01c06404 	movi	r7,400
  280374:	02825c00 	call	2825c0 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buf_dev, 200, 0, 400, 200, 0x3FF00000, 0); //red box
  280378:	00803204 	movi	r2,200
  28037c:	d8800015 	stw	r2,0(sp)
  280380:	008ffc34 	movhi	r2,16368
  280384:	d8800115 	stw	r2,4(sp)
  280388:	d8000215 	stw	zero,8(sp)
  28038c:	e131ee17 	ldw	r4,-14408(fp)
  280390:	01403204 	movi	r5,200
  280394:	000d883a 	mov	r6,zero
  280398:	01c06404 	movi	r7,400
  28039c:	02825c00 	call	2825c0 <alt_up_pixel_buffer_dma_draw_box>
	alt_up_pixel_buffer_dma_draw_box(pixel_buf_dev, 0, 200, 200, 400, 0x3FF003FF, 1); //light blue box
  2803a0:	00806404 	movi	r2,400
  2803a4:	d8800015 	stw	r2,0(sp)
  2803a8:	008ffc34 	movhi	r2,16368
  2803ac:	1080ffc4 	addi	r2,r2,1023
  2803b0:	d8800115 	stw	r2,4(sp)
  2803b4:	00800044 	movi	r2,1
  2803b8:	d8800215 	stw	r2,8(sp)
  2803bc:	e131ee17 	ldw	r4,-14408(fp)
  2803c0:	000b883a 	mov	r5,zero
  2803c4:	01803204 	movi	r6,200
  2803c8:	01c03204 	movi	r7,200
  2803cc:	02825c00 	call	2825c0 <alt_up_pixel_buffer_dma_draw_box>
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255}};
  2803d0:	00800a34 	movhi	r2,40
  2803d4:	109c7c04 	addi	r2,r2,29168
  2803d8:	e131f004 	addi	r4,fp,-14400
  2803dc:	100b883a 	mov	r5,r2
  2803e0:	018e1004 	movi	r6,14400
  2803e4:	02804bc0 	call	2804bc <memcpy>

	int i, j;
	for (i = 0; i < 60; i++){
  2803e8:	e031ed15 	stw	zero,-14412(fp)
  2803ec:	00002a06 	br	280498 <main+0x2a4>
		for (j = 0; j < 60; j++){
  2803f0:	e031ec15 	stw	zero,-14416(fp)
  2803f4:	00002206 	br	280480 <main+0x28c>
			if (image[i][j] < 255)
  2803f8:	e0b1ed17 	ldw	r2,-14412(fp)
  2803fc:	e0f1ec17 	ldw	r3,-14416(fp)
  280400:	10800f24 	muli	r2,r2,60
  280404:	10c5883a 	add	r2,r2,r3
  280408:	1085883a 	add	r2,r2,r2
  28040c:	1085883a 	add	r2,r2,r2
  280410:	e0f1ec04 	addi	r3,fp,-14416
  280414:	10c5883a 	add	r2,r2,r3
  280418:	10800404 	addi	r2,r2,16
  28041c:	10800017 	ldw	r2,0(r2)
  280420:	10803fc8 	cmpgei	r2,r2,255
  280424:	10000a1e 	bne	r2,zero,280450 <main+0x25c>
				alt_up_pixel_buffer_dma_draw(pixel_buf_dev, 0x0, 100+i, 100+j);
  280428:	e0b1ed17 	ldw	r2,-14412(fp)
  28042c:	10801904 	addi	r2,r2,100
  280430:	100d883a 	mov	r6,r2
  280434:	e0b1ec17 	ldw	r2,-14416(fp)
  280438:	10801904 	addi	r2,r2,100
  28043c:	100f883a 	mov	r7,r2
  280440:	e131ee17 	ldw	r4,-14408(fp)
  280444:	000b883a 	mov	r5,zero
  280448:	02821d80 	call	2821d8 <alt_up_pixel_buffer_dma_draw>
  28044c:	00000906 	br	280474 <main+0x280>
			else
				alt_up_pixel_buffer_dma_draw(pixel_buf_dev, 0xFFFFFFFF, 100+i, 100+j);
  280450:	e0b1ed17 	ldw	r2,-14412(fp)
  280454:	10801904 	addi	r2,r2,100
  280458:	100d883a 	mov	r6,r2
  28045c:	e0b1ec17 	ldw	r2,-14416(fp)
  280460:	10801904 	addi	r2,r2,100
  280464:	100f883a 	mov	r7,r2
  280468:	e131ee17 	ldw	r4,-14408(fp)
  28046c:	017fffc4 	movi	r5,-1
  280470:	02821d80 	call	2821d8 <alt_up_pixel_buffer_dma_draw>
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255}};

	int i, j;
	for (i = 0; i < 60; i++){
		for (j = 0; j < 60; j++){
  280474:	e0b1ec17 	ldw	r2,-14416(fp)
  280478:	10800044 	addi	r2,r2,1
  28047c:	e0b1ec15 	stw	r2,-14416(fp)
  280480:	e0b1ec17 	ldw	r2,-14416(fp)
  280484:	10800f10 	cmplti	r2,r2,60
  280488:	103fdb1e 	bne	r2,zero,2803f8 <main+0x204>
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
			{255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255}};

	int i, j;
	for (i = 0; i < 60; i++){
  28048c:	e0b1ed17 	ldw	r2,-14412(fp)
  280490:	10800044 	addi	r2,r2,1
  280494:	e0b1ed15 	stw	r2,-14412(fp)
  280498:	e0b1ed17 	ldw	r2,-14412(fp)
  28049c:	10800f10 	cmplti	r2,r2,60
  2804a0:	103fd31e 	bne	r2,zero,2803f0 <main+0x1fc>
	alt_up_pixel_buffer_dma_draw(pixel_buf_dev, 0x3FF003FF, 103, 100);
	alt_up_pixel_buffer_dma_draw(pixel_buf_dev, 0x3FF003FF, 102, 100);
	alt_up_pixel_buffer_dma_draw(pixel_buf_dev, 0x3FF003FF, 101, 100);*/


	return 0;
  2804a4:	0005883a 	mov	r2,zero
}
  2804a8:	e037883a 	mov	sp,fp
  2804ac:	dfc00117 	ldw	ra,4(sp)
  2804b0:	df000017 	ldw	fp,0(sp)
  2804b4:	dec00204 	addi	sp,sp,8
  2804b8:	f800283a 	ret

002804bc <memcpy>:
  2804bc:	01c003c4 	movi	r7,15
  2804c0:	2007883a 	mov	r3,r4
  2804c4:	3980032e 	bgeu	r7,r6,2804d4 <memcpy+0x18>
  2804c8:	2904b03a 	or	r2,r5,r4
  2804cc:	108000cc 	andi	r2,r2,3
  2804d0:	10000926 	beq	r2,zero,2804f8 <memcpy+0x3c>
  2804d4:	30000626 	beq	r6,zero,2804f0 <memcpy+0x34>
  2804d8:	30cd883a 	add	r6,r6,r3
  2804dc:	28800003 	ldbu	r2,0(r5)
  2804e0:	29400044 	addi	r5,r5,1
  2804e4:	18800005 	stb	r2,0(r3)
  2804e8:	18c00044 	addi	r3,r3,1
  2804ec:	30fffb1e 	bne	r6,r3,2804dc <memcpy+0x20>
  2804f0:	2005883a 	mov	r2,r4
  2804f4:	f800283a 	ret
  2804f8:	3811883a 	mov	r8,r7
  2804fc:	200f883a 	mov	r7,r4
  280500:	28c00017 	ldw	r3,0(r5)
  280504:	31bffc04 	addi	r6,r6,-16
  280508:	38c00015 	stw	r3,0(r7)
  28050c:	28800117 	ldw	r2,4(r5)
  280510:	38800115 	stw	r2,4(r7)
  280514:	28c00217 	ldw	r3,8(r5)
  280518:	38c00215 	stw	r3,8(r7)
  28051c:	28800317 	ldw	r2,12(r5)
  280520:	29400404 	addi	r5,r5,16
  280524:	38800315 	stw	r2,12(r7)
  280528:	39c00404 	addi	r7,r7,16
  28052c:	41bff436 	bltu	r8,r6,280500 <memcpy+0x44>
  280530:	008000c4 	movi	r2,3
  280534:	1180072e 	bgeu	r2,r6,280554 <memcpy+0x98>
  280538:	1007883a 	mov	r3,r2
  28053c:	28800017 	ldw	r2,0(r5)
  280540:	31bfff04 	addi	r6,r6,-4
  280544:	29400104 	addi	r5,r5,4
  280548:	38800015 	stw	r2,0(r7)
  28054c:	39c00104 	addi	r7,r7,4
  280550:	19bffa36 	bltu	r3,r6,28053c <memcpy+0x80>
  280554:	3807883a 	mov	r3,r7
  280558:	003fde06 	br	2804d4 <memcpy+0x18>

0028055c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  28055c:	defffe04 	addi	sp,sp,-8
  280560:	dfc00115 	stw	ra,4(sp)
  280564:	df000015 	stw	fp,0(sp)
  280568:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  28056c:	01000a74 	movhi	r4,41
  280570:	2131e704 	addi	r4,r4,-14436
  280574:	01400a74 	movhi	r5,41
  280578:	296afd04 	addi	r5,r5,-21516
  28057c:	01800a74 	movhi	r6,41
  280580:	31b1e704 	addi	r6,r6,-14436
  280584:	02805dc0 	call	2805dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  280588:	01000a34 	movhi	r4,40
  28058c:	21000804 	addi	r4,r4,32
  280590:	01400a34 	movhi	r5,40
  280594:	29400804 	addi	r5,r5,32
  280598:	01800a34 	movhi	r6,40
  28059c:	31806e04 	addi	r6,r6,440
  2805a0:	02805dc0 	call	2805dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  2805a4:	01000a34 	movhi	r4,40
  2805a8:	211c7c04 	addi	r4,r4,29168
  2805ac:	01400a34 	movhi	r5,40
  2805b0:	295c7c04 	addi	r5,r5,29168
  2805b4:	01800a74 	movhi	r6,41
  2805b8:	31aafd04 	addi	r6,r6,-21516
  2805bc:	02805dc0 	call	2805dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  2805c0:	02839b40 	call	2839b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  2805c4:	0283c6c0 	call	283c6c <alt_icache_flush_all>
}
  2805c8:	e037883a 	mov	sp,fp
  2805cc:	dfc00117 	ldw	ra,4(sp)
  2805d0:	df000017 	ldw	fp,0(sp)
  2805d4:	dec00204 	addi	sp,sp,8
  2805d8:	f800283a 	ret

002805dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  2805dc:	defffc04 	addi	sp,sp,-16
  2805e0:	df000315 	stw	fp,12(sp)
  2805e4:	df000304 	addi	fp,sp,12
  2805e8:	e13ffd15 	stw	r4,-12(fp)
  2805ec:	e17ffe15 	stw	r5,-8(fp)
  2805f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  2805f4:	e0fffe17 	ldw	r3,-8(fp)
  2805f8:	e0bffd17 	ldw	r2,-12(fp)
  2805fc:	18800e26 	beq	r3,r2,280638 <alt_load_section+0x5c>
  {
    while( to != end )
  280600:	00000a06 	br	28062c <alt_load_section+0x50>
    {
      *to++ = *from++;
  280604:	e0bffd17 	ldw	r2,-12(fp)
  280608:	10c00017 	ldw	r3,0(r2)
  28060c:	e0bffe17 	ldw	r2,-8(fp)
  280610:	10c00015 	stw	r3,0(r2)
  280614:	e0bffe17 	ldw	r2,-8(fp)
  280618:	10800104 	addi	r2,r2,4
  28061c:	e0bffe15 	stw	r2,-8(fp)
  280620:	e0bffd17 	ldw	r2,-12(fp)
  280624:	10800104 	addi	r2,r2,4
  280628:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  28062c:	e0fffe17 	ldw	r3,-8(fp)
  280630:	e0bfff17 	ldw	r2,-4(fp)
  280634:	18bff31e 	bne	r3,r2,280604 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  280638:	e037883a 	mov	sp,fp
  28063c:	df000017 	ldw	fp,0(sp)
  280640:	dec00104 	addi	sp,sp,4
  280644:	f800283a 	ret

00280648 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  280648:	defffd04 	addi	sp,sp,-12
  28064c:	dfc00215 	stw	ra,8(sp)
  280650:	df000115 	stw	fp,4(sp)
  280654:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  280658:	0009883a 	mov	r4,zero
  28065c:	028094c0 	call	28094c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  280660:	02809800 	call	280980 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  280664:	01000a74 	movhi	r4,41
  280668:	212aca04 	addi	r4,r4,-21720
  28066c:	01400a74 	movhi	r5,41
  280670:	296aca04 	addi	r5,r5,-21720
  280674:	01800a74 	movhi	r6,41
  280678:	31aaca04 	addi	r6,r6,-21720
  28067c:	0283d600 	call	283d60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  280680:	0283b100 	call	283b10 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  280684:	01000a34 	movhi	r4,40
  280688:	210edd04 	addi	r4,r4,15220
  28068c:	02846e80 	call	2846e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  280690:	d126f817 	ldw	r4,-25632(gp)
  280694:	d166f917 	ldw	r5,-25628(gp)
  280698:	d1a6fa17 	ldw	r6,-25624(gp)
  28069c:	02801f40 	call	2801f4 <main>
  2806a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  2806a4:	01000044 	movi	r4,1
  2806a8:	02838580 	call	283858 <close>
  exit (result);
  2806ac:	e13fff17 	ldw	r4,-4(fp)
  2806b0:	02846fc0 	call	2846fc <exit>

002806b4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  2806b4:	defff204 	addi	sp,sp,-56
  2806b8:	dfc00a15 	stw	ra,40(sp)
  2806bc:	df000915 	stw	fp,36(sp)
  2806c0:	df000904 	addi	fp,sp,36
  2806c4:	e1400215 	stw	r5,8(fp)
  2806c8:	e1800315 	stw	r6,12(fp)
  2806cc:	e1c00415 	stw	r7,16(fp)
  2806d0:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
  2806d4:	e0800204 	addi	r2,fp,8
  2806d8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  2806dc:	e0bfff17 	ldw	r2,-4(fp)
  2806e0:	e0bffd15 	stw	r2,-12(fp)
    while ((c = *w++) != 0)
  2806e4:	00007806 	br	2808c8 <alt_printf+0x214>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  2806e8:	e0bffc07 	ldb	r2,-16(fp)
  2806ec:	10800960 	cmpeqi	r2,r2,37
  2806f0:	1000031e 	bne	r2,zero,280700 <alt_printf+0x4c>
        {
            alt_putchar(c);
  2806f4:	e13ffc07 	ldb	r4,-16(fp)
  2806f8:	028090c0 	call	28090c <alt_putchar>
  2806fc:	00007206 	br	2808c8 <alt_printf+0x214>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  280700:	e0bffd17 	ldw	r2,-12(fp)
  280704:	10800003 	ldbu	r2,0(r2)
  280708:	e0bffc05 	stb	r2,-16(fp)
  28070c:	e0bffc07 	ldb	r2,-16(fp)
  280710:	1004c03a 	cmpne	r2,r2,zero
  280714:	1007883a 	mov	r3,r2
  280718:	e0bffd17 	ldw	r2,-12(fp)
  28071c:	10800044 	addi	r2,r2,1
  280720:	e0bffd15 	stw	r2,-12(fp)
  280724:	18803fcc 	andi	r2,r3,255
  280728:	1005003a 	cmpeq	r2,r2,zero
  28072c:	1000721e 	bne	r2,zero,2808f8 <alt_printf+0x244>
            {
                if (c == '%')
  280730:	e0bffc07 	ldb	r2,-16(fp)
  280734:	10800958 	cmpnei	r2,r2,37
  280738:	1000031e 	bne	r2,zero,280748 <alt_printf+0x94>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  28073c:	e13ffc07 	ldb	r4,-16(fp)
  280740:	028090c0 	call	28090c <alt_putchar>
  280744:	00006006 	br	2808c8 <alt_printf+0x214>
                } 
                else if (c == 'c')
  280748:	e0bffc07 	ldb	r2,-16(fp)
  28074c:	108018d8 	cmpnei	r2,r2,99
  280750:	1000091e 	bne	r2,zero,280778 <alt_printf+0xc4>
                {
                    int v = va_arg(args, int);
  280754:	e0fffe17 	ldw	r3,-8(fp)
  280758:	18800104 	addi	r2,r3,4
  28075c:	e0bffe15 	stw	r2,-8(fp)
  280760:	1805883a 	mov	r2,r3
  280764:	10800017 	ldw	r2,0(r2)
  280768:	e0bffb15 	stw	r2,-20(fp)
                    alt_putchar(v);
  28076c:	e13ffb17 	ldw	r4,-20(fp)
  280770:	028090c0 	call	28090c <alt_putchar>
  280774:	00005406 	br	2808c8 <alt_printf+0x214>
                }
                else if (c == 'x')
  280778:	e0bffc07 	ldb	r2,-16(fp)
  28077c:	10801e18 	cmpnei	r2,r2,120
  280780:	1000371e 	bne	r2,zero,280860 <alt_printf+0x1ac>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  280784:	e0fffe17 	ldw	r3,-8(fp)
  280788:	18800104 	addi	r2,r3,4
  28078c:	e0bffe15 	stw	r2,-8(fp)
  280790:	1805883a 	mov	r2,r3
  280794:	10800017 	ldw	r2,0(r2)
  280798:	e0bffa15 	stw	r2,-24(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  28079c:	e0bffa17 	ldw	r2,-24(fp)
  2807a0:	1004c03a 	cmpne	r2,r2,zero
  2807a4:	1000031e 	bne	r2,zero,2807b4 <alt_printf+0x100>
                    {
                        alt_putchar('0');
  2807a8:	01000c04 	movi	r4,48
  2807ac:	028090c0 	call	28090c <alt_putchar>
                        continue;
  2807b0:	00004506 	br	2808c8 <alt_printf+0x214>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  2807b4:	00800704 	movi	r2,28
  2807b8:	e0bff815 	stw	r2,-32(fp)
                    while (!(v & (0xF << digit_shift)))
  2807bc:	00000306 	br	2807cc <alt_printf+0x118>
                        digit_shift -= 4;
  2807c0:	e0bff817 	ldw	r2,-32(fp)
  2807c4:	10bfff04 	addi	r2,r2,-4
  2807c8:	e0bff815 	stw	r2,-32(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  2807cc:	00c003c4 	movi	r3,15
  2807d0:	e0bff817 	ldw	r2,-32(fp)
  2807d4:	1884983a 	sll	r2,r3,r2
  2807d8:	1007883a 	mov	r3,r2
  2807dc:	e0bffa17 	ldw	r2,-24(fp)
  2807e0:	1884703a 	and	r2,r3,r2
  2807e4:	1005003a 	cmpeq	r2,r2,zero
  2807e8:	103ff51e 	bne	r2,zero,2807c0 <alt_printf+0x10c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  2807ec:	00001806 	br	280850 <alt_printf+0x19c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  2807f0:	00c003c4 	movi	r3,15
  2807f4:	e0bff817 	ldw	r2,-32(fp)
  2807f8:	1884983a 	sll	r2,r3,r2
  2807fc:	1007883a 	mov	r3,r2
  280800:	e0bffa17 	ldw	r2,-24(fp)
  280804:	1886703a 	and	r3,r3,r2
  280808:	e0bff817 	ldw	r2,-32(fp)
  28080c:	1884d83a 	srl	r2,r3,r2
  280810:	e0bff915 	stw	r2,-28(fp)
                        if (digit <= 9)
  280814:	e0bff917 	ldw	r2,-28(fp)
  280818:	108002a8 	cmpgeui	r2,r2,10
  28081c:	1000041e 	bne	r2,zero,280830 <alt_printf+0x17c>
                            c = '0' + digit;
  280820:	e0bff917 	ldw	r2,-28(fp)
  280824:	10800c04 	addi	r2,r2,48
  280828:	e0bffc05 	stb	r2,-16(fp)
  28082c:	00000306 	br	28083c <alt_printf+0x188>
                        else
                            c = 'a' + digit - 10;
  280830:	e0bff917 	ldw	r2,-28(fp)
  280834:	108015c4 	addi	r2,r2,87
  280838:	e0bffc05 	stb	r2,-16(fp)
                        alt_putchar(c);
  28083c:	e13ffc07 	ldb	r4,-16(fp)
  280840:	028090c0 	call	28090c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  280844:	e0bff817 	ldw	r2,-32(fp)
  280848:	10bfff04 	addi	r2,r2,-4
  28084c:	e0bff815 	stw	r2,-32(fp)
  280850:	e0bff817 	ldw	r2,-32(fp)
  280854:	1004403a 	cmpge	r2,r2,zero
  280858:	103fe51e 	bne	r2,zero,2807f0 <alt_printf+0x13c>
  28085c:	00001a06 	br	2808c8 <alt_printf+0x214>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  280860:	e0bffc07 	ldb	r2,-16(fp)
  280864:	10801cd8 	cmpnei	r2,r2,115
  280868:	1000171e 	bne	r2,zero,2808c8 <alt_printf+0x214>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  28086c:	e0fffe17 	ldw	r3,-8(fp)
  280870:	18800104 	addi	r2,r3,4
  280874:	e0bffe15 	stw	r2,-8(fp)
  280878:	1805883a 	mov	r2,r3
  28087c:	10800017 	ldw	r2,0(r2)
  280880:	e0bff715 	stw	r2,-36(fp)

                    while(*s)
  280884:	00000906 	br	2808ac <alt_printf+0x1f8>
                      alt_putchar(*s++);
  280888:	e0bff717 	ldw	r2,-36(fp)
  28088c:	10800003 	ldbu	r2,0(r2)
  280890:	11003fcc 	andi	r4,r2,255
  280894:	2100201c 	xori	r4,r4,128
  280898:	213fe004 	addi	r4,r4,-128
  28089c:	e0bff717 	ldw	r2,-36(fp)
  2808a0:	10800044 	addi	r2,r2,1
  2808a4:	e0bff715 	stw	r2,-36(fp)
  2808a8:	028090c0 	call	28090c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  2808ac:	e0bff717 	ldw	r2,-36(fp)
  2808b0:	10800003 	ldbu	r2,0(r2)
  2808b4:	10803fcc 	andi	r2,r2,255
  2808b8:	1080201c 	xori	r2,r2,128
  2808bc:	10bfe004 	addi	r2,r2,-128
  2808c0:	1004c03a 	cmpne	r2,r2,zero
  2808c4:	103ff01e 	bne	r2,zero,280888 <alt_printf+0x1d4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  2808c8:	e0bffd17 	ldw	r2,-12(fp)
  2808cc:	10800003 	ldbu	r2,0(r2)
  2808d0:	e0bffc05 	stb	r2,-16(fp)
  2808d4:	e0bffc07 	ldb	r2,-16(fp)
  2808d8:	1004c03a 	cmpne	r2,r2,zero
  2808dc:	1007883a 	mov	r3,r2
  2808e0:	e0bffd17 	ldw	r2,-12(fp)
  2808e4:	10800044 	addi	r2,r2,1
  2808e8:	e0bffd15 	stw	r2,-12(fp)
  2808ec:	18803fcc 	andi	r2,r3,255
  2808f0:	1004c03a 	cmpne	r2,r2,zero
  2808f4:	103f7c1e 	bne	r2,zero,2806e8 <alt_printf+0x34>
            {
                break;
            }
        }
    }
}
  2808f8:	e037883a 	mov	sp,fp
  2808fc:	dfc00117 	ldw	ra,4(sp)
  280900:	df000017 	ldw	fp,0(sp)
  280904:	dec00504 	addi	sp,sp,20
  280908:	f800283a 	ret

0028090c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  28090c:	defffd04 	addi	sp,sp,-12
  280910:	dfc00215 	stw	ra,8(sp)
  280914:	df000115 	stw	fp,4(sp)
  280918:	df000104 	addi	fp,sp,4
  28091c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  280920:	00800a74 	movhi	r2,41
  280924:	10b1e204 	addi	r2,r2,-14456
  280928:	10800017 	ldw	r2,0(r2)
  28092c:	11400217 	ldw	r5,8(r2)
  280930:	e13fff17 	ldw	r4,-4(fp)
  280934:	02847a80 	call	2847a8 <putc>
#endif
}
  280938:	e037883a 	mov	sp,fp
  28093c:	dfc00117 	ldw	ra,4(sp)
  280940:	df000017 	ldw	fp,0(sp)
  280944:	dec00204 	addi	sp,sp,8
  280948:	f800283a 	ret

0028094c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  28094c:	defffd04 	addi	sp,sp,-12
  280950:	dfc00215 	stw	ra,8(sp)
  280954:	df000115 	stw	fp,4(sp)
  280958:	df000104 	addi	fp,sp,4
  28095c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
  280960:	02844600 	call	284460 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  280964:	00800044 	movi	r2,1
  280968:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  28096c:	e037883a 	mov	sp,fp
  280970:	dfc00117 	ldw	ra,4(sp)
  280974:	df000017 	ldw	fp,0(sp)
  280978:	dec00204 	addi	sp,sp,8
  28097c:	f800283a 	ret

00280980 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  280980:	defffd04 	addi	sp,sp,-12
  280984:	dfc00215 	stw	ra,8(sp)
  280988:	df000115 	stw	fp,4(sp)
  28098c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  280990:	01000a74 	movhi	r4,41
  280994:	212b0704 	addi	r4,r4,-21476
  280998:	000b883a 	mov	r5,zero
  28099c:	000d883a 	mov	r6,zero
  2809a0:	0280e340 	call	280e34 <altera_avalon_jtag_uart_init>
  2809a4:	01000a74 	movhi	r4,41
  2809a8:	212afd04 	addi	r4,r4,-21516
  2809ac:	0280cb40 	call	280cb4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( LED_GREEN, led_green);
  2809b0:	01000a74 	movhi	r4,41
  2809b4:	212f1504 	addi	r4,r4,-17324
  2809b8:	0280cb40 	call	280cb4 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2, ps2);
  2809bc:	01000a74 	movhi	r4,41
  2809c0:	212f2004 	addi	r4,r4,-17280
  2809c4:	02818c00 	call	2818c0 <alt_up_ps2_init>
  2809c8:	01000a74 	movhi	r4,41
  2809cc:	212f2004 	addi	r4,r4,-17280
  2809d0:	0280cb40 	call	280cb4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, usb);
  2809d4:	01000a74 	movhi	r4,41
  2809d8:	212f2e04 	addi	r4,r4,-17224
  2809dc:	0280cb40 	call	280cb4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, char_buffer);
  2809e0:	00800a74 	movhi	r2,41
  2809e4:	10af3b04 	addi	r2,r2,-17172
  2809e8:	10800a17 	ldw	r2,40(r2)
  2809ec:	10800104 	addi	r2,r2,4
  2809f0:	10800017 	ldw	r2,0(r2)
  2809f4:	10ffffcc 	andi	r3,r2,65535
  2809f8:	00800a74 	movhi	r2,41
  2809fc:	10af3b04 	addi	r2,r2,-17172
  280a00:	10c00c15 	stw	r3,48(r2)
  280a04:	00800a74 	movhi	r2,41
  280a08:	10af3b04 	addi	r2,r2,-17172
  280a0c:	10800a17 	ldw	r2,40(r2)
  280a10:	10800104 	addi	r2,r2,4
  280a14:	10800017 	ldw	r2,0(r2)
  280a18:	1005d43a 	srai	r2,r2,16
  280a1c:	10ffffcc 	andi	r3,r2,65535
  280a20:	00800a74 	movhi	r2,41
  280a24:	10af3b04 	addi	r2,r2,-17172
  280a28:	10c00d15 	stw	r3,52(r2)
  280a2c:	00800a74 	movhi	r2,41
  280a30:	10af3b04 	addi	r2,r2,-17172
  280a34:	10800c17 	ldw	r2,48(r2)
  280a38:	10801068 	cmpgeui	r2,r2,65
  280a3c:	1000081e 	bne	r2,zero,280a60 <alt_sys_init+0xe0>
  280a40:	00c00a74 	movhi	r3,41
  280a44:	18ef3b04 	addi	r3,r3,-17172
  280a48:	00800fc4 	movi	r2,63
  280a4c:	18800f15 	stw	r2,60(r3)
  280a50:	00c00a74 	movhi	r3,41
  280a54:	18ef3b04 	addi	r3,r3,-17172
  280a58:	00800184 	movi	r2,6
  280a5c:	18801015 	stw	r2,64(r3)
  280a60:	00800a74 	movhi	r2,41
  280a64:	10af3b04 	addi	r2,r2,-17172
  280a68:	10800d17 	ldw	r2,52(r2)
  280a6c:	10800868 	cmpgeui	r2,r2,33
  280a70:	1000041e 	bne	r2,zero,280a84 <alt_sys_init+0x104>
  280a74:	00c00a74 	movhi	r3,41
  280a78:	18ef3b04 	addi	r3,r3,-17172
  280a7c:	008007c4 	movi	r2,31
  280a80:	18801115 	stw	r2,68(r3)
  280a84:	01000a74 	movhi	r4,41
  280a88:	212f3b04 	addi	r4,r4,-17172
  280a8c:	0281e940 	call	281e94 <alt_up_char_buffer_init>
  280a90:	01000a74 	movhi	r4,41
  280a94:	212f3b04 	addi	r4,r4,-17172
  280a98:	0280cb40 	call	280cb4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER, pixel_buffer);
  280a9c:	00800a74 	movhi	r2,41
  280aa0:	10af4d04 	addi	r2,r2,-17100
  280aa4:	10800a17 	ldw	r2,40(r2)
  280aa8:	10800017 	ldw	r2,0(r2)
  280aac:	1007883a 	mov	r3,r2
  280ab0:	00800a74 	movhi	r2,41
  280ab4:	10af4d04 	addi	r2,r2,-17100
  280ab8:	10c00b15 	stw	r3,44(r2)
  280abc:	00800a74 	movhi	r2,41
  280ac0:	10af4d04 	addi	r2,r2,-17100
  280ac4:	10800a17 	ldw	r2,40(r2)
  280ac8:	10800104 	addi	r2,r2,4
  280acc:	10800017 	ldw	r2,0(r2)
  280ad0:	1007883a 	mov	r3,r2
  280ad4:	00800a74 	movhi	r2,41
  280ad8:	10af4d04 	addi	r2,r2,-17100
  280adc:	10c00c15 	stw	r3,48(r2)
  280ae0:	00800a74 	movhi	r2,41
  280ae4:	10af4d04 	addi	r2,r2,-17100
  280ae8:	10800a17 	ldw	r2,40(r2)
  280aec:	10800204 	addi	r2,r2,8
  280af0:	10800017 	ldw	r2,0(r2)
  280af4:	10ffffcc 	andi	r3,r2,65535
  280af8:	00800a74 	movhi	r2,41
  280afc:	10af4d04 	addi	r2,r2,-17100
  280b00:	10c00f15 	stw	r3,60(r2)
  280b04:	00800a74 	movhi	r2,41
  280b08:	10af4d04 	addi	r2,r2,-17100
  280b0c:	10800a17 	ldw	r2,40(r2)
  280b10:	10800204 	addi	r2,r2,8
  280b14:	10800017 	ldw	r2,0(r2)
  280b18:	1005d43a 	srai	r2,r2,16
  280b1c:	10ffffcc 	andi	r3,r2,65535
  280b20:	00800a74 	movhi	r2,41
  280b24:	10af4d04 	addi	r2,r2,-17100
  280b28:	10c01015 	stw	r3,64(r2)
  280b2c:	00800a74 	movhi	r2,41
  280b30:	10af4d04 	addi	r2,r2,-17100
  280b34:	10800a17 	ldw	r2,40(r2)
  280b38:	10800304 	addi	r2,r2,12
  280b3c:	10800017 	ldw	r2,0(r2)
  280b40:	1005d07a 	srai	r2,r2,1
  280b44:	10c0004c 	andi	r3,r2,1
  280b48:	00800a74 	movhi	r2,41
  280b4c:	10af4d04 	addi	r2,r2,-17100
  280b50:	10c00d15 	stw	r3,52(r2)
  280b54:	00800a74 	movhi	r2,41
  280b58:	10af4d04 	addi	r2,r2,-17100
  280b5c:	10800a17 	ldw	r2,40(r2)
  280b60:	10800304 	addi	r2,r2,12
  280b64:	10800017 	ldw	r2,0(r2)
  280b68:	1005d13a 	srai	r2,r2,4
  280b6c:	10c003cc 	andi	r3,r2,15
  280b70:	00800a74 	movhi	r2,41
  280b74:	10af4d04 	addi	r2,r2,-17100
  280b78:	10c00e15 	stw	r3,56(r2)
  280b7c:	00800a74 	movhi	r2,41
  280b80:	10af4d04 	addi	r2,r2,-17100
  280b84:	10800a17 	ldw	r2,40(r2)
  280b88:	10800304 	addi	r2,r2,12
  280b8c:	10800017 	ldw	r2,0(r2)
  280b90:	1005d43a 	srai	r2,r2,16
  280b94:	1007883a 	mov	r3,r2
  280b98:	00bfffc4 	movi	r2,-1
  280b9c:	1884703a 	and	r2,r3,r2
  280ba0:	e0bfff45 	stb	r2,-3(fp)
  280ba4:	00800a74 	movhi	r2,41
  280ba8:	10af4d04 	addi	r2,r2,-17100
  280bac:	10800a17 	ldw	r2,40(r2)
  280bb0:	10800304 	addi	r2,r2,12
  280bb4:	10800017 	ldw	r2,0(r2)
  280bb8:	1005d63a 	srai	r2,r2,24
  280bbc:	1007883a 	mov	r3,r2
  280bc0:	00bfffc4 	movi	r2,-1
  280bc4:	1884703a 	and	r2,r3,r2
  280bc8:	e0bfff05 	stb	r2,-4(fp)
  280bcc:	00800a74 	movhi	r2,41
  280bd0:	10af4d04 	addi	r2,r2,-17100
  280bd4:	10800e17 	ldw	r2,56(r2)
  280bd8:	10800058 	cmpnei	r2,r2,1
  280bdc:	1000041e 	bne	r2,zero,280bf0 <alt_sys_init+0x270>
  280be0:	00800a74 	movhi	r2,41
  280be4:	10af4d04 	addi	r2,r2,-17100
  280be8:	10001115 	stw	zero,68(r2)
  280bec:	00000e06 	br	280c28 <alt_sys_init+0x2a8>
  280bf0:	00800a74 	movhi	r2,41
  280bf4:	10af4d04 	addi	r2,r2,-17100
  280bf8:	10800e17 	ldw	r2,56(r2)
  280bfc:	10800098 	cmpnei	r2,r2,2
  280c00:	1000051e 	bne	r2,zero,280c18 <alt_sys_init+0x298>
  280c04:	00c00a74 	movhi	r3,41
  280c08:	18ef4d04 	addi	r3,r3,-17100
  280c0c:	00800044 	movi	r2,1
  280c10:	18801115 	stw	r2,68(r3)
  280c14:	00000406 	br	280c28 <alt_sys_init+0x2a8>
  280c18:	00c00a74 	movhi	r3,41
  280c1c:	18ef4d04 	addi	r3,r3,-17100
  280c20:	00800084 	movi	r2,2
  280c24:	18801115 	stw	r2,68(r3)
  280c28:	e0ffff43 	ldbu	r3,-3(fp)
  280c2c:	00800804 	movi	r2,32
  280c30:	10c7c83a 	sub	r3,r2,r3
  280c34:	00bfffc4 	movi	r2,-1
  280c38:	10c6d83a 	srl	r3,r2,r3
  280c3c:	00800a74 	movhi	r2,41
  280c40:	10af4d04 	addi	r2,r2,-17100
  280c44:	10c01215 	stw	r3,72(r2)
  280c48:	e0ffff43 	ldbu	r3,-3(fp)
  280c4c:	00800a74 	movhi	r2,41
  280c50:	10af4d04 	addi	r2,r2,-17100
  280c54:	10801117 	ldw	r2,68(r2)
  280c58:	1887883a 	add	r3,r3,r2
  280c5c:	00800a74 	movhi	r2,41
  280c60:	10af4d04 	addi	r2,r2,-17100
  280c64:	10c01315 	stw	r3,76(r2)
  280c68:	e0ffff03 	ldbu	r3,-4(fp)
  280c6c:	00800804 	movi	r2,32
  280c70:	10c7c83a 	sub	r3,r2,r3
  280c74:	00bfffc4 	movi	r2,-1
  280c78:	10c6d83a 	srl	r3,r2,r3
  280c7c:	00800a74 	movhi	r2,41
  280c80:	10af4d04 	addi	r2,r2,-17100
  280c84:	10c01415 	stw	r3,80(r2)
  280c88:	01000a74 	movhi	r4,41
  280c8c:	212f4d04 	addi	r4,r4,-17100
  280c90:	0280cb40 	call	280cb4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD_INTERFACE, sd_card_interface);
  280c94:	01000a74 	movhi	r4,41
  280c98:	212f6204 	addi	r4,r4,-17016
  280c9c:	0280cb40 	call	280cb4 <alt_dev_reg>
}
  280ca0:	e037883a 	mov	sp,fp
  280ca4:	dfc00117 	ldw	ra,4(sp)
  280ca8:	df000017 	ldw	fp,0(sp)
  280cac:	dec00204 	addi	sp,sp,8
  280cb0:	f800283a 	ret

00280cb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  280cb4:	defffd04 	addi	sp,sp,-12
  280cb8:	dfc00215 	stw	ra,8(sp)
  280cbc:	df000115 	stw	fp,4(sp)
  280cc0:	df000104 	addi	fp,sp,4
  280cc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  280cc8:	e13fff17 	ldw	r4,-4(fp)
  280ccc:	01400a74 	movhi	r5,41
  280cd0:	2971db04 	addi	r5,r5,-14484
  280cd4:	02839fc0 	call	2839fc <alt_dev_llist_insert>
}
  280cd8:	e037883a 	mov	sp,fp
  280cdc:	dfc00117 	ldw	ra,4(sp)
  280ce0:	df000017 	ldw	fp,0(sp)
  280ce4:	dec00204 	addi	sp,sp,8
  280ce8:	f800283a 	ret

00280cec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  280cec:	defffa04 	addi	sp,sp,-24
  280cf0:	dfc00515 	stw	ra,20(sp)
  280cf4:	df000415 	stw	fp,16(sp)
  280cf8:	df000404 	addi	fp,sp,16
  280cfc:	e13ffd15 	stw	r4,-12(fp)
  280d00:	e17ffe15 	stw	r5,-8(fp)
  280d04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  280d08:	e0bffd17 	ldw	r2,-12(fp)
  280d0c:	10800017 	ldw	r2,0(r2)
  280d10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  280d14:	e0bffc17 	ldw	r2,-16(fp)
  280d18:	11000a04 	addi	r4,r2,40
  280d1c:	e0bffd17 	ldw	r2,-12(fp)
  280d20:	11c00217 	ldw	r7,8(r2)
  280d24:	e17ffe17 	ldw	r5,-8(fp)
  280d28:	e1bfff17 	ldw	r6,-4(fp)
  280d2c:	02813300 	call	281330 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  280d30:	e037883a 	mov	sp,fp
  280d34:	dfc00117 	ldw	ra,4(sp)
  280d38:	df000017 	ldw	fp,0(sp)
  280d3c:	dec00204 	addi	sp,sp,8
  280d40:	f800283a 	ret

00280d44 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  280d44:	defffa04 	addi	sp,sp,-24
  280d48:	dfc00515 	stw	ra,20(sp)
  280d4c:	df000415 	stw	fp,16(sp)
  280d50:	df000404 	addi	fp,sp,16
  280d54:	e13ffd15 	stw	r4,-12(fp)
  280d58:	e17ffe15 	stw	r5,-8(fp)
  280d5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  280d60:	e0bffd17 	ldw	r2,-12(fp)
  280d64:	10800017 	ldw	r2,0(r2)
  280d68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  280d6c:	e0bffc17 	ldw	r2,-16(fp)
  280d70:	11000a04 	addi	r4,r2,40
  280d74:	e0bffd17 	ldw	r2,-12(fp)
  280d78:	11c00217 	ldw	r7,8(r2)
  280d7c:	e17ffe17 	ldw	r5,-8(fp)
  280d80:	e1bfff17 	ldw	r6,-4(fp)
  280d84:	02815540 	call	281554 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  280d88:	e037883a 	mov	sp,fp
  280d8c:	dfc00117 	ldw	ra,4(sp)
  280d90:	df000017 	ldw	fp,0(sp)
  280d94:	dec00204 	addi	sp,sp,8
  280d98:	f800283a 	ret

00280d9c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  280d9c:	defffc04 	addi	sp,sp,-16
  280da0:	dfc00315 	stw	ra,12(sp)
  280da4:	df000215 	stw	fp,8(sp)
  280da8:	df000204 	addi	fp,sp,8
  280dac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  280db0:	e0bfff17 	ldw	r2,-4(fp)
  280db4:	10800017 	ldw	r2,0(r2)
  280db8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  280dbc:	e0bffe17 	ldw	r2,-8(fp)
  280dc0:	11000a04 	addi	r4,r2,40
  280dc4:	e0bfff17 	ldw	r2,-4(fp)
  280dc8:	11400217 	ldw	r5,8(r2)
  280dcc:	02811c80 	call	2811c8 <altera_avalon_jtag_uart_close>
}
  280dd0:	e037883a 	mov	sp,fp
  280dd4:	dfc00117 	ldw	ra,4(sp)
  280dd8:	df000017 	ldw	fp,0(sp)
  280ddc:	dec00204 	addi	sp,sp,8
  280de0:	f800283a 	ret

00280de4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  280de4:	defffa04 	addi	sp,sp,-24
  280de8:	dfc00515 	stw	ra,20(sp)
  280dec:	df000415 	stw	fp,16(sp)
  280df0:	df000404 	addi	fp,sp,16
  280df4:	e13ffd15 	stw	r4,-12(fp)
  280df8:	e17ffe15 	stw	r5,-8(fp)
  280dfc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  280e00:	e0bffd17 	ldw	r2,-12(fp)
  280e04:	10800017 	ldw	r2,0(r2)
  280e08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  280e0c:	e0bffc17 	ldw	r2,-16(fp)
  280e10:	11000a04 	addi	r4,r2,40
  280e14:	e17ffe17 	ldw	r5,-8(fp)
  280e18:	e1bfff17 	ldw	r6,-4(fp)
  280e1c:	028123c0 	call	28123c <altera_avalon_jtag_uart_ioctl>
}
  280e20:	e037883a 	mov	sp,fp
  280e24:	dfc00117 	ldw	ra,4(sp)
  280e28:	df000017 	ldw	fp,0(sp)
  280e2c:	dec00204 	addi	sp,sp,8
  280e30:	f800283a 	ret

00280e34 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  280e34:	defffb04 	addi	sp,sp,-20
  280e38:	dfc00415 	stw	ra,16(sp)
  280e3c:	df000315 	stw	fp,12(sp)
  280e40:	df000304 	addi	fp,sp,12
  280e44:	e13ffd15 	stw	r4,-12(fp)
  280e48:	e17ffe15 	stw	r5,-8(fp)
  280e4c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  280e50:	e0fffd17 	ldw	r3,-12(fp)
  280e54:	00800044 	movi	r2,1
  280e58:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  280e5c:	e0bffd17 	ldw	r2,-12(fp)
  280e60:	10800017 	ldw	r2,0(r2)
  280e64:	11000104 	addi	r4,r2,4
  280e68:	e0bffd17 	ldw	r2,-12(fp)
  280e6c:	10800817 	ldw	r2,32(r2)
  280e70:	1007883a 	mov	r3,r2
  280e74:	2005883a 	mov	r2,r4
  280e78:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  280e7c:	e13fff17 	ldw	r4,-4(fp)
  280e80:	e17ffd17 	ldw	r5,-12(fp)
  280e84:	01800a34 	movhi	r6,40
  280e88:	3183bb04 	addi	r6,r6,3820
  280e8c:	0283dd80 	call	283dd8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  280e90:	e0bffd17 	ldw	r2,-12(fp)
  280e94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  280e98:	e0bffd17 	ldw	r2,-12(fp)
  280e9c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  280ea0:	00800a74 	movhi	r2,41
  280ea4:	10b8d504 	addi	r2,r2,-7340
  280ea8:	10800017 	ldw	r2,0(r2)
  280eac:	100b883a 	mov	r5,r2
  280eb0:	01800a34 	movhi	r6,40
  280eb4:	31844604 	addi	r6,r6,4376
  280eb8:	e1fffd17 	ldw	r7,-12(fp)
  280ebc:	02837040 	call	283704 <alt_alarm_start>
  280ec0:	1004403a 	cmpge	r2,r2,zero
  280ec4:	1000041e 	bne	r2,zero,280ed8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  280ec8:	e0fffd17 	ldw	r3,-12(fp)
  280ecc:	00a00034 	movhi	r2,32768
  280ed0:	10bfffc4 	addi	r2,r2,-1
  280ed4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  280ed8:	e037883a 	mov	sp,fp
  280edc:	dfc00117 	ldw	ra,4(sp)
  280ee0:	df000017 	ldw	fp,0(sp)
  280ee4:	dec00204 	addi	sp,sp,8
  280ee8:	f800283a 	ret

00280eec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  280eec:	defff704 	addi	sp,sp,-36
  280ef0:	df000815 	stw	fp,32(sp)
  280ef4:	df000804 	addi	fp,sp,32
  280ef8:	e13ffe15 	stw	r4,-8(fp)
  280efc:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  280f00:	e0bffe17 	ldw	r2,-8(fp)
  280f04:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  280f08:	e0bffd17 	ldw	r2,-12(fp)
  280f0c:	10800017 	ldw	r2,0(r2)
  280f10:	e0bffc15 	stw	r2,-16(fp)
  280f14:	00000006 	br	280f18 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  280f18:	e0bffc17 	ldw	r2,-16(fp)
  280f1c:	10800104 	addi	r2,r2,4
  280f20:	10800037 	ldwio	r2,0(r2)
  280f24:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  280f28:	e0bffb17 	ldw	r2,-20(fp)
  280f2c:	1080c00c 	andi	r2,r2,768
  280f30:	1005003a 	cmpeq	r2,r2,zero
  280f34:	1000741e 	bne	r2,zero,281108 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  280f38:	e0bffb17 	ldw	r2,-20(fp)
  280f3c:	1080400c 	andi	r2,r2,256
  280f40:	1005003a 	cmpeq	r2,r2,zero
  280f44:	1000351e 	bne	r2,zero,28101c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  280f48:	00800074 	movhi	r2,1
  280f4c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  280f50:	e0bffd17 	ldw	r2,-12(fp)
  280f54:	10800a17 	ldw	r2,40(r2)
  280f58:	10800044 	addi	r2,r2,1
  280f5c:	1081ffcc 	andi	r2,r2,2047
  280f60:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  280f64:	e0bffd17 	ldw	r2,-12(fp)
  280f68:	10c00b17 	ldw	r3,44(r2)
  280f6c:	e0bff917 	ldw	r2,-28(fp)
  280f70:	18801626 	beq	r3,r2,280fcc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  280f74:	e0bffc17 	ldw	r2,-16(fp)
  280f78:	10800037 	ldwio	r2,0(r2)
  280f7c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  280f80:	e0bffa17 	ldw	r2,-24(fp)
  280f84:	10a0000c 	andi	r2,r2,32768
  280f88:	1005003a 	cmpeq	r2,r2,zero
  280f8c:	10000f1e 	bne	r2,zero,280fcc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  280f90:	e0bffd17 	ldw	r2,-12(fp)
  280f94:	10c00a17 	ldw	r3,40(r2)
  280f98:	e0bffa17 	ldw	r2,-24(fp)
  280f9c:	1009883a 	mov	r4,r2
  280fa0:	e0bffd17 	ldw	r2,-12(fp)
  280fa4:	1885883a 	add	r2,r3,r2
  280fa8:	10800e04 	addi	r2,r2,56
  280fac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  280fb0:	e0bffd17 	ldw	r2,-12(fp)
  280fb4:	10800a17 	ldw	r2,40(r2)
  280fb8:	10800044 	addi	r2,r2,1
  280fbc:	10c1ffcc 	andi	r3,r2,2047
  280fc0:	e0bffd17 	ldw	r2,-12(fp)
  280fc4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  280fc8:	003fe106 	br	280f50 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  280fcc:	e0bffa17 	ldw	r2,-24(fp)
  280fd0:	10bfffec 	andhi	r2,r2,65535
  280fd4:	1005003a 	cmpeq	r2,r2,zero
  280fd8:	1000101e 	bne	r2,zero,28101c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  280fdc:	e0bffd17 	ldw	r2,-12(fp)
  280fe0:	10c00817 	ldw	r3,32(r2)
  280fe4:	00bfff84 	movi	r2,-2
  280fe8:	1886703a 	and	r3,r3,r2
  280fec:	e0bffd17 	ldw	r2,-12(fp)
  280ff0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  280ff4:	e0bffc17 	ldw	r2,-16(fp)
  280ff8:	11000104 	addi	r4,r2,4
  280ffc:	e0bffd17 	ldw	r2,-12(fp)
  281000:	10800817 	ldw	r2,32(r2)
  281004:	1007883a 	mov	r3,r2
  281008:	2005883a 	mov	r2,r4
  28100c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  281010:	e0bffc17 	ldw	r2,-16(fp)
  281014:	10800104 	addi	r2,r2,4
  281018:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  28101c:	e0bffb17 	ldw	r2,-20(fp)
  281020:	1080800c 	andi	r2,r2,512
  281024:	1005003a 	cmpeq	r2,r2,zero
  281028:	103fbb1e 	bne	r2,zero,280f18 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  28102c:	e0bffb17 	ldw	r2,-20(fp)
  281030:	10bfffec 	andhi	r2,r2,65535
  281034:	1004d43a 	srli	r2,r2,16
  281038:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  28103c:	00001506 	br	281094 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  281040:	e13ffc17 	ldw	r4,-16(fp)
  281044:	e0bffd17 	ldw	r2,-12(fp)
  281048:	10c00d17 	ldw	r3,52(r2)
  28104c:	e0bffd17 	ldw	r2,-12(fp)
  281050:	1885883a 	add	r2,r3,r2
  281054:	10820e04 	addi	r2,r2,2104
  281058:	10800003 	ldbu	r2,0(r2)
  28105c:	10c03fcc 	andi	r3,r2,255
  281060:	18c0201c 	xori	r3,r3,128
  281064:	18ffe004 	addi	r3,r3,-128
  281068:	2005883a 	mov	r2,r4
  28106c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  281070:	e0bffd17 	ldw	r2,-12(fp)
  281074:	10800d17 	ldw	r2,52(r2)
  281078:	10800044 	addi	r2,r2,1
  28107c:	10c1ffcc 	andi	r3,r2,2047
  281080:	e0bffd17 	ldw	r2,-12(fp)
  281084:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  281088:	e0bff817 	ldw	r2,-32(fp)
  28108c:	10bfffc4 	addi	r2,r2,-1
  281090:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  281094:	e0bff817 	ldw	r2,-32(fp)
  281098:	1005003a 	cmpeq	r2,r2,zero
  28109c:	1000051e 	bne	r2,zero,2810b4 <altera_avalon_jtag_uart_irq+0x1c8>
  2810a0:	e0bffd17 	ldw	r2,-12(fp)
  2810a4:	10c00d17 	ldw	r3,52(r2)
  2810a8:	e0bffd17 	ldw	r2,-12(fp)
  2810ac:	10800c17 	ldw	r2,48(r2)
  2810b0:	18bfe31e 	bne	r3,r2,281040 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  2810b4:	e0bff817 	ldw	r2,-32(fp)
  2810b8:	1005003a 	cmpeq	r2,r2,zero
  2810bc:	103f961e 	bne	r2,zero,280f18 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  2810c0:	e0bffd17 	ldw	r2,-12(fp)
  2810c4:	10c00817 	ldw	r3,32(r2)
  2810c8:	00bfff44 	movi	r2,-3
  2810cc:	1886703a 	and	r3,r3,r2
  2810d0:	e0bffd17 	ldw	r2,-12(fp)
  2810d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  2810d8:	e0bffd17 	ldw	r2,-12(fp)
  2810dc:	10800017 	ldw	r2,0(r2)
  2810e0:	11000104 	addi	r4,r2,4
  2810e4:	e0bffd17 	ldw	r2,-12(fp)
  2810e8:	10800817 	ldw	r2,32(r2)
  2810ec:	1007883a 	mov	r3,r2
  2810f0:	2005883a 	mov	r2,r4
  2810f4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  2810f8:	e0bffc17 	ldw	r2,-16(fp)
  2810fc:	10800104 	addi	r2,r2,4
  281100:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  281104:	003f8406 	br	280f18 <altera_avalon_jtag_uart_irq+0x2c>
}
  281108:	e037883a 	mov	sp,fp
  28110c:	df000017 	ldw	fp,0(sp)
  281110:	dec00104 	addi	sp,sp,4
  281114:	f800283a 	ret

00281118 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  281118:	defffc04 	addi	sp,sp,-16
  28111c:	df000315 	stw	fp,12(sp)
  281120:	df000304 	addi	fp,sp,12
  281124:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  281128:	e0bfff17 	ldw	r2,-4(fp)
  28112c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  281130:	e0bffe17 	ldw	r2,-8(fp)
  281134:	10800017 	ldw	r2,0(r2)
  281138:	10800104 	addi	r2,r2,4
  28113c:	10800037 	ldwio	r2,0(r2)
  281140:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  281144:	e0bffd17 	ldw	r2,-12(fp)
  281148:	1081000c 	andi	r2,r2,1024
  28114c:	1005003a 	cmpeq	r2,r2,zero
  281150:	10000c1e 	bne	r2,zero,281184 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  281154:	e0bffe17 	ldw	r2,-8(fp)
  281158:	10800017 	ldw	r2,0(r2)
  28115c:	11000104 	addi	r4,r2,4
  281160:	e0bffe17 	ldw	r2,-8(fp)
  281164:	10800817 	ldw	r2,32(r2)
  281168:	10810014 	ori	r2,r2,1024
  28116c:	1007883a 	mov	r3,r2
  281170:	2005883a 	mov	r2,r4
  281174:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  281178:	e0bffe17 	ldw	r2,-8(fp)
  28117c:	10000915 	stw	zero,36(r2)
  281180:	00000a06 	br	2811ac <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  281184:	e0bffe17 	ldw	r2,-8(fp)
  281188:	10c00917 	ldw	r3,36(r2)
  28118c:	00a00034 	movhi	r2,32768
  281190:	10bfff04 	addi	r2,r2,-4
  281194:	10c00536 	bltu	r2,r3,2811ac <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  281198:	e0bffe17 	ldw	r2,-8(fp)
  28119c:	10800917 	ldw	r2,36(r2)
  2811a0:	10c00044 	addi	r3,r2,1
  2811a4:	e0bffe17 	ldw	r2,-8(fp)
  2811a8:	10c00915 	stw	r3,36(r2)
  2811ac:	00800a74 	movhi	r2,41
  2811b0:	10b8d504 	addi	r2,r2,-7340
  2811b4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  2811b8:	e037883a 	mov	sp,fp
  2811bc:	df000017 	ldw	fp,0(sp)
  2811c0:	dec00104 	addi	sp,sp,4
  2811c4:	f800283a 	ret

002811c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  2811c8:	defffc04 	addi	sp,sp,-16
  2811cc:	df000315 	stw	fp,12(sp)
  2811d0:	df000304 	addi	fp,sp,12
  2811d4:	e13ffd15 	stw	r4,-12(fp)
  2811d8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  2811dc:	00000706 	br	2811fc <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  2811e0:	e0bffe17 	ldw	r2,-8(fp)
  2811e4:	1090000c 	andi	r2,r2,16384
  2811e8:	1005003a 	cmpeq	r2,r2,zero
  2811ec:	1000031e 	bne	r2,zero,2811fc <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  2811f0:	00bffd44 	movi	r2,-11
  2811f4:	e0bfff15 	stw	r2,-4(fp)
  2811f8:	00000b06 	br	281228 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  2811fc:	e0bffd17 	ldw	r2,-12(fp)
  281200:	10c00d17 	ldw	r3,52(r2)
  281204:	e0bffd17 	ldw	r2,-12(fp)
  281208:	10800c17 	ldw	r2,48(r2)
  28120c:	18800526 	beq	r3,r2,281224 <altera_avalon_jtag_uart_close+0x5c>
  281210:	e0bffd17 	ldw	r2,-12(fp)
  281214:	10c00917 	ldw	r3,36(r2)
  281218:	e0bffd17 	ldw	r2,-12(fp)
  28121c:	10800117 	ldw	r2,4(r2)
  281220:	18bfef36 	bltu	r3,r2,2811e0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  281224:	e03fff15 	stw	zero,-4(fp)
  281228:	e0bfff17 	ldw	r2,-4(fp)
}
  28122c:	e037883a 	mov	sp,fp
  281230:	df000017 	ldw	fp,0(sp)
  281234:	dec00104 	addi	sp,sp,4
  281238:	f800283a 	ret

0028123c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  28123c:	defff804 	addi	sp,sp,-32
  281240:	df000715 	stw	fp,28(sp)
  281244:	df000704 	addi	fp,sp,28
  281248:	e13ffb15 	stw	r4,-20(fp)
  28124c:	e17ffc15 	stw	r5,-16(fp)
  281250:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  281254:	00bff9c4 	movi	r2,-25
  281258:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  28125c:	e0bffc17 	ldw	r2,-16(fp)
  281260:	e0bfff15 	stw	r2,-4(fp)
  281264:	e0ffff17 	ldw	r3,-4(fp)
  281268:	189a8060 	cmpeqi	r2,r3,27137
  28126c:	1000041e 	bne	r2,zero,281280 <altera_avalon_jtag_uart_ioctl+0x44>
  281270:	e0ffff17 	ldw	r3,-4(fp)
  281274:	189a80a0 	cmpeqi	r2,r3,27138
  281278:	10001b1e 	bne	r2,zero,2812e8 <altera_avalon_jtag_uart_ioctl+0xac>
  28127c:	00002706 	br	28131c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  281280:	e0bffb17 	ldw	r2,-20(fp)
  281284:	10c00117 	ldw	r3,4(r2)
  281288:	00a00034 	movhi	r2,32768
  28128c:	10bfffc4 	addi	r2,r2,-1
  281290:	18802226 	beq	r3,r2,28131c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  281294:	e0bffd17 	ldw	r2,-12(fp)
  281298:	10800017 	ldw	r2,0(r2)
  28129c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  2812a0:	e0bff917 	ldw	r2,-28(fp)
  2812a4:	10800090 	cmplti	r2,r2,2
  2812a8:	1000071e 	bne	r2,zero,2812c8 <altera_avalon_jtag_uart_ioctl+0x8c>
  2812ac:	e0fff917 	ldw	r3,-28(fp)
  2812b0:	00a00034 	movhi	r2,32768
  2812b4:	10bfffc4 	addi	r2,r2,-1
  2812b8:	18800326 	beq	r3,r2,2812c8 <altera_avalon_jtag_uart_ioctl+0x8c>
  2812bc:	e0bff917 	ldw	r2,-28(fp)
  2812c0:	e0bffe15 	stw	r2,-8(fp)
  2812c4:	00000306 	br	2812d4 <altera_avalon_jtag_uart_ioctl+0x98>
  2812c8:	00e00034 	movhi	r3,32768
  2812cc:	18ffff84 	addi	r3,r3,-2
  2812d0:	e0fffe15 	stw	r3,-8(fp)
  2812d4:	e0bffb17 	ldw	r2,-20(fp)
  2812d8:	e0fffe17 	ldw	r3,-8(fp)
  2812dc:	10c00115 	stw	r3,4(r2)
      rc = 0;
  2812e0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  2812e4:	00000d06 	br	28131c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  2812e8:	e0bffb17 	ldw	r2,-20(fp)
  2812ec:	10c00117 	ldw	r3,4(r2)
  2812f0:	00a00034 	movhi	r2,32768
  2812f4:	10bfffc4 	addi	r2,r2,-1
  2812f8:	18800826 	beq	r3,r2,28131c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  2812fc:	e13ffd17 	ldw	r4,-12(fp)
  281300:	e0bffb17 	ldw	r2,-20(fp)
  281304:	10c00917 	ldw	r3,36(r2)
  281308:	e0bffb17 	ldw	r2,-20(fp)
  28130c:	10800117 	ldw	r2,4(r2)
  281310:	1885803a 	cmpltu	r2,r3,r2
  281314:	20800015 	stw	r2,0(r4)
      rc = 0;
  281318:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  28131c:	e0bffa17 	ldw	r2,-24(fp)
}
  281320:	e037883a 	mov	sp,fp
  281324:	df000017 	ldw	fp,0(sp)
  281328:	dec00104 	addi	sp,sp,4
  28132c:	f800283a 	ret

00281330 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  281330:	defff204 	addi	sp,sp,-56
  281334:	dfc00d15 	stw	ra,52(sp)
  281338:	df000c15 	stw	fp,48(sp)
  28133c:	df000c04 	addi	fp,sp,48
  281340:	e13ffb15 	stw	r4,-20(fp)
  281344:	e17ffc15 	stw	r5,-16(fp)
  281348:	e1bffd15 	stw	r6,-12(fp)
  28134c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  281350:	e0bffc17 	ldw	r2,-16(fp)
  281354:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  281358:	00004806 	br	28147c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  28135c:	e0bffb17 	ldw	r2,-20(fp)
  281360:	10800a17 	ldw	r2,40(r2)
  281364:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  281368:	e0bffb17 	ldw	r2,-20(fp)
  28136c:	10800b17 	ldw	r2,44(r2)
  281370:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  281374:	e0fff717 	ldw	r3,-36(fp)
  281378:	e0bff617 	ldw	r2,-40(fp)
  28137c:	18800536 	bltu	r3,r2,281394 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  281380:	e0bff717 	ldw	r2,-36(fp)
  281384:	e0fff617 	ldw	r3,-40(fp)
  281388:	10c5c83a 	sub	r2,r2,r3
  28138c:	e0bff815 	stw	r2,-32(fp)
  281390:	00000406 	br	2813a4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  281394:	00820004 	movi	r2,2048
  281398:	e0fff617 	ldw	r3,-40(fp)
  28139c:	10c5c83a 	sub	r2,r2,r3
  2813a0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  2813a4:	e0bff817 	ldw	r2,-32(fp)
  2813a8:	1005003a 	cmpeq	r2,r2,zero
  2813ac:	10001f1e 	bne	r2,zero,28142c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  2813b0:	e0fffd17 	ldw	r3,-12(fp)
  2813b4:	e0bff817 	ldw	r2,-32(fp)
  2813b8:	1880022e 	bgeu	r3,r2,2813c4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  2813bc:	e0bffd17 	ldw	r2,-12(fp)
  2813c0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  2813c4:	e0bffb17 	ldw	r2,-20(fp)
  2813c8:	10c00e04 	addi	r3,r2,56
  2813cc:	e0bff617 	ldw	r2,-40(fp)
  2813d0:	1887883a 	add	r3,r3,r2
  2813d4:	e0bffa17 	ldw	r2,-24(fp)
  2813d8:	1009883a 	mov	r4,r2
  2813dc:	180b883a 	mov	r5,r3
  2813e0:	e1bff817 	ldw	r6,-32(fp)
  2813e4:	02804bc0 	call	2804bc <memcpy>
      ptr   += n;
  2813e8:	e0fff817 	ldw	r3,-32(fp)
  2813ec:	e0bffa17 	ldw	r2,-24(fp)
  2813f0:	10c5883a 	add	r2,r2,r3
  2813f4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  2813f8:	e0fffd17 	ldw	r3,-12(fp)
  2813fc:	e0bff817 	ldw	r2,-32(fp)
  281400:	1885c83a 	sub	r2,r3,r2
  281404:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  281408:	e0fff617 	ldw	r3,-40(fp)
  28140c:	e0bff817 	ldw	r2,-32(fp)
  281410:	1885883a 	add	r2,r3,r2
  281414:	10c1ffcc 	andi	r3,r2,2047
  281418:	e0bffb17 	ldw	r2,-20(fp)
  28141c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  281420:	e0bffd17 	ldw	r2,-12(fp)
  281424:	10800048 	cmpgei	r2,r2,1
  281428:	103fcc1e 	bne	r2,zero,28135c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  28142c:	e0fffa17 	ldw	r3,-24(fp)
  281430:	e0bffc17 	ldw	r2,-16(fp)
  281434:	1880141e 	bne	r3,r2,281488 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  281438:	e0bffe17 	ldw	r2,-8(fp)
  28143c:	1090000c 	andi	r2,r2,16384
  281440:	1004c03a 	cmpne	r2,r2,zero
  281444:	1000101e 	bne	r2,zero,281488 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  281448:	e0bffb17 	ldw	r2,-20(fp)
  28144c:	10c00a17 	ldw	r3,40(r2)
  281450:	e0bff717 	ldw	r2,-36(fp)
  281454:	1880051e 	bne	r3,r2,28146c <altera_avalon_jtag_uart_read+0x13c>
  281458:	e0bffb17 	ldw	r2,-20(fp)
  28145c:	10c00917 	ldw	r3,36(r2)
  281460:	e0bffb17 	ldw	r2,-20(fp)
  281464:	10800117 	ldw	r2,4(r2)
  281468:	18bff736 	bltu	r3,r2,281448 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  28146c:	e0bffb17 	ldw	r2,-20(fp)
  281470:	10c00a17 	ldw	r3,40(r2)
  281474:	e0bff717 	ldw	r2,-36(fp)
  281478:	18800326 	beq	r3,r2,281488 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  28147c:	e0bffd17 	ldw	r2,-12(fp)
  281480:	10800048 	cmpgei	r2,r2,1
  281484:	103fb51e 	bne	r2,zero,28135c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  281488:	e0fffa17 	ldw	r3,-24(fp)
  28148c:	e0bffc17 	ldw	r2,-16(fp)
  281490:	18801926 	beq	r3,r2,2814f8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  281494:	0005303a 	rdctl	r2,status
  281498:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  28149c:	e0fff517 	ldw	r3,-44(fp)
  2814a0:	00bfff84 	movi	r2,-2
  2814a4:	1884703a 	and	r2,r3,r2
  2814a8:	1001703a 	wrctl	status,r2
  
  return context;
  2814ac:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  2814b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  2814b4:	e0bffb17 	ldw	r2,-20(fp)
  2814b8:	10800817 	ldw	r2,32(r2)
  2814bc:	10c00054 	ori	r3,r2,1
  2814c0:	e0bffb17 	ldw	r2,-20(fp)
  2814c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  2814c8:	e0bffb17 	ldw	r2,-20(fp)
  2814cc:	10800017 	ldw	r2,0(r2)
  2814d0:	11000104 	addi	r4,r2,4
  2814d4:	e0bffb17 	ldw	r2,-20(fp)
  2814d8:	10800817 	ldw	r2,32(r2)
  2814dc:	1007883a 	mov	r3,r2
  2814e0:	2005883a 	mov	r2,r4
  2814e4:	10c00035 	stwio	r3,0(r2)
  2814e8:	e0bff917 	ldw	r2,-28(fp)
  2814ec:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2814f0:	e0bff417 	ldw	r2,-48(fp)
  2814f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  2814f8:	e0fffa17 	ldw	r3,-24(fp)
  2814fc:	e0bffc17 	ldw	r2,-16(fp)
  281500:	18800526 	beq	r3,r2,281518 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  281504:	e0fffa17 	ldw	r3,-24(fp)
  281508:	e0bffc17 	ldw	r2,-16(fp)
  28150c:	1887c83a 	sub	r3,r3,r2
  281510:	e0ffff15 	stw	r3,-4(fp)
  281514:	00000906 	br	28153c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  281518:	e0bffe17 	ldw	r2,-8(fp)
  28151c:	1090000c 	andi	r2,r2,16384
  281520:	1005003a 	cmpeq	r2,r2,zero
  281524:	1000031e 	bne	r2,zero,281534 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  281528:	00bffd44 	movi	r2,-11
  28152c:	e0bfff15 	stw	r2,-4(fp)
  281530:	00000206 	br	28153c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  281534:	00bffec4 	movi	r2,-5
  281538:	e0bfff15 	stw	r2,-4(fp)
  28153c:	e0bfff17 	ldw	r2,-4(fp)
}
  281540:	e037883a 	mov	sp,fp
  281544:	dfc00117 	ldw	ra,4(sp)
  281548:	df000017 	ldw	fp,0(sp)
  28154c:	dec00204 	addi	sp,sp,8
  281550:	f800283a 	ret

00281554 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  281554:	defff204 	addi	sp,sp,-56
  281558:	dfc00d15 	stw	ra,52(sp)
  28155c:	df000c15 	stw	fp,48(sp)
  281560:	df000c04 	addi	fp,sp,48
  281564:	e13ffb15 	stw	r4,-20(fp)
  281568:	e17ffc15 	stw	r5,-16(fp)
  28156c:	e1bffd15 	stw	r6,-12(fp)
  281570:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  281574:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  281578:	e0bffc17 	ldw	r2,-16(fp)
  28157c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  281580:	00003a06 	br	28166c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  281584:	e0bffb17 	ldw	r2,-20(fp)
  281588:	10800c17 	ldw	r2,48(r2)
  28158c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  281590:	e0bffb17 	ldw	r2,-20(fp)
  281594:	10800d17 	ldw	r2,52(r2)
  281598:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  28159c:	e0fffa17 	ldw	r3,-24(fp)
  2815a0:	e0bff917 	ldw	r2,-28(fp)
  2815a4:	1880062e 	bgeu	r3,r2,2815c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  2815a8:	e0fff917 	ldw	r3,-28(fp)
  2815ac:	e0bffa17 	ldw	r2,-24(fp)
  2815b0:	1885c83a 	sub	r2,r3,r2
  2815b4:	10bfffc4 	addi	r2,r2,-1
  2815b8:	e0bff815 	stw	r2,-32(fp)
  2815bc:	00000c06 	br	2815f0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  2815c0:	e0bff917 	ldw	r2,-28(fp)
  2815c4:	1005003a 	cmpeq	r2,r2,zero
  2815c8:	1000051e 	bne	r2,zero,2815e0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  2815cc:	00820004 	movi	r2,2048
  2815d0:	e0fffa17 	ldw	r3,-24(fp)
  2815d4:	10c5c83a 	sub	r2,r2,r3
  2815d8:	e0bff815 	stw	r2,-32(fp)
  2815dc:	00000406 	br	2815f0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  2815e0:	0081ffc4 	movi	r2,2047
  2815e4:	e0fffa17 	ldw	r3,-24(fp)
  2815e8:	10c5c83a 	sub	r2,r2,r3
  2815ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  2815f0:	e0bff817 	ldw	r2,-32(fp)
  2815f4:	1005003a 	cmpeq	r2,r2,zero
  2815f8:	10001f1e 	bne	r2,zero,281678 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  2815fc:	e0fffd17 	ldw	r3,-12(fp)
  281600:	e0bff817 	ldw	r2,-32(fp)
  281604:	1880022e 	bgeu	r3,r2,281610 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  281608:	e0bffd17 	ldw	r2,-12(fp)
  28160c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  281610:	e0bffb17 	ldw	r2,-20(fp)
  281614:	10c20e04 	addi	r3,r2,2104
  281618:	e0bffa17 	ldw	r2,-24(fp)
  28161c:	1885883a 	add	r2,r3,r2
  281620:	e0fffc17 	ldw	r3,-16(fp)
  281624:	1009883a 	mov	r4,r2
  281628:	180b883a 	mov	r5,r3
  28162c:	e1bff817 	ldw	r6,-32(fp)
  281630:	02804bc0 	call	2804bc <memcpy>
      ptr   += n;
  281634:	e0fff817 	ldw	r3,-32(fp)
  281638:	e0bffc17 	ldw	r2,-16(fp)
  28163c:	10c5883a 	add	r2,r2,r3
  281640:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  281644:	e0fffd17 	ldw	r3,-12(fp)
  281648:	e0bff817 	ldw	r2,-32(fp)
  28164c:	1885c83a 	sub	r2,r3,r2
  281650:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  281654:	e0fffa17 	ldw	r3,-24(fp)
  281658:	e0bff817 	ldw	r2,-32(fp)
  28165c:	1885883a 	add	r2,r3,r2
  281660:	10c1ffcc 	andi	r3,r2,2047
  281664:	e0bffb17 	ldw	r2,-20(fp)
  281668:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  28166c:	e0bffd17 	ldw	r2,-12(fp)
  281670:	10800048 	cmpgei	r2,r2,1
  281674:	103fc31e 	bne	r2,zero,281584 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  281678:	0005303a 	rdctl	r2,status
  28167c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  281680:	e0fff517 	ldw	r3,-44(fp)
  281684:	00bfff84 	movi	r2,-2
  281688:	1884703a 	and	r2,r3,r2
  28168c:	1001703a 	wrctl	status,r2
  
  return context;
  281690:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  281694:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  281698:	e0bffb17 	ldw	r2,-20(fp)
  28169c:	10800817 	ldw	r2,32(r2)
  2816a0:	10c00094 	ori	r3,r2,2
  2816a4:	e0bffb17 	ldw	r2,-20(fp)
  2816a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  2816ac:	e0bffb17 	ldw	r2,-20(fp)
  2816b0:	10800017 	ldw	r2,0(r2)
  2816b4:	11000104 	addi	r4,r2,4
  2816b8:	e0bffb17 	ldw	r2,-20(fp)
  2816bc:	10800817 	ldw	r2,32(r2)
  2816c0:	1007883a 	mov	r3,r2
  2816c4:	2005883a 	mov	r2,r4
  2816c8:	10c00035 	stwio	r3,0(r2)
  2816cc:	e0bff717 	ldw	r2,-36(fp)
  2816d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  2816d4:	e0bff417 	ldw	r2,-48(fp)
  2816d8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  2816dc:	e0bffd17 	ldw	r2,-12(fp)
  2816e0:	10800050 	cmplti	r2,r2,1
  2816e4:	1000111e 	bne	r2,zero,28172c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  2816e8:	e0bffe17 	ldw	r2,-8(fp)
  2816ec:	1090000c 	andi	r2,r2,16384
  2816f0:	1004c03a 	cmpne	r2,r2,zero
  2816f4:	1000101e 	bne	r2,zero,281738 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  2816f8:	e0bffb17 	ldw	r2,-20(fp)
  2816fc:	10c00d17 	ldw	r3,52(r2)
  281700:	e0bff917 	ldw	r2,-28(fp)
  281704:	1880051e 	bne	r3,r2,28171c <altera_avalon_jtag_uart_write+0x1c8>
  281708:	e0bffb17 	ldw	r2,-20(fp)
  28170c:	10c00917 	ldw	r3,36(r2)
  281710:	e0bffb17 	ldw	r2,-20(fp)
  281714:	10800117 	ldw	r2,4(r2)
  281718:	18bff736 	bltu	r3,r2,2816f8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  28171c:	e0bffb17 	ldw	r2,-20(fp)
  281720:	10c00d17 	ldw	r3,52(r2)
  281724:	e0bff917 	ldw	r2,-28(fp)
  281728:	18800326 	beq	r3,r2,281738 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  28172c:	e0bffd17 	ldw	r2,-12(fp)
  281730:	10800048 	cmpgei	r2,r2,1
  281734:	103fcd1e 	bne	r2,zero,28166c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  281738:	e0fffc17 	ldw	r3,-16(fp)
  28173c:	e0bff617 	ldw	r2,-40(fp)
  281740:	18800526 	beq	r3,r2,281758 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  281744:	e0fffc17 	ldw	r3,-16(fp)
  281748:	e0bff617 	ldw	r2,-40(fp)
  28174c:	1887c83a 	sub	r3,r3,r2
  281750:	e0ffff15 	stw	r3,-4(fp)
  281754:	00000906 	br	28177c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  281758:	e0bffe17 	ldw	r2,-8(fp)
  28175c:	1090000c 	andi	r2,r2,16384
  281760:	1005003a 	cmpeq	r2,r2,zero
  281764:	1000031e 	bne	r2,zero,281774 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  281768:	00bffd44 	movi	r2,-11
  28176c:	e0bfff15 	stw	r2,-4(fp)
  281770:	00000206 	br	28177c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  281774:	00bffec4 	movi	r2,-5
  281778:	e0bfff15 	stw	r2,-4(fp)
  28177c:	e0bfff17 	ldw	r2,-4(fp)
}
  281780:	e037883a 	mov	sp,fp
  281784:	dfc00117 	ldw	ra,4(sp)
  281788:	df000017 	ldw	fp,0(sp)
  28178c:	dec00204 	addi	sp,sp,8
  281790:	f800283a 	ret

00281794 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
  281794:	defffd04 	addi	sp,sp,-12
  281798:	df000215 	stw	fp,8(sp)
  28179c:	df000204 	addi	fp,sp,8
  2817a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
  2817a4:	e0bfff17 	ldw	r2,-4(fp)
  2817a8:	1080400c 	andi	r2,r2,256
  2817ac:	1004d23a 	srli	r2,r2,8
  2817b0:	e0bffe05 	stb	r2,-8(fp)
	return ri;
  2817b4:	e0bffe03 	ldbu	r2,-8(fp)
}
  2817b8:	e037883a 	mov	sp,fp
  2817bc:	df000017 	ldw	fp,0(sp)
  2817c0:	dec00104 	addi	sp,sp,4
  2817c4:	f800283a 	ret

002817c8 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
  2817c8:	defffd04 	addi	sp,sp,-12
  2817cc:	df000215 	stw	fp,8(sp)
  2817d0:	df000204 	addi	fp,sp,8
  2817d4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
  2817d8:	e0bfff17 	ldw	r2,-4(fp)
  2817dc:	1080004c 	andi	r2,r2,1
  2817e0:	e0bffe05 	stb	r2,-8(fp)
	return re;
  2817e4:	e0bffe03 	ldbu	r2,-8(fp)
}
  2817e8:	e037883a 	mov	sp,fp
  2817ec:	df000017 	ldw	fp,0(sp)
  2817f0:	dec00104 	addi	sp,sp,4
  2817f4:	f800283a 	ret

002817f8 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
  2817f8:	defffd04 	addi	sp,sp,-12
  2817fc:	df000215 	stw	fp,8(sp)
  281800:	df000204 	addi	fp,sp,8
  281804:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
  281808:	e0bfff17 	ldw	r2,-4(fp)
  28180c:	1081000c 	andi	r2,r2,1024
  281810:	1004d2ba 	srli	r2,r2,10
  281814:	e0bffe05 	stb	r2,-8(fp)
	return re;
  281818:	e0bffe03 	ldbu	r2,-8(fp)
}
  28181c:	e037883a 	mov	sp,fp
  281820:	df000017 	ldw	fp,0(sp)
  281824:	dec00104 	addi	sp,sp,4
  281828:	f800283a 	ret

0028182c <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
  28182c:	defffd04 	addi	sp,sp,-12
  281830:	df000215 	stw	fp,8(sp)
  281834:	df000204 	addi	fp,sp,8
  281838:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
  28183c:	e0bfff17 	ldw	r2,-4(fp)
  281840:	10bfffec 	andhi	r2,r2,65535
  281844:	1004d43a 	srli	r2,r2,16
  281848:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
  28184c:	e0bffe0b 	ldhu	r2,-8(fp)
}
  281850:	e037883a 	mov	sp,fp
  281854:	df000017 	ldw	fp,0(sp)
  281858:	dec00104 	addi	sp,sp,4
  28185c:	f800283a 	ret

00281860 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
  281860:	defffd04 	addi	sp,sp,-12
  281864:	df000215 	stw	fp,8(sp)
  281868:	df000204 	addi	fp,sp,8
  28186c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
  281870:	e0bfff17 	ldw	r2,-4(fp)
  281874:	10a0000c 	andi	r2,r2,32768
  281878:	1004d3fa 	srli	r2,r2,15
  28187c:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
  281880:	e0bffe03 	ldbu	r2,-8(fp)
}
  281884:	e037883a 	mov	sp,fp
  281888:	df000017 	ldw	fp,0(sp)
  28188c:	dec00104 	addi	sp,sp,4
  281890:	f800283a 	ret

00281894 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
  281894:	defffd04 	addi	sp,sp,-12
  281898:	df000215 	stw	fp,8(sp)
  28189c:	df000204 	addi	fp,sp,8
  2818a0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
  2818a4:	e0bfff17 	ldw	r2,-4(fp)
  2818a8:	e0bffe05 	stb	r2,-8(fp)
	return data;
  2818ac:	e0bffe03 	ldbu	r2,-8(fp)
}
  2818b0:	e037883a 	mov	sp,fp
  2818b4:	df000017 	ldw	fp,0(sp)
  2818b8:	dec00104 	addi	sp,sp,4
  2818bc:	f800283a 	ret

002818c0 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
  2818c0:	defffb04 	addi	sp,sp,-20
  2818c4:	dfc00415 	stw	ra,16(sp)
  2818c8:	df000315 	stw	fp,12(sp)
  2818cc:	df000304 	addi	fp,sp,12
  2818d0:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
  2818d4:	e13fff17 	ldw	r4,-4(fp)
  2818d8:	01403fc4 	movi	r5,255
  2818dc:	0281b200 	call	281b20 <alt_up_ps2_write_data_byte_with_ack>
  2818e0:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
  2818e4:	e0bffd17 	ldw	r2,-12(fp)
  2818e8:	1004c03a 	cmpne	r2,r2,zero
  2818ec:	1000221e 	bne	r2,zero,281978 <alt_up_ps2_init+0xb8>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  2818f0:	e17ffe04 	addi	r5,fp,-8
  2818f4:	e13fff17 	ldw	r4,-4(fp)
  2818f8:	0281b8c0 	call	281b8c <alt_up_ps2_read_data_byte_timeout>
  2818fc:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
  281900:	e0bffd17 	ldw	r2,-12(fp)
  281904:	1004c03a 	cmpne	r2,r2,zero
  281908:	10001b1e 	bne	r2,zero,281978 <alt_up_ps2_init+0xb8>
  28190c:	e0bffe03 	ldbu	r2,-8(fp)
  281910:	10803fcc 	andi	r2,r2,255
  281914:	10802a98 	cmpnei	r2,r2,170
  281918:	1000171e 	bne	r2,zero,281978 <alt_up_ps2_init+0xb8>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
  28191c:	e17ffe04 	addi	r5,fp,-8
  281920:	e13fff17 	ldw	r4,-4(fp)
  281924:	0281b8c0 	call	281b8c <alt_up_ps2_read_data_byte_timeout>
  281928:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
  28192c:	e0bffd17 	ldw	r2,-12(fp)
  281930:	10bfe318 	cmpnei	r2,r2,-116
  281934:	1000041e 	bne	r2,zero,281948 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
  281938:	e0ffff17 	ldw	r3,-4(fp)
  28193c:	00800044 	movi	r2,1
  281940:	18800d15 	stw	r2,52(r3)
  281944:	00000c06 	br	281978 <alt_up_ps2_init+0xb8>
			}
			else if (status == 0 && byte == 0x00)
  281948:	e0bffd17 	ldw	r2,-12(fp)
  28194c:	1004c03a 	cmpne	r2,r2,zero
  281950:	1000091e 	bne	r2,zero,281978 <alt_up_ps2_init+0xb8>
  281954:	e0bffe03 	ldbu	r2,-8(fp)
  281958:	10803fcc 	andi	r2,r2,255
  28195c:	1004c03a 	cmpne	r2,r2,zero
  281960:	1000051e 	bne	r2,zero,281978 <alt_up_ps2_init+0xb8>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
  281964:	e0bfff17 	ldw	r2,-4(fp)
  281968:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
  28196c:	e13fff17 	ldw	r4,-4(fp)
  281970:	01403d04 	movi	r5,244
  281974:	0281a380 	call	281a38 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
  281978:	e037883a 	mov	sp,fp
  28197c:	dfc00117 	ldw	ra,4(sp)
  281980:	df000017 	ldw	fp,0(sp)
  281984:	dec00204 	addi	sp,sp,8
  281988:	f800283a 	ret

0028198c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
  28198c:	defffd04 	addi	sp,sp,-12
  281990:	df000215 	stw	fp,8(sp)
  281994:	df000204 	addi	fp,sp,8
  281998:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  28199c:	e0bfff17 	ldw	r2,-4(fp)
  2819a0:	10800a17 	ldw	r2,40(r2)
  2819a4:	10800104 	addi	r2,r2,4
  2819a8:	10800037 	ldwio	r2,0(r2)
  2819ac:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  2819b0:	e0bffe17 	ldw	r2,-8(fp)
  2819b4:	10800054 	ori	r2,r2,1
  2819b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  2819bc:	e0bfff17 	ldw	r2,-4(fp)
  2819c0:	10800a17 	ldw	r2,40(r2)
  2819c4:	10800104 	addi	r2,r2,4
  2819c8:	e0fffe17 	ldw	r3,-8(fp)
  2819cc:	10c00035 	stwio	r3,0(r2)
}
  2819d0:	e037883a 	mov	sp,fp
  2819d4:	df000017 	ldw	fp,0(sp)
  2819d8:	dec00104 	addi	sp,sp,4
  2819dc:	f800283a 	ret

002819e0 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
  2819e0:	defffd04 	addi	sp,sp,-12
  2819e4:	df000215 	stw	fp,8(sp)
  2819e8:	df000204 	addi	fp,sp,8
  2819ec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
  2819f0:	e0bfff17 	ldw	r2,-4(fp)
  2819f4:	10800a17 	ldw	r2,40(r2)
  2819f8:	10800104 	addi	r2,r2,4
  2819fc:	10800037 	ldwio	r2,0(r2)
  281a00:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
  281a04:	e0fffe17 	ldw	r3,-8(fp)
  281a08:	00bfff84 	movi	r2,-2
  281a0c:	1884703a 	and	r2,r3,r2
  281a10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
  281a14:	e0bfff17 	ldw	r2,-4(fp)
  281a18:	10800a17 	ldw	r2,40(r2)
  281a1c:	10800104 	addi	r2,r2,4
  281a20:	e0fffe17 	ldw	r3,-8(fp)
  281a24:	10c00035 	stwio	r3,0(r2)
}
  281a28:	e037883a 	mov	sp,fp
  281a2c:	df000017 	ldw	fp,0(sp)
  281a30:	dec00104 	addi	sp,sp,4
  281a34:	f800283a 	ret

00281a38 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
  281a38:	defffa04 	addi	sp,sp,-24
  281a3c:	dfc00515 	stw	ra,20(sp)
  281a40:	df000415 	stw	fp,16(sp)
  281a44:	df000404 	addi	fp,sp,16
  281a48:	e13ffd15 	stw	r4,-12(fp)
  281a4c:	e17ffe05 	stb	r5,-8(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
  281a50:	e0bffd17 	ldw	r2,-12(fp)
  281a54:	10800a17 	ldw	r2,40(r2)
  281a58:	e0fffe03 	ldbu	r3,-8(fp)
  281a5c:	10c00025 	stbio	r3,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
  281a60:	e0bffd17 	ldw	r2,-12(fp)
  281a64:	10800a17 	ldw	r2,40(r2)
  281a68:	10800104 	addi	r2,r2,4
  281a6c:	10800037 	ldwio	r2,0(r2)
  281a70:	e0bffc15 	stw	r2,-16(fp)
	if (read_CE_bit(ctrl_reg))
  281a74:	e13ffc17 	ldw	r4,-16(fp)
  281a78:	02817f80 	call	2817f8 <read_CE_bit>
  281a7c:	10803fcc 	andi	r2,r2,255
  281a80:	1005003a 	cmpeq	r2,r2,zero
  281a84:	1000031e 	bne	r2,zero,281a94 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
  281a88:	00bffec4 	movi	r2,-5
  281a8c:	e0bfff15 	stw	r2,-4(fp)
  281a90:	00000106 	br	281a98 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
  281a94:	e03fff15 	stw	zero,-4(fp)
  281a98:	e0bfff17 	ldw	r2,-4(fp)
}
  281a9c:	e037883a 	mov	sp,fp
  281aa0:	dfc00117 	ldw	ra,4(sp)
  281aa4:	df000017 	ldw	fp,0(sp)
  281aa8:	dec00204 	addi	sp,sp,8
  281aac:	f800283a 	ret

00281ab0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
  281ab0:	defffb04 	addi	sp,sp,-20
  281ab4:	dfc00415 	stw	ra,16(sp)
  281ab8:	df000315 	stw	fp,12(sp)
  281abc:	df000304 	addi	fp,sp,12
  281ac0:	e13ffe15 	stw	r4,-8(fp)
	unsigned char data = 0;
  281ac4:	e03ffd45 	stb	zero,-11(fp)
	unsigned char status = 0;
  281ac8:	e03ffd05 	stb	zero,-12(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
  281acc:	e17ffd44 	addi	r5,fp,-11
  281ad0:	e13ffe17 	ldw	r4,-8(fp)
  281ad4:	0281b8c0 	call	281b8c <alt_up_ps2_read_data_byte_timeout>
  281ad8:	e0bffd05 	stb	r2,-12(fp)
		if ( status == 0)
  281adc:	e0bffd03 	ldbu	r2,-12(fp)
  281ae0:	1004c03a 	cmpne	r2,r2,zero
  281ae4:	1000061e 	bne	r2,zero,281b00 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
  281ae8:	e0bffd43 	ldbu	r2,-11(fp)
  281aec:	10803fcc 	andi	r2,r2,255
  281af0:	10803e98 	cmpnei	r2,r2,250
  281af4:	103ff51e 	bne	r2,zero,281acc <alt_up_ps2_wait_for_ack+0x1c>
				return 0;
  281af8:	e03fff15 	stw	zero,-4(fp)
  281afc:	00000206 	br	281b08 <alt_up_ps2_wait_for_ack+0x58>
		}
		else 
		{
			return status;
  281b00:	e0bffd03 	ldbu	r2,-12(fp)
  281b04:	e0bfff15 	stw	r2,-4(fp)
  281b08:	e0bfff17 	ldw	r2,-4(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
  281b0c:	e037883a 	mov	sp,fp
  281b10:	dfc00117 	ldw	ra,4(sp)
  281b14:	df000017 	ldw	fp,0(sp)
  281b18:	dec00204 	addi	sp,sp,8
  281b1c:	f800283a 	ret

00281b20 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
  281b20:	defff904 	addi	sp,sp,-28
  281b24:	dfc00615 	stw	ra,24(sp)
  281b28:	df000515 	stw	fp,20(sp)
  281b2c:	df000504 	addi	fp,sp,20
  281b30:	e13ffd15 	stw	r4,-12(fp)
  281b34:	e17ffe05 	stb	r5,-8(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
  281b38:	e17ffe03 	ldbu	r5,-8(fp)
  281b3c:	e13ffd17 	ldw	r4,-12(fp)
  281b40:	0281a380 	call	281a38 <alt_up_ps2_write_data_byte>
  281b44:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
  281b48:	e0bffc17 	ldw	r2,-16(fp)
  281b4c:	1005003a 	cmpeq	r2,r2,zero
  281b50:	1000031e 	bne	r2,zero,281b60 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
  281b54:	e0bffc17 	ldw	r2,-16(fp)
  281b58:	e0bfff15 	stw	r2,-4(fp)
  281b5c:	00000506 	br	281b74 <alt_up_ps2_write_data_byte_with_ack+0x54>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
  281b60:	e13ffd17 	ldw	r4,-12(fp)
  281b64:	0281ab00 	call	281ab0 <alt_up_ps2_wait_for_ack>
  281b68:	e0bffb15 	stw	r2,-20(fp)
	return ack_status;
  281b6c:	e0bffb17 	ldw	r2,-20(fp)
  281b70:	e0bfff15 	stw	r2,-4(fp)
  281b74:	e0bfff17 	ldw	r2,-4(fp)
}
  281b78:	e037883a 	mov	sp,fp
  281b7c:	dfc00117 	ldw	ra,4(sp)
  281b80:	df000017 	ldw	fp,0(sp)
  281b84:	dec00204 	addi	sp,sp,8
  281b88:	f800283a 	ret

00281b8c <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  281b8c:	defff904 	addi	sp,sp,-28
  281b90:	dfc00615 	stw	ra,24(sp)
  281b94:	df000515 	stw	fp,20(sp)
  281b98:	df000504 	addi	fp,sp,20
  281b9c:	e13ffd15 	stw	r4,-12(fp)
  281ba0:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  281ba4:	e03ffc15 	stw	zero,-16(fp)
	unsigned int count = 0;
  281ba8:	e03ffb15 	stw	zero,-20(fp)
  281bac:	00000006 	br	281bb0 <alt_up_ps2_read_data_byte_timeout+0x24>
	do {
		count++;
  281bb0:	e0bffb17 	ldw	r2,-20(fp)
  281bb4:	10800044 	addi	r2,r2,1
  281bb8:	e0bffb15 	stw	r2,-20(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  281bbc:	e0bffd17 	ldw	r2,-12(fp)
  281bc0:	10800a17 	ldw	r2,40(r2)
  281bc4:	10800037 	ldwio	r2,0(r2)
  281bc8:	e0bffc15 	stw	r2,-16(fp)
		if (read_data_valid(data_reg))
  281bcc:	e13ffc17 	ldw	r4,-16(fp)
  281bd0:	02818600 	call	281860 <read_data_valid>
  281bd4:	10803fcc 	andi	r2,r2,255
  281bd8:	1005003a 	cmpeq	r2,r2,zero
  281bdc:	1000071e 	bne	r2,zero,281bfc <alt_up_ps2_read_data_byte_timeout+0x70>
		{
			*byte = read_data_byte(data_reg);
  281be0:	e13ffc17 	ldw	r4,-16(fp)
  281be4:	02818940 	call	281894 <read_data_byte>
  281be8:	1007883a 	mov	r3,r2
  281bec:	e0bffe17 	ldw	r2,-8(fp)
  281bf0:	10c00005 	stb	r3,0(r2)
			return 0;
  281bf4:	e03fff15 	stw	zero,-4(fp)
  281bf8:	00000a06 	br	281c24 <alt_up_ps2_read_data_byte_timeout+0x98>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
  281bfc:	e0bffd17 	ldw	r2,-12(fp)
  281c00:	10800c17 	ldw	r2,48(r2)
  281c04:	1005003a 	cmpeq	r2,r2,zero
  281c08:	103fe91e 	bne	r2,zero,281bb0 <alt_up_ps2_read_data_byte_timeout+0x24>
  281c0c:	e0bffd17 	ldw	r2,-12(fp)
  281c10:	10c00c17 	ldw	r3,48(r2)
  281c14:	e0bffb17 	ldw	r2,-20(fp)
  281c18:	18bfe52e 	bgeu	r3,r2,281bb0 <alt_up_ps2_read_data_byte_timeout+0x24>
		{
			return -ETIMEDOUT;
  281c1c:	00bfe304 	movi	r2,-116
  281c20:	e0bfff15 	stw	r2,-4(fp)
		}
	} while (1);
  281c24:	e0bfff17 	ldw	r2,-4(fp)
}
  281c28:	e037883a 	mov	sp,fp
  281c2c:	dfc00117 	ldw	ra,4(sp)
  281c30:	df000017 	ldw	fp,0(sp)
  281c34:	dec00204 	addi	sp,sp,8
  281c38:	f800283a 	ret

00281c3c <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
  281c3c:	defffa04 	addi	sp,sp,-24
  281c40:	dfc00515 	stw	ra,20(sp)
  281c44:	df000415 	stw	fp,16(sp)
  281c48:	df000404 	addi	fp,sp,16
  281c4c:	e13ffd15 	stw	r4,-12(fp)
  281c50:	e17ffe15 	stw	r5,-8(fp)
	unsigned int data_reg = 0; 
  281c54:	e03ffc15 	stw	zero,-16(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  281c58:	e0bffd17 	ldw	r2,-12(fp)
  281c5c:	10800a17 	ldw	r2,40(r2)
  281c60:	10800037 	ldwio	r2,0(r2)
  281c64:	e0bffc15 	stw	r2,-16(fp)
	if (read_data_valid(data_reg))
  281c68:	e13ffc17 	ldw	r4,-16(fp)
  281c6c:	02818600 	call	281860 <read_data_valid>
  281c70:	10803fcc 	andi	r2,r2,255
  281c74:	1005003a 	cmpeq	r2,r2,zero
  281c78:	1000071e 	bne	r2,zero,281c98 <alt_up_ps2_read_data_byte+0x5c>
	{
		*byte = read_data_byte(data_reg);
  281c7c:	e13ffc17 	ldw	r4,-16(fp)
  281c80:	02818940 	call	281894 <read_data_byte>
  281c84:	1007883a 	mov	r3,r2
  281c88:	e0bffe17 	ldw	r2,-8(fp)
  281c8c:	10c00005 	stb	r3,0(r2)
		return 0;
  281c90:	e03fff15 	stw	zero,-4(fp)
  281c94:	00000206 	br	281ca0 <alt_up_ps2_read_data_byte+0x64>
	}
	return -1;
  281c98:	00bfffc4 	movi	r2,-1
  281c9c:	e0bfff15 	stw	r2,-4(fp)
  281ca0:	e0bfff17 	ldw	r2,-4(fp)
}
  281ca4:	e037883a 	mov	sp,fp
  281ca8:	dfc00117 	ldw	ra,4(sp)
  281cac:	df000017 	ldw	fp,0(sp)
  281cb0:	dec00204 	addi	sp,sp,8
  281cb4:	f800283a 	ret

00281cb8 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
  281cb8:	defffb04 	addi	sp,sp,-20
  281cbc:	dfc00415 	stw	ra,16(sp)
  281cc0:	df000315 	stw	fp,12(sp)
  281cc4:	df000304 	addi	fp,sp,12
  281cc8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
  281ccc:	e03ffe0d 	sth	zero,-8(fp)
	unsigned int data_reg = 0;
  281cd0:	e03ffd15 	stw	zero,-12(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
  281cd4:	e0bfff17 	ldw	r2,-4(fp)
  281cd8:	10800a17 	ldw	r2,40(r2)
  281cdc:	10800037 	ldwio	r2,0(r2)
  281ce0:	e0bffd15 	stw	r2,-12(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
  281ce4:	e13ffd17 	ldw	r4,-12(fp)
  281ce8:	028182c0 	call	28182c <read_num_bytes_available>
  281cec:	e0bffe0d 	sth	r2,-8(fp)
	} while (num > 0);
  281cf0:	e0bffe0b 	ldhu	r2,-8(fp)
  281cf4:	1004c03a 	cmpne	r2,r2,zero
  281cf8:	103ff61e 	bne	r2,zero,281cd4 <alt_up_ps2_clear_fifo+0x1c>
}
  281cfc:	e037883a 	mov	sp,fp
  281d00:	dfc00117 	ldw	ra,4(sp)
  281d04:	df000017 	ldw	fp,0(sp)
  281d08:	dec00204 	addi	sp,sp,8
  281d0c:	f800283a 	ret

00281d10 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
  281d10:	defff704 	addi	sp,sp,-36
  281d14:	dfc00815 	stw	ra,32(sp)
  281d18:	df000715 	stw	fp,28(sp)
  281d1c:	df000704 	addi	fp,sp,28
  281d20:	e13ffc15 	stw	r4,-16(fp)
  281d24:	e17ffd15 	stw	r5,-12(fp)
  281d28:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  281d2c:	e0bffc17 	ldw	r2,-16(fp)
  281d30:	10800017 	ldw	r2,0(r2)
  281d34:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  281d38:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  281d3c:	e03ff915 	stw	zero,-28(fp)
	while (count < len);
  281d40:	e0fff917 	ldw	r3,-28(fp)
  281d44:	e0bffe17 	ldw	r2,-8(fp)
  281d48:	18bffd16 	blt	r3,r2,281d40 <alt_up_ps2_read_fd+0x30>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, ptr++);
  281d4c:	e17ffd17 	ldw	r5,-12(fp)
  281d50:	e0bffd17 	ldw	r2,-12(fp)
  281d54:	10800044 	addi	r2,r2,1
  281d58:	e0bffd15 	stw	r2,-12(fp)
  281d5c:	e13ffb17 	ldw	r4,-20(fp)
  281d60:	0281b8c0 	call	281b8c <alt_up_ps2_read_data_byte_timeout>
  281d64:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  281d68:	e0bffa17 	ldw	r2,-24(fp)
  281d6c:	1005003a 	cmpeq	r2,r2,zero
  281d70:	1000031e 	bne	r2,zero,281d80 <alt_up_ps2_read_fd+0x70>
			return count;
  281d74:	e0bff917 	ldw	r2,-28(fp)
  281d78:	e0bfff15 	stw	r2,-4(fp)
  281d7c:	00000506 	br	281d94 <alt_up_ps2_read_fd+0x84>
		count++;
  281d80:	e0bff917 	ldw	r2,-28(fp)
  281d84:	10800044 	addi	r2,r2,1
  281d88:	e0bff915 	stw	r2,-28(fp)
	} 
	return count;
  281d8c:	e0bff917 	ldw	r2,-28(fp)
  281d90:	e0bfff15 	stw	r2,-4(fp)
  281d94:	e0bfff17 	ldw	r2,-4(fp)
}
  281d98:	e037883a 	mov	sp,fp
  281d9c:	dfc00117 	ldw	ra,4(sp)
  281da0:	df000017 	ldw	fp,0(sp)
  281da4:	dec00204 	addi	sp,sp,8
  281da8:	f800283a 	ret

00281dac <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
  281dac:	defff704 	addi	sp,sp,-36
  281db0:	dfc00815 	stw	ra,32(sp)
  281db4:	df000715 	stw	fp,28(sp)
  281db8:	df000704 	addi	fp,sp,28
  281dbc:	e13ffc15 	stw	r4,-16(fp)
  281dc0:	e17ffd15 	stw	r5,-12(fp)
  281dc4:	e1bffe15 	stw	r6,-8(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
  281dc8:	e0bffc17 	ldw	r2,-16(fp)
  281dcc:	10800017 	ldw	r2,0(r2)
  281dd0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
  281dd4:	e03ffa15 	stw	zero,-24(fp)
	int count = 0;
  281dd8:	e03ff915 	stw	zero,-28(fp)
	while (count < len)
  281ddc:	00001206 	br	281e28 <alt_up_ps2_write_fd+0x7c>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
  281de0:	e0bffd17 	ldw	r2,-12(fp)
  281de4:	10800003 	ldbu	r2,0(r2)
  281de8:	11403fcc 	andi	r5,r2,255
  281dec:	e0bffd17 	ldw	r2,-12(fp)
  281df0:	10800044 	addi	r2,r2,1
  281df4:	e0bffd15 	stw	r2,-12(fp)
  281df8:	e13ffb17 	ldw	r4,-20(fp)
  281dfc:	0281a380 	call	281a38 <alt_up_ps2_write_data_byte>
  281e00:	e0bffa15 	stw	r2,-24(fp)
		if (status!=0)
  281e04:	e0bffa17 	ldw	r2,-24(fp)
  281e08:	1005003a 	cmpeq	r2,r2,zero
  281e0c:	1000031e 	bne	r2,zero,281e1c <alt_up_ps2_write_fd+0x70>
			return count;
  281e10:	e0bff917 	ldw	r2,-28(fp)
  281e14:	e0bfff15 	stw	r2,-4(fp)
  281e18:	00000806 	br	281e3c <alt_up_ps2_write_fd+0x90>
		count++;
  281e1c:	e0bff917 	ldw	r2,-28(fp)
  281e20:	10800044 	addi	r2,r2,1
  281e24:	e0bff915 	stw	r2,-28(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
  281e28:	e0fff917 	ldw	r3,-28(fp)
  281e2c:	e0bffe17 	ldw	r2,-8(fp)
  281e30:	18bfeb16 	blt	r3,r2,281de0 <alt_up_ps2_write_fd+0x34>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
  281e34:	e0bff917 	ldw	r2,-28(fp)
  281e38:	e0bfff15 	stw	r2,-4(fp)
  281e3c:	e0bfff17 	ldw	r2,-4(fp)
}
  281e40:	e037883a 	mov	sp,fp
  281e44:	dfc00117 	ldw	ra,4(sp)
  281e48:	df000017 	ldw	fp,0(sp)
  281e4c:	dec00204 	addi	sp,sp,8
  281e50:	f800283a 	ret

00281e54 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
  281e54:	defffc04 	addi	sp,sp,-16
  281e58:	dfc00315 	stw	ra,12(sp)
  281e5c:	df000215 	stw	fp,8(sp)
  281e60:	df000204 	addi	fp,sp,8
  281e64:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
  281e68:	e13fff17 	ldw	r4,-4(fp)
  281e6c:	01400a74 	movhi	r5,41
  281e70:	2971db04 	addi	r5,r5,-14484
  281e74:	0283bd80 	call	283bd8 <alt_find_dev>
  281e78:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  281e7c:	e0bffe17 	ldw	r2,-8(fp)
}
  281e80:	e037883a 	mov	sp,fp
  281e84:	dfc00117 	ldw	ra,4(sp)
  281e88:	df000017 	ldw	fp,0(sp)
  281e8c:	dec00204 	addi	sp,sp,8
  281e90:	f800283a 	ret

00281e94 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
  281e94:	defffc04 	addi	sp,sp,-16
  281e98:	dfc00315 	stw	ra,12(sp)
  281e9c:	df000215 	stw	fp,8(sp)
  281ea0:	df000204 	addi	fp,sp,8
  281ea4:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
  281ea8:	e0bfff17 	ldw	r2,-4(fp)
  281eac:	10800217 	ldw	r2,8(r2)
  281eb0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
  281eb4:	00000c06 	br	281ee8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
  281eb8:	e13ffe17 	ldw	r4,-8(fp)
  281ebc:	01400a74 	movhi	r5,41
  281ec0:	296af204 	addi	r5,r5,-21560
  281ec4:	02849940 	call	284994 <strcmp>
  281ec8:	1004c03a 	cmpne	r2,r2,zero
  281ecc:	1000031e 	bne	r2,zero,281edc <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
  281ed0:	e0bffe17 	ldw	r2,-8(fp)
  281ed4:	10000005 	stb	zero,0(r2)
			break;
  281ed8:	00000a06 	br	281f04 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
  281edc:	e0bffe17 	ldw	r2,-8(fp)
  281ee0:	10800044 	addi	r2,r2,1
  281ee4:	e0bffe15 	stw	r2,-8(fp)
  281ee8:	e0bffe17 	ldw	r2,-8(fp)
  281eec:	10800003 	ldbu	r2,0(r2)
  281ef0:	10803fcc 	andi	r2,r2,255
  281ef4:	1080201c 	xori	r2,r2,128
  281ef8:	10bfe004 	addi	r2,r2,-128
  281efc:	1004c03a 	cmpne	r2,r2,zero
  281f00:	103fed1e 	bne	r2,zero,281eb8 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
  281f04:	e037883a 	mov	sp,fp
  281f08:	dfc00117 	ldw	ra,4(sp)
  281f0c:	df000017 	ldw	fp,0(sp)
  281f10:	dec00204 	addi	sp,sp,8
  281f14:	f800283a 	ret

00281f18 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  281f18:	defffc04 	addi	sp,sp,-16
  281f1c:	dfc00315 	stw	ra,12(sp)
  281f20:	df000215 	stw	fp,8(sp)
  281f24:	df000204 	addi	fp,sp,8
  281f28:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
  281f2c:	e13fff17 	ldw	r4,-4(fp)
  281f30:	01400a74 	movhi	r5,41
  281f34:	2971db04 	addi	r5,r5,-14484
  281f38:	0283bd80 	call	283bd8 <alt_find_dev>
  281f3c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  281f40:	e0bffe17 	ldw	r2,-8(fp)
}
  281f44:	e037883a 	mov	sp,fp
  281f48:	dfc00117 	ldw	ra,4(sp)
  281f4c:	df000017 	ldw	fp,0(sp)
  281f50:	dec00204 	addi	sp,sp,8
  281f54:	f800283a 	ret

00281f58 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
  281f58:	defff904 	addi	sp,sp,-28
  281f5c:	df000615 	stw	fp,24(sp)
  281f60:	df000604 	addi	fp,sp,24
  281f64:	e13ffb15 	stw	r4,-20(fp)
  281f68:	e1bffd15 	stw	r6,-12(fp)
  281f6c:	e1fffe15 	stw	r7,-8(fp)
  281f70:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  281f74:	e0bffb17 	ldw	r2,-20(fp)
  281f78:	10c00c17 	ldw	r3,48(r2)
  281f7c:	e0bffd17 	ldw	r2,-12(fp)
  281f80:	10c0042e 	bgeu	r2,r3,281f94 <alt_up_char_buffer_draw+0x3c>
  281f84:	e0bffb17 	ldw	r2,-20(fp)
  281f88:	10c00d17 	ldw	r3,52(r2)
  281f8c:	e0bffe17 	ldw	r2,-8(fp)
  281f90:	10c00336 	bltu	r2,r3,281fa0 <alt_up_char_buffer_draw+0x48>
		return -1;
  281f94:	00bfffc4 	movi	r2,-1
  281f98:	e0bfff15 	stw	r2,-4(fp)
  281f9c:	00001d06 	br	282014 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
  281fa0:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
  281fa4:	e0bffb17 	ldw	r2,-20(fp)
  281fa8:	10c00f17 	ldw	r3,60(r2)
  281fac:	e0bffd17 	ldw	r2,-12(fp)
  281fb0:	1886703a 	and	r3,r3,r2
  281fb4:	e0bffb17 	ldw	r2,-20(fp)
  281fb8:	10800e17 	ldw	r2,56(r2)
  281fbc:	1886983a 	sll	r3,r3,r2
  281fc0:	e0bffa17 	ldw	r2,-24(fp)
  281fc4:	10c4b03a 	or	r2,r2,r3
  281fc8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
  281fcc:	e0bffb17 	ldw	r2,-20(fp)
  281fd0:	10c01117 	ldw	r3,68(r2)
  281fd4:	e0bffe17 	ldw	r2,-8(fp)
  281fd8:	1886703a 	and	r3,r3,r2
  281fdc:	e0bffb17 	ldw	r2,-20(fp)
  281fe0:	10801017 	ldw	r2,64(r2)
  281fe4:	1886983a 	sll	r3,r3,r2
  281fe8:	e0bffa17 	ldw	r2,-24(fp)
  281fec:	10c4b03a 	or	r2,r2,r3
  281ff0:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
  281ff4:	e0bffb17 	ldw	r2,-20(fp)
  281ff8:	10800b17 	ldw	r2,44(r2)
  281ffc:	1007883a 	mov	r3,r2
  282000:	e0bffa17 	ldw	r2,-24(fp)
  282004:	1885883a 	add	r2,r3,r2
  282008:	e0fffc03 	ldbu	r3,-16(fp)
  28200c:	10c00025 	stbio	r3,0(r2)

	return 0;
  282010:	e03fff15 	stw	zero,-4(fp)
  282014:	e0bfff17 	ldw	r2,-4(fp)
}
  282018:	e037883a 	mov	sp,fp
  28201c:	df000017 	ldw	fp,0(sp)
  282020:	dec00104 	addi	sp,sp,4
  282024:	f800283a 	ret

00282028 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
  282028:	defff904 	addi	sp,sp,-28
  28202c:	df000615 	stw	fp,24(sp)
  282030:	df000604 	addi	fp,sp,24
  282034:	e13ffb15 	stw	r4,-20(fp)
  282038:	e17ffc15 	stw	r5,-16(fp)
  28203c:	e1bffd15 	stw	r6,-12(fp)
  282040:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
  282044:	e0bffb17 	ldw	r2,-20(fp)
  282048:	10c00c17 	ldw	r3,48(r2)
  28204c:	e0bffd17 	ldw	r2,-12(fp)
  282050:	10c0042e 	bgeu	r2,r3,282064 <alt_up_char_buffer_string+0x3c>
  282054:	e0bffb17 	ldw	r2,-20(fp)
  282058:	10c00d17 	ldw	r3,52(r2)
  28205c:	e0bffe17 	ldw	r2,-8(fp)
  282060:	10c00336 	bltu	r2,r3,282070 <alt_up_char_buffer_string+0x48>
		return -1;
  282064:	00bfffc4 	movi	r2,-1
  282068:	e0bfff15 	stw	r2,-4(fp)
  28206c:	00002e06 	br	282128 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
  282070:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
  282074:	e0bffb17 	ldw	r2,-20(fp)
  282078:	10801017 	ldw	r2,64(r2)
  28207c:	1007883a 	mov	r3,r2
  282080:	e0bffe17 	ldw	r2,-8(fp)
  282084:	10c6983a 	sll	r3,r2,r3
  282088:	e0bffd17 	ldw	r2,-12(fp)
  28208c:	1885883a 	add	r2,r3,r2
  282090:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
  282094:	00001c06 	br	282108 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
  282098:	e0bffb17 	ldw	r2,-20(fp)
  28209c:	10800b17 	ldw	r2,44(r2)
  2820a0:	1007883a 	mov	r3,r2
  2820a4:	e0bffa17 	ldw	r2,-24(fp)
  2820a8:	1889883a 	add	r4,r3,r2
  2820ac:	e0bffc17 	ldw	r2,-16(fp)
  2820b0:	10800003 	ldbu	r2,0(r2)
  2820b4:	10c03fcc 	andi	r3,r2,255
  2820b8:	18c0201c 	xori	r3,r3,128
  2820bc:	18ffe004 	addi	r3,r3,-128
  2820c0:	2005883a 	mov	r2,r4
  2820c4:	10c00025 	stbio	r3,0(r2)
		++ptr;
  2820c8:	e0bffc17 	ldw	r2,-16(fp)
  2820cc:	10800044 	addi	r2,r2,1
  2820d0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
  2820d4:	e0bffd17 	ldw	r2,-12(fp)
  2820d8:	10800044 	addi	r2,r2,1
  2820dc:	e0bffd15 	stw	r2,-12(fp)
  2820e0:	e0bffb17 	ldw	r2,-20(fp)
  2820e4:	10c00c17 	ldw	r3,48(r2)
  2820e8:	e0bffd17 	ldw	r2,-12(fp)
  2820ec:	10c00336 	bltu	r2,r3,2820fc <alt_up_char_buffer_string+0xd4>
			return -1;
  2820f0:	00bfffc4 	movi	r2,-1
  2820f4:	e0bfff15 	stw	r2,-4(fp)
  2820f8:	00000b06 	br	282128 <alt_up_char_buffer_string+0x100>
		++offset;
  2820fc:	e0bffa17 	ldw	r2,-24(fp)
  282100:	10800044 	addi	r2,r2,1
  282104:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
  282108:	e0bffc17 	ldw	r2,-16(fp)
  28210c:	10800003 	ldbu	r2,0(r2)
  282110:	10803fcc 	andi	r2,r2,255
  282114:	1080201c 	xori	r2,r2,128
  282118:	10bfe004 	addi	r2,r2,-128
  28211c:	1004c03a 	cmpne	r2,r2,zero
  282120:	103fdd1e 	bne	r2,zero,282098 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
  282124:	e03fff15 	stw	zero,-4(fp)
  282128:	e0bfff17 	ldw	r2,-4(fp)
}
  28212c:	e037883a 	mov	sp,fp
  282130:	df000017 	ldw	fp,0(sp)
  282134:	dec00104 	addi	sp,sp,4
  282138:	f800283a 	ret

0028213c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
  28213c:	defffe04 	addi	sp,sp,-8
  282140:	df000115 	stw	fp,4(sp)
  282144:	df000104 	addi	fp,sp,4
  282148:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
  28214c:	e0bfff17 	ldw	r2,-4(fp)
  282150:	10800a17 	ldw	r2,40(r2)
  282154:	10800084 	addi	r2,r2,2
  282158:	1007883a 	mov	r3,r2
  28215c:	00800044 	movi	r2,1
  282160:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
  282164:	e0bfff17 	ldw	r2,-4(fp)
  282168:	10800a17 	ldw	r2,40(r2)
  28216c:	10800084 	addi	r2,r2,2
  282170:	10800023 	ldbuio	r2,0(r2)
  282174:	1080004c 	andi	r2,r2,1
  282178:	10803fcc 	andi	r2,r2,255
  28217c:	1004c03a 	cmpne	r2,r2,zero
  282180:	103ff81e 	bne	r2,zero,282164 <alt_up_char_buffer_clear+0x28>
	return 0;
  282184:	0005883a 	mov	r2,zero
}
  282188:	e037883a 	mov	sp,fp
  28218c:	df000017 	ldw	fp,0(sp)
  282190:	dec00104 	addi	sp,sp,4
  282194:	f800283a 	ret

00282198 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  282198:	defffc04 	addi	sp,sp,-16
  28219c:	dfc00315 	stw	ra,12(sp)
  2821a0:	df000215 	stw	fp,8(sp)
  2821a4:	df000204 	addi	fp,sp,8
  2821a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
  2821ac:	e13fff17 	ldw	r4,-4(fp)
  2821b0:	01400a74 	movhi	r5,41
  2821b4:	2971db04 	addi	r5,r5,-14484
  2821b8:	0283bd80 	call	283bd8 <alt_find_dev>
  2821bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  2821c0:	e0bffe17 	ldw	r2,-8(fp)
}
  2821c4:	e037883a 	mov	sp,fp
  2821c8:	dfc00117 	ldw	ra,4(sp)
  2821cc:	df000017 	ldw	fp,0(sp)
  2821d0:	dec00204 	addi	sp,sp,8
  2821d4:	f800283a 	ret

002821d8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
  2821d8:	defff904 	addi	sp,sp,-28
  2821dc:	df000615 	stw	fp,24(sp)
  2821e0:	df000604 	addi	fp,sp,24
  2821e4:	e13ffb15 	stw	r4,-20(fp)
  2821e8:	e17ffc15 	stw	r5,-16(fp)
  2821ec:	e1bffd15 	stw	r6,-12(fp)
  2821f0:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
  2821f4:	e0bffb17 	ldw	r2,-20(fp)
  2821f8:	10c00f17 	ldw	r3,60(r2)
  2821fc:	e0bffd17 	ldw	r2,-12(fp)
  282200:	10c0042e 	bgeu	r2,r3,282214 <alt_up_pixel_buffer_dma_draw+0x3c>
  282204:	e0bffb17 	ldw	r2,-20(fp)
  282208:	10c01017 	ldw	r3,64(r2)
  28220c:	e0bffe17 	ldw	r2,-8(fp)
  282210:	10c00336 	bltu	r2,r3,282220 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
  282214:	00bfffc4 	movi	r2,-1
  282218:	e0bfff15 	stw	r2,-4(fp)
  28221c:	00005106 	br	282364 <alt_up_pixel_buffer_dma_draw+0x18c>

	unsigned int addr = 0;
  282220:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  282224:	e0bffb17 	ldw	r2,-20(fp)
  282228:	10800d17 	ldw	r2,52(r2)
  28222c:	1004c03a 	cmpne	r2,r2,zero
  282230:	1000151e 	bne	r2,zero,282288 <alt_up_pixel_buffer_dma_draw+0xb0>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  282234:	e0bffb17 	ldw	r2,-20(fp)
  282238:	10c01217 	ldw	r3,72(r2)
  28223c:	e0bffd17 	ldw	r2,-12(fp)
  282240:	1886703a 	and	r3,r3,r2
  282244:	e0bffb17 	ldw	r2,-20(fp)
  282248:	10801117 	ldw	r2,68(r2)
  28224c:	1886983a 	sll	r3,r3,r2
  282250:	e0bffa17 	ldw	r2,-24(fp)
  282254:	10c4b03a 	or	r2,r2,r3
  282258:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
  28225c:	e0bffb17 	ldw	r2,-20(fp)
  282260:	10c01417 	ldw	r3,80(r2)
  282264:	e0bffe17 	ldw	r2,-8(fp)
  282268:	1886703a 	and	r3,r3,r2
  28226c:	e0bffb17 	ldw	r2,-20(fp)
  282270:	10801317 	ldw	r2,76(r2)
  282274:	1886983a 	sll	r3,r3,r2
  282278:	e0bffa17 	ldw	r2,-24(fp)
  28227c:	10c4b03a 	or	r2,r2,r3
  282280:	e0bffa15 	stw	r2,-24(fp)
  282284:	00001706 	br	2822e4 <alt_up_pixel_buffer_dma_draw+0x10c>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
  282288:	e0bffb17 	ldw	r2,-20(fp)
  28228c:	10c01217 	ldw	r3,72(r2)
  282290:	e0bffd17 	ldw	r2,-12(fp)
  282294:	1886703a 	and	r3,r3,r2
  282298:	e0bffb17 	ldw	r2,-20(fp)
  28229c:	10801117 	ldw	r2,68(r2)
  2822a0:	1886983a 	sll	r3,r3,r2
  2822a4:	e0bffa17 	ldw	r2,-24(fp)
  2822a8:	10c5883a 	add	r2,r2,r3
  2822ac:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
  2822b0:	e0bffb17 	ldw	r2,-20(fp)
  2822b4:	10c01417 	ldw	r3,80(r2)
  2822b8:	e0bffe17 	ldw	r2,-8(fp)
  2822bc:	1886703a 	and	r3,r3,r2
  2822c0:	e0bffb17 	ldw	r2,-20(fp)
  2822c4:	10800f17 	ldw	r2,60(r2)
  2822c8:	1887383a 	mul	r3,r3,r2
  2822cc:	e0bffb17 	ldw	r2,-20(fp)
  2822d0:	10801117 	ldw	r2,68(r2)
  2822d4:	1886983a 	sll	r3,r3,r2
  2822d8:	e0bffa17 	ldw	r2,-24(fp)
  2822dc:	10c5883a 	add	r2,r2,r3
  2822e0:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  2822e4:	e0bffb17 	ldw	r2,-20(fp)
  2822e8:	10800e17 	ldw	r2,56(r2)
  2822ec:	10800058 	cmpnei	r2,r2,1
  2822f0:	1000081e 	bne	r2,zero,282314 <alt_up_pixel_buffer_dma_draw+0x13c>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  2822f4:	e0bffb17 	ldw	r2,-20(fp)
  2822f8:	10800c17 	ldw	r2,48(r2)
  2822fc:	1007883a 	mov	r3,r2
  282300:	e0bffa17 	ldw	r2,-24(fp)
  282304:	1885883a 	add	r2,r3,r2
  282308:	e0fffc17 	ldw	r3,-16(fp)
  28230c:	10c00025 	stbio	r3,0(r2)
  282310:	00001306 	br	282360 <alt_up_pixel_buffer_dma_draw+0x188>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  282314:	e0bffb17 	ldw	r2,-20(fp)
  282318:	10800e17 	ldw	r2,56(r2)
  28231c:	10800098 	cmpnei	r2,r2,2
  282320:	1000081e 	bne	r2,zero,282344 <alt_up_pixel_buffer_dma_draw+0x16c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  282324:	e0bffb17 	ldw	r2,-20(fp)
  282328:	10800c17 	ldw	r2,48(r2)
  28232c:	1007883a 	mov	r3,r2
  282330:	e0bffa17 	ldw	r2,-24(fp)
  282334:	1885883a 	add	r2,r3,r2
  282338:	e0fffc17 	ldw	r3,-16(fp)
  28233c:	10c0002d 	sthio	r3,0(r2)
  282340:	00000706 	br	282360 <alt_up_pixel_buffer_dma_draw+0x188>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
  282344:	e0bffb17 	ldw	r2,-20(fp)
  282348:	10800c17 	ldw	r2,48(r2)
  28234c:	1007883a 	mov	r3,r2
  282350:	e0bffa17 	ldw	r2,-24(fp)
  282354:	1885883a 	add	r2,r3,r2
  282358:	e0fffc17 	ldw	r3,-16(fp)
  28235c:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
  282360:	e03fff15 	stw	zero,-4(fp)
  282364:	e0bfff17 	ldw	r2,-4(fp)
}
  282368:	e037883a 	mov	sp,fp
  28236c:	df000017 	ldw	fp,0(sp)
  282370:	dec00104 	addi	sp,sp,4
  282374:	f800283a 	ret

00282378 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
  282378:	defffd04 	addi	sp,sp,-12
  28237c:	df000215 	stw	fp,8(sp)
  282380:	df000204 	addi	fp,sp,8
  282384:	e13ffe15 	stw	r4,-8(fp)
  282388:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
  28238c:	e0bffe17 	ldw	r2,-8(fp)
  282390:	10800a17 	ldw	r2,40(r2)
  282394:	10800104 	addi	r2,r2,4
  282398:	e0ffff17 	ldw	r3,-4(fp)
  28239c:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
  2823a0:	e0bffe17 	ldw	r2,-8(fp)
  2823a4:	10800a17 	ldw	r2,40(r2)
  2823a8:	10800104 	addi	r2,r2,4
  2823ac:	10800037 	ldwio	r2,0(r2)
  2823b0:	1007883a 	mov	r3,r2
  2823b4:	e0bffe17 	ldw	r2,-8(fp)
  2823b8:	10c00c15 	stw	r3,48(r2)
	return 0;
  2823bc:	0005883a 	mov	r2,zero
}
  2823c0:	e037883a 	mov	sp,fp
  2823c4:	df000017 	ldw	fp,0(sp)
  2823c8:	dec00104 	addi	sp,sp,4
  2823cc:	f800283a 	ret

002823d0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
  2823d0:	defffe04 	addi	sp,sp,-8
  2823d4:	df000115 	stw	fp,4(sp)
  2823d8:	df000104 	addi	fp,sp,4
  2823dc:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
  2823e0:	e0bfff17 	ldw	r2,-4(fp)
  2823e4:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
  2823e8:	e0bfff17 	ldw	r2,-4(fp)
  2823ec:	10800a17 	ldw	r2,40(r2)
  2823f0:	1007883a 	mov	r3,r2
  2823f4:	00800044 	movi	r2,1
  2823f8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
  2823fc:	e0bfff17 	ldw	r2,-4(fp)
  282400:	10c00b17 	ldw	r3,44(r2)
  282404:	e0bfff17 	ldw	r2,-4(fp)
  282408:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
  28240c:	e0bfff17 	ldw	r2,-4(fp)
  282410:	11000b15 	stw	r4,44(r2)
	return 0;
  282414:	0005883a 	mov	r2,zero
}
  282418:	e037883a 	mov	sp,fp
  28241c:	df000017 	ldw	fp,0(sp)
  282420:	dec00104 	addi	sp,sp,4
  282424:	f800283a 	ret

00282428 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
  282428:	defffe04 	addi	sp,sp,-8
  28242c:	df000115 	stw	fp,4(sp)
  282430:	df000104 	addi	fp,sp,4
  282434:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
  282438:	e0bfff17 	ldw	r2,-4(fp)
  28243c:	10800a17 	ldw	r2,40(r2)
  282440:	10800304 	addi	r2,r2,12
  282444:	10800037 	ldwio	r2,0(r2)
  282448:	1080004c 	andi	r2,r2,1
}
  28244c:	e037883a 	mov	sp,fp
  282450:	df000017 	ldw	fp,0(sp)
  282454:	dec00104 	addi	sp,sp,4
  282458:	f800283a 	ret

0028245c <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
  28245c:	defff604 	addi	sp,sp,-40
  282460:	df000915 	stw	fp,36(sp)
  282464:	df000904 	addi	fp,sp,36
  282468:	e13ff715 	stw	r4,-36(fp)
  28246c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  282470:	e0bff817 	ldw	r2,-32(fp)
  282474:	10800058 	cmpnei	r2,r2,1
  282478:	1000041e 	bne	r2,zero,28248c <alt_up_pixel_buffer_dma_clear_screen+0x30>
		addr = pixel_buffer->back_buffer_start_address;
  28247c:	e0bff717 	ldw	r2,-36(fp)
  282480:	10800c17 	ldw	r2,48(r2)
  282484:	e0bfff15 	stw	r2,-4(fp)
  282488:	00000306 	br	282498 <alt_up_pixel_buffer_dma_clear_screen+0x3c>
	else
		addr = pixel_buffer->buffer_start_address;
  28248c:	e0bff717 	ldw	r2,-36(fp)
  282490:	10800b17 	ldw	r2,44(r2)
  282494:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
  282498:	e0bff717 	ldw	r2,-36(fp)
  28249c:	10800f17 	ldw	r2,60(r2)
  2824a0:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  2824a4:	e0bff717 	ldw	r2,-36(fp)
  2824a8:	10800e17 	ldw	r2,56(r2)
  2824ac:	10800098 	cmpnei	r2,r2,2
  2824b0:	1000051e 	bne	r2,zero,2824c8 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
		limit_x = limit_x << 1;
  2824b4:	e0fffe17 	ldw	r3,-8(fp)
  2824b8:	e0fffe17 	ldw	r3,-8(fp)
  2824bc:	18c5883a 	add	r2,r3,r3
  2824c0:	e0bffe15 	stw	r2,-8(fp)
  2824c4:	00000506 	br	2824dc <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
  2824c8:	e13ffe17 	ldw	r4,-8(fp)
  2824cc:	e13ffe17 	ldw	r4,-8(fp)
  2824d0:	2105883a 	add	r2,r4,r4
  2824d4:	1085883a 	add	r2,r2,r2
  2824d8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
  2824dc:	e0bff717 	ldw	r2,-36(fp)
  2824e0:	10801017 	ldw	r2,64(r2)
  2824e4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  2824e8:	e0bff717 	ldw	r2,-36(fp)
  2824ec:	10800d17 	ldw	r2,52(r2)
  2824f0:	1004c03a 	cmpne	r2,r2,zero
  2824f4:	10001e1e 	bne	r2,zero,282570 <alt_up_pixel_buffer_dma_clear_screen+0x114>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  2824f8:	e0bff717 	ldw	r2,-36(fp)
  2824fc:	10801317 	ldw	r2,76(r2)
  282500:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
  282504:	e03ffb15 	stw	zero,-20(fp)
  282508:	00001506 	br	282560 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			for (x = 0; x < limit_x; x = x + 4)
  28250c:	e03ffc15 	stw	zero,-16(fp)
  282510:	00000706 	br	282530 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
			{
				IOWR_32DIRECT(addr, x, 0);
  282514:	e0ffff17 	ldw	r3,-4(fp)
  282518:	e0bffc17 	ldw	r2,-16(fp)
  28251c:	1885883a 	add	r2,r3,r2
  282520:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
  282524:	e0bffc17 	ldw	r2,-16(fp)
  282528:	10800104 	addi	r2,r2,4
  28252c:	e0bffc15 	stw	r2,-16(fp)
  282530:	e0fffc17 	ldw	r3,-16(fp)
  282534:	e13ffe17 	ldw	r4,-8(fp)
  282538:	193ff636 	bltu	r3,r4,282514 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
  28253c:	e0fffa17 	ldw	r3,-24(fp)
  282540:	00800044 	movi	r2,1
  282544:	10c4983a 	sll	r2,r2,r3
  282548:	e0ffff17 	ldw	r3,-4(fp)
  28254c:	1887883a 	add	r3,r3,r2
  282550:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
  282554:	e13ffb17 	ldw	r4,-20(fp)
  282558:	21000044 	addi	r4,r4,1
  28255c:	e13ffb15 	stw	r4,-20(fp)
  282560:	e0bffb17 	ldw	r2,-20(fp)
  282564:	e0fffd17 	ldw	r3,-12(fp)
  282568:	10ffe836 	bltu	r2,r3,28250c <alt_up_pixel_buffer_dma_clear_screen+0xb0>
  28256c:	00001006 	br	2825b0 <alt_up_pixel_buffer_dma_clear_screen+0x154>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
  282570:	e13ffd17 	ldw	r4,-12(fp)
  282574:	e0bffe17 	ldw	r2,-8(fp)
  282578:	2089383a 	mul	r4,r4,r2
  28257c:	e13ffd15 	stw	r4,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
  282580:	e03ff915 	stw	zero,-28(fp)
  282584:	00000706 	br	2825a4 <alt_up_pixel_buffer_dma_clear_screen+0x148>
		{
			IOWR_32DIRECT(addr, x, 0);
  282588:	e0ffff17 	ldw	r3,-4(fp)
  28258c:	e0bff917 	ldw	r2,-28(fp)
  282590:	1885883a 	add	r2,r3,r2
  282594:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
  282598:	e0fff917 	ldw	r3,-28(fp)
  28259c:	18c00104 	addi	r3,r3,4
  2825a0:	e0fff915 	stw	r3,-28(fp)
  2825a4:	e0bff917 	ldw	r2,-28(fp)
  2825a8:	e13ffd17 	ldw	r4,-12(fp)
  2825ac:	113ff636 	bltu	r2,r4,282588 <alt_up_pixel_buffer_dma_clear_screen+0x12c>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
  2825b0:	e037883a 	mov	sp,fp
  2825b4:	df000017 	ldw	fp,0(sp)
  2825b8:	dec00104 	addi	sp,sp,4
  2825bc:	f800283a 	ret

002825c0 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
  2825c0:	deffed04 	addi	sp,sp,-76
  2825c4:	df001215 	stw	fp,72(sp)
  2825c8:	df001204 	addi	fp,sp,72
  2825cc:	e13fee15 	stw	r4,-72(fp)
  2825d0:	e17fef15 	stw	r5,-68(fp)
  2825d4:	e1bff015 	stw	r6,-64(fp)
  2825d8:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  2825dc:	e0bfee17 	ldw	r2,-72(fp)
  2825e0:	10800f17 	ldw	r2,60(r2)
  2825e4:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  2825e8:	e0bfee17 	ldw	r2,-72(fp)
  2825ec:	10801017 	ldw	r2,64(r2)
  2825f0:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  2825f4:	e0bfef17 	ldw	r2,-68(fp)
  2825f8:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
  2825fc:	e0fff117 	ldw	r3,-60(fp)
  282600:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
  282604:	e13ff017 	ldw	r4,-64(fp)
  282608:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
  28260c:	e0800117 	ldw	r2,4(fp)
  282610:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
  282614:	e0c00217 	ldw	r3,8(fp)
  282618:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  28261c:	e13ffa17 	ldw	r4,-24(fp)
  282620:	e0bffb17 	ldw	r2,-20(fp)
  282624:	2080062e 	bgeu	r4,r2,282640 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = l_x;
  282628:	e0fffb17 	ldw	r3,-20(fp)
  28262c:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
  282630:	e13ffa17 	ldw	r4,-24(fp)
  282634:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
  282638:	e0bffc17 	ldw	r2,-16(fp)
  28263c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
  282640:	e0fff817 	ldw	r3,-32(fp)
  282644:	e13ff917 	ldw	r4,-28(fp)
  282648:	1900062e 	bgeu	r3,r4,282664 <alt_up_pixel_buffer_dma_draw_box+0xa4>
	{
		temp = t_y;
  28264c:	e0bff917 	ldw	r2,-28(fp)
  282650:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
  282654:	e0fff817 	ldw	r3,-32(fp)
  282658:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
  28265c:	e13ffc17 	ldw	r4,-16(fp)
  282660:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
  282664:	e0bffb17 	ldw	r2,-20(fp)
  282668:	e0fffe17 	ldw	r3,-8(fp)
  28266c:	10c10d2e 	bgeu	r2,r3,282aa4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
  282670:	e13ff917 	ldw	r4,-28(fp)
  282674:	e0bffd17 	ldw	r2,-12(fp)
  282678:	20800136 	bltu	r4,r2,282680 <alt_up_pixel_buffer_dma_draw_box+0xc0>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  28267c:	00010906 	br	282aa4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  282680:	e0fffa17 	ldw	r3,-24(fp)
  282684:	e13ffe17 	ldw	r4,-8(fp)
  282688:	19000336 	bltu	r3,r4,282698 <alt_up_pixel_buffer_dma_draw_box+0xd8>
	{
		r_x = limit_x - 1;
  28268c:	e0bffe17 	ldw	r2,-8(fp)
  282690:	10bfffc4 	addi	r2,r2,-1
  282694:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  282698:	e0fff817 	ldw	r3,-32(fp)
  28269c:	e13ffd17 	ldw	r4,-12(fp)
  2826a0:	19000336 	bltu	r3,r4,2826b0 <alt_up_pixel_buffer_dma_draw_box+0xf0>
	{
		b_y = limit_y - 1;
  2826a4:	e0bffd17 	ldw	r2,-12(fp)
  2826a8:	10bfffc4 	addi	r2,r2,-1
  2826ac:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  2826b0:	e0800317 	ldw	r2,12(fp)
  2826b4:	10800058 	cmpnei	r2,r2,1
  2826b8:	1000041e 	bne	r2,zero,2826cc <alt_up_pixel_buffer_dma_draw_box+0x10c>
		addr = pixel_buffer->back_buffer_start_address;
  2826bc:	e0bfee17 	ldw	r2,-72(fp)
  2826c0:	10800c17 	ldw	r2,48(r2)
  2826c4:	e0bfff15 	stw	r2,-4(fp)
  2826c8:	00000306 	br	2826d8 <alt_up_pixel_buffer_dma_draw_box+0x118>
	else
		addr = pixel_buffer->buffer_start_address;
  2826cc:	e0bfee17 	ldw	r2,-72(fp)
  2826d0:	10800b17 	ldw	r2,44(r2)
  2826d4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  2826d8:	e0bfee17 	ldw	r2,-72(fp)
  2826dc:	10800d17 	ldw	r2,52(r2)
  2826e0:	1004c03a 	cmpne	r2,r2,zero
  2826e4:	1000721e 	bne	r2,zero,2828b0 <alt_up_pixel_buffer_dma_draw_box+0x2f0>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  2826e8:	e0bfee17 	ldw	r2,-72(fp)
  2826ec:	10801317 	ldw	r2,76(r2)
  2826f0:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
  2826f4:	e0bff417 	ldw	r2,-48(fp)
  2826f8:	e0fff917 	ldw	r3,-28(fp)
  2826fc:	1884983a 	sll	r2,r3,r2
  282700:	e13fff17 	ldw	r4,-4(fp)
  282704:	2089883a 	add	r4,r4,r2
  282708:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  28270c:	e0bfee17 	ldw	r2,-72(fp)
  282710:	10800e17 	ldw	r2,56(r2)
  282714:	10800058 	cmpnei	r2,r2,1
  282718:	10001e1e 	bne	r2,zero,282794 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
			for (y = t_y; y <= b_y; y++)
  28271c:	e0bff917 	ldw	r2,-28(fp)
  282720:	e0bff515 	stw	r2,-44(fp)
  282724:	00001706 	br	282784 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
			{
				for (x = l_x; x <= r_x; x++)
  282728:	e0fffb17 	ldw	r3,-20(fp)
  28272c:	e0fff615 	stw	r3,-40(fp)
  282730:	00000806 	br	282754 <alt_up_pixel_buffer_dma_draw_box+0x194>
				{
					IOWR_8DIRECT(addr, x, local_color);
  282734:	e0ffff17 	ldw	r3,-4(fp)
  282738:	e0bff617 	ldw	r2,-40(fp)
  28273c:	1885883a 	add	r2,r3,r2
  282740:	e0fff717 	ldw	r3,-36(fp)
  282744:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  282748:	e13ff617 	ldw	r4,-40(fp)
  28274c:	21000044 	addi	r4,r4,1
  282750:	e13ff615 	stw	r4,-40(fp)
  282754:	e0bffa17 	ldw	r2,-24(fp)
  282758:	e0fff617 	ldw	r3,-40(fp)
  28275c:	10fff52e 	bgeu	r2,r3,282734 <alt_up_pixel_buffer_dma_draw_box+0x174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
  282760:	e0fff417 	ldw	r3,-48(fp)
  282764:	00800044 	movi	r2,1
  282768:	10c4983a 	sll	r2,r2,r3
  28276c:	e13fff17 	ldw	r4,-4(fp)
  282770:	2089883a 	add	r4,r4,r2
  282774:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  282778:	e0bff517 	ldw	r2,-44(fp)
  28277c:	10800044 	addi	r2,r2,1
  282780:	e0bff515 	stw	r2,-44(fp)
  282784:	e0fff817 	ldw	r3,-32(fp)
  282788:	e13ff517 	ldw	r4,-44(fp)
  28278c:	193fe62e 	bgeu	r3,r4,282728 <alt_up_pixel_buffer_dma_draw_box+0x168>
  282790:	0000c406 	br	282aa4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  282794:	e0bfee17 	ldw	r2,-72(fp)
  282798:	10800e17 	ldw	r2,56(r2)
  28279c:	10800098 	cmpnei	r2,r2,2
  2827a0:	1000211e 	bne	r2,zero,282828 <alt_up_pixel_buffer_dma_draw_box+0x268>
			for (y = t_y; y <= b_y; y++)
  2827a4:	e0bff917 	ldw	r2,-28(fp)
  2827a8:	e0bff515 	stw	r2,-44(fp)
  2827ac:	00001a06 	br	282818 <alt_up_pixel_buffer_dma_draw_box+0x258>
			{
				for (x = l_x; x <= r_x; x++)
  2827b0:	e0fffb17 	ldw	r3,-20(fp)
  2827b4:	e0fff615 	stw	r3,-40(fp)
  2827b8:	00000b06 	br	2827e8 <alt_up_pixel_buffer_dma_draw_box+0x228>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  2827bc:	e13ff617 	ldw	r4,-40(fp)
  2827c0:	e13ff617 	ldw	r4,-40(fp)
  2827c4:	2105883a 	add	r2,r4,r4
  2827c8:	1007883a 	mov	r3,r2
  2827cc:	e0bfff17 	ldw	r2,-4(fp)
  2827d0:	1885883a 	add	r2,r3,r2
  2827d4:	e0fff717 	ldw	r3,-36(fp)
  2827d8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  2827dc:	e0bff617 	ldw	r2,-40(fp)
  2827e0:	10800044 	addi	r2,r2,1
  2827e4:	e0bff615 	stw	r2,-40(fp)
  2827e8:	e0fffa17 	ldw	r3,-24(fp)
  2827ec:	e13ff617 	ldw	r4,-40(fp)
  2827f0:	193ff22e 	bgeu	r3,r4,2827bc <alt_up_pixel_buffer_dma_draw_box+0x1fc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
  2827f4:	e0fff417 	ldw	r3,-48(fp)
  2827f8:	00800044 	movi	r2,1
  2827fc:	10c4983a 	sll	r2,r2,r3
  282800:	e0ffff17 	ldw	r3,-4(fp)
  282804:	1887883a 	add	r3,r3,r2
  282808:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  28280c:	e13ff517 	ldw	r4,-44(fp)
  282810:	21000044 	addi	r4,r4,1
  282814:	e13ff515 	stw	r4,-44(fp)
  282818:	e0bff817 	ldw	r2,-32(fp)
  28281c:	e0fff517 	ldw	r3,-44(fp)
  282820:	10ffe32e 	bgeu	r2,r3,2827b0 <alt_up_pixel_buffer_dma_draw_box+0x1f0>
  282824:	00009f06 	br	282aa4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  282828:	e13ff917 	ldw	r4,-28(fp)
  28282c:	e13ff515 	stw	r4,-44(fp)
  282830:	00001b06 	br	2828a0 <alt_up_pixel_buffer_dma_draw_box+0x2e0>
			{
				for (x = l_x; x <= r_x; x++)
  282834:	e0bffb17 	ldw	r2,-20(fp)
  282838:	e0bff615 	stw	r2,-40(fp)
  28283c:	00000c06 	br	282870 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  282840:	e0fff617 	ldw	r3,-40(fp)
  282844:	e0fff617 	ldw	r3,-40(fp)
  282848:	18c5883a 	add	r2,r3,r3
  28284c:	1085883a 	add	r2,r2,r2
  282850:	1007883a 	mov	r3,r2
  282854:	e0bfff17 	ldw	r2,-4(fp)
  282858:	1885883a 	add	r2,r3,r2
  28285c:	e0fff717 	ldw	r3,-36(fp)
  282860:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  282864:	e13ff617 	ldw	r4,-40(fp)
  282868:	21000044 	addi	r4,r4,1
  28286c:	e13ff615 	stw	r4,-40(fp)
  282870:	e0bffa17 	ldw	r2,-24(fp)
  282874:	e0fff617 	ldw	r3,-40(fp)
  282878:	10fff12e 	bgeu	r2,r3,282840 <alt_up_pixel_buffer_dma_draw_box+0x280>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
  28287c:	e0fff417 	ldw	r3,-48(fp)
  282880:	00800044 	movi	r2,1
  282884:	10c4983a 	sll	r2,r2,r3
  282888:	e13fff17 	ldw	r4,-4(fp)
  28288c:	2089883a 	add	r4,r4,r2
  282890:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  282894:	e0bff517 	ldw	r2,-44(fp)
  282898:	10800044 	addi	r2,r2,1
  28289c:	e0bff515 	stw	r2,-44(fp)
  2828a0:	e0fff817 	ldw	r3,-32(fp)
  2828a4:	e13ff517 	ldw	r4,-44(fp)
  2828a8:	193fe22e 	bgeu	r3,r4,282834 <alt_up_pixel_buffer_dma_draw_box+0x274>
  2828ac:	00007d06 	br	282aa4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  2828b0:	e0bfee17 	ldw	r2,-72(fp)
  2828b4:	10800e17 	ldw	r2,56(r2)
  2828b8:	10800058 	cmpnei	r2,r2,1
  2828bc:	1000221e 	bne	r2,zero,282948 <alt_up_pixel_buffer_dma_draw_box+0x388>
			addr = addr + t_y * limit_x;
  2828c0:	e0fff917 	ldw	r3,-28(fp)
  2828c4:	e13ffe17 	ldw	r4,-8(fp)
  2828c8:	1905383a 	mul	r2,r3,r4
  2828cc:	e0ffff17 	ldw	r3,-4(fp)
  2828d0:	1887883a 	add	r3,r3,r2
  2828d4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  2828d8:	e13ff917 	ldw	r4,-28(fp)
  2828dc:	e13ff215 	stw	r4,-56(fp)
  2828e0:	00001506 	br	282938 <alt_up_pixel_buffer_dma_draw_box+0x378>
			{
				for (x = l_x; x <= r_x; x++)
  2828e4:	e0bffb17 	ldw	r2,-20(fp)
  2828e8:	e0bff315 	stw	r2,-52(fp)
  2828ec:	00000806 	br	282910 <alt_up_pixel_buffer_dma_draw_box+0x350>
				{
					IOWR_8DIRECT(addr, x, local_color);
  2828f0:	e0ffff17 	ldw	r3,-4(fp)
  2828f4:	e0bff317 	ldw	r2,-52(fp)
  2828f8:	1885883a 	add	r2,r3,r2
  2828fc:	e0fff717 	ldw	r3,-36(fp)
  282900:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  282904:	e0fff317 	ldw	r3,-52(fp)
  282908:	18c00044 	addi	r3,r3,1
  28290c:	e0fff315 	stw	r3,-52(fp)
  282910:	e13ffa17 	ldw	r4,-24(fp)
  282914:	e0bff317 	ldw	r2,-52(fp)
  282918:	20bff52e 	bgeu	r4,r2,2828f0 <alt_up_pixel_buffer_dma_draw_box+0x330>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
  28291c:	e0ffff17 	ldw	r3,-4(fp)
  282920:	e13ffe17 	ldw	r4,-8(fp)
  282924:	1907883a 	add	r3,r3,r4
  282928:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  28292c:	e0bff217 	ldw	r2,-56(fp)
  282930:	10800044 	addi	r2,r2,1
  282934:	e0bff215 	stw	r2,-56(fp)
  282938:	e0fff817 	ldw	r3,-32(fp)
  28293c:	e13ff217 	ldw	r4,-56(fp)
  282940:	193fe82e 	bgeu	r3,r4,2828e4 <alt_up_pixel_buffer_dma_draw_box+0x324>
  282944:	00005706 	br	282aa4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  282948:	e0bfee17 	ldw	r2,-72(fp)
  28294c:	10800e17 	ldw	r2,56(r2)
  282950:	10800098 	cmpnei	r2,r2,2
  282954:	1000291e 	bne	r2,zero,2829fc <alt_up_pixel_buffer_dma_draw_box+0x43c>
			limit_x = limit_x << 1;
  282958:	e0fffe17 	ldw	r3,-8(fp)
  28295c:	e0fffe17 	ldw	r3,-8(fp)
  282960:	18c5883a 	add	r2,r3,r3
  282964:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  282968:	e13ff917 	ldw	r4,-28(fp)
  28296c:	e0fffe17 	ldw	r3,-8(fp)
  282970:	20c5383a 	mul	r2,r4,r3
  282974:	e13fff17 	ldw	r4,-4(fp)
  282978:	2089883a 	add	r4,r4,r2
  28297c:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  282980:	e0bff917 	ldw	r2,-28(fp)
  282984:	e0bff215 	stw	r2,-56(fp)
  282988:	00001806 	br	2829ec <alt_up_pixel_buffer_dma_draw_box+0x42c>
			{
				for (x = l_x; x <= r_x; x++)
  28298c:	e0fffb17 	ldw	r3,-20(fp)
  282990:	e0fff315 	stw	r3,-52(fp)
  282994:	00000b06 	br	2829c4 <alt_up_pixel_buffer_dma_draw_box+0x404>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
  282998:	e13ff317 	ldw	r4,-52(fp)
  28299c:	e13ff317 	ldw	r4,-52(fp)
  2829a0:	2105883a 	add	r2,r4,r4
  2829a4:	1007883a 	mov	r3,r2
  2829a8:	e0bfff17 	ldw	r2,-4(fp)
  2829ac:	1885883a 	add	r2,r3,r2
  2829b0:	e0fff717 	ldw	r3,-36(fp)
  2829b4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  2829b8:	e0bff317 	ldw	r2,-52(fp)
  2829bc:	10800044 	addi	r2,r2,1
  2829c0:	e0bff315 	stw	r2,-52(fp)
  2829c4:	e0fffa17 	ldw	r3,-24(fp)
  2829c8:	e13ff317 	ldw	r4,-52(fp)
  2829cc:	193ff22e 	bgeu	r3,r4,282998 <alt_up_pixel_buffer_dma_draw_box+0x3d8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
  2829d0:	e0bfff17 	ldw	r2,-4(fp)
  2829d4:	e0fffe17 	ldw	r3,-8(fp)
  2829d8:	10c5883a 	add	r2,r2,r3
  2829dc:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  2829e0:	e13ff217 	ldw	r4,-56(fp)
  2829e4:	21000044 	addi	r4,r4,1
  2829e8:	e13ff215 	stw	r4,-56(fp)
  2829ec:	e0bff817 	ldw	r2,-32(fp)
  2829f0:	e0fff217 	ldw	r3,-56(fp)
  2829f4:	10ffe52e 	bgeu	r2,r3,28298c <alt_up_pixel_buffer_dma_draw_box+0x3cc>
  2829f8:	00002a06 	br	282aa4 <alt_up_pixel_buffer_dma_draw_box+0x4e4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  2829fc:	e13ffe17 	ldw	r4,-8(fp)
  282a00:	e13ffe17 	ldw	r4,-8(fp)
  282a04:	2105883a 	add	r2,r4,r4
  282a08:	1085883a 	add	r2,r2,r2
  282a0c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  282a10:	e0fff917 	ldw	r3,-28(fp)
  282a14:	e13ffe17 	ldw	r4,-8(fp)
  282a18:	1905383a 	mul	r2,r3,r4
  282a1c:	e0ffff17 	ldw	r3,-4(fp)
  282a20:	1887883a 	add	r3,r3,r2
  282a24:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  282a28:	e13ff917 	ldw	r4,-28(fp)
  282a2c:	e13ff215 	stw	r4,-56(fp)
  282a30:	00001906 	br	282a98 <alt_up_pixel_buffer_dma_draw_box+0x4d8>
			{
				for (x = l_x; x <= r_x; x++)
  282a34:	e0bffb17 	ldw	r2,-20(fp)
  282a38:	e0bff315 	stw	r2,-52(fp)
  282a3c:	00000c06 	br	282a70 <alt_up_pixel_buffer_dma_draw_box+0x4b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
  282a40:	e0fff317 	ldw	r3,-52(fp)
  282a44:	e0fff317 	ldw	r3,-52(fp)
  282a48:	18c5883a 	add	r2,r3,r3
  282a4c:	1085883a 	add	r2,r2,r2
  282a50:	1007883a 	mov	r3,r2
  282a54:	e0bfff17 	ldw	r2,-4(fp)
  282a58:	1885883a 	add	r2,r3,r2
  282a5c:	e0fff717 	ldw	r3,-36(fp)
  282a60:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
  282a64:	e13ff317 	ldw	r4,-52(fp)
  282a68:	21000044 	addi	r4,r4,1
  282a6c:	e13ff315 	stw	r4,-52(fp)
  282a70:	e0bffa17 	ldw	r2,-24(fp)
  282a74:	e0fff317 	ldw	r3,-52(fp)
  282a78:	10fff12e 	bgeu	r2,r3,282a40 <alt_up_pixel_buffer_dma_draw_box+0x480>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
  282a7c:	e13fff17 	ldw	r4,-4(fp)
  282a80:	e0bffe17 	ldw	r2,-8(fp)
  282a84:	2089883a 	add	r4,r4,r2
  282a88:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  282a8c:	e0fff217 	ldw	r3,-56(fp)
  282a90:	18c00044 	addi	r3,r3,1
  282a94:	e0fff215 	stw	r3,-56(fp)
  282a98:	e13ff817 	ldw	r4,-32(fp)
  282a9c:	e0bff217 	ldw	r2,-56(fp)
  282aa0:	20bfe42e 	bgeu	r4,r2,282a34 <alt_up_pixel_buffer_dma_draw_box+0x474>
				}
				addr = addr + limit_x;
			}
		}
	}
}
  282aa4:	e037883a 	mov	sp,fp
  282aa8:	df000017 	ldw	fp,0(sp)
  282aac:	dec00104 	addi	sp,sp,4
  282ab0:	f800283a 	ret

00282ab4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
  282ab4:	defff204 	addi	sp,sp,-56
  282ab8:	df000d15 	stw	fp,52(sp)
  282abc:	df000d04 	addi	fp,sp,52
  282ac0:	e13ff315 	stw	r4,-52(fp)
  282ac4:	e17ff415 	stw	r5,-48(fp)
  282ac8:	e1bff515 	stw	r6,-44(fp)
  282acc:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  282ad0:	e0bff317 	ldw	r2,-52(fp)
  282ad4:	10800f17 	ldw	r2,60(r2)
  282ad8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  282adc:	e0bff317 	ldw	r2,-52(fp)
  282ae0:	10801017 	ldw	r2,64(r2)
  282ae4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
  282ae8:	e0bff417 	ldw	r2,-48(fp)
  282aec:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
  282af0:	e0fff517 	ldw	r3,-44(fp)
  282af4:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
  282af8:	e13ff617 	ldw	r4,-40(fp)
  282afc:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  282b00:	e0800117 	ldw	r2,4(fp)
  282b04:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
  282b08:	e0fffb17 	ldw	r3,-20(fp)
  282b0c:	e13ffc17 	ldw	r4,-16(fp)
  282b10:	1900042e 	bgeu	r3,r4,282b24 <alt_up_pixel_buffer_dma_draw_hline+0x70>
	{
		temp = l_x;
  282b14:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
  282b18:	e0fffb17 	ldw	r3,-20(fp)
  282b1c:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
  282b20:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
  282b24:	e13ffc17 	ldw	r4,-16(fp)
  282b28:	e0bffe17 	ldw	r2,-8(fp)
  282b2c:	2080b12e 	bgeu	r4,r2,282df4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
  282b30:	e0fffa17 	ldw	r3,-24(fp)
  282b34:	e13ffd17 	ldw	r4,-12(fp)
  282b38:	19000136 	bltu	r3,r4,282b40 <alt_up_pixel_buffer_dma_draw_hline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  282b3c:	0000ad06 	br	282df4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
  282b40:	e0bffb17 	ldw	r2,-20(fp)
  282b44:	e0fffe17 	ldw	r3,-8(fp)
  282b48:	10c00336 	bltu	r2,r3,282b58 <alt_up_pixel_buffer_dma_draw_hline+0xa4>
	{
		r_x = limit_x - 1;
  282b4c:	e13ffe17 	ldw	r4,-8(fp)
  282b50:	213fffc4 	addi	r4,r4,-1
  282b54:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  282b58:	e0800217 	ldw	r2,8(fp)
  282b5c:	10800058 	cmpnei	r2,r2,1
  282b60:	1000041e 	bne	r2,zero,282b74 <alt_up_pixel_buffer_dma_draw_hline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  282b64:	e0bff317 	ldw	r2,-52(fp)
  282b68:	10800c17 	ldw	r2,48(r2)
  282b6c:	e0bfff15 	stw	r2,-4(fp)
  282b70:	00000306 	br	282b80 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  282b74:	e0bff317 	ldw	r2,-52(fp)
  282b78:	10800b17 	ldw	r2,44(r2)
  282b7c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  282b80:	e0bff317 	ldw	r2,-52(fp)
  282b84:	10800d17 	ldw	r2,52(r2)
  282b88:	1004c03a 	cmpne	r2,r2,zero
  282b8c:	1000431e 	bne	r2,zero,282c9c <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  282b90:	e0bff317 	ldw	r2,-52(fp)
  282b94:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
  282b98:	e0fffa17 	ldw	r3,-24(fp)
  282b9c:	1884983a 	sll	r2,r3,r2
  282ba0:	e13fff17 	ldw	r4,-4(fp)
  282ba4:	2089883a 	add	r4,r4,r2
  282ba8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  282bac:	e0bff317 	ldw	r2,-52(fp)
  282bb0:	10800e17 	ldw	r2,56(r2)
  282bb4:	10800058 	cmpnei	r2,r2,1
  282bb8:	10000f1e 	bne	r2,zero,282bf8 <alt_up_pixel_buffer_dma_draw_hline+0x144>
			for (x = l_x; x <= r_x; x++)
  282bbc:	e0bffc17 	ldw	r2,-16(fp)
  282bc0:	e0bff815 	stw	r2,-32(fp)
  282bc4:	00000806 	br	282be8 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_8DIRECT(addr, x, local_color);
  282bc8:	e0ffff17 	ldw	r3,-4(fp)
  282bcc:	e0bff817 	ldw	r2,-32(fp)
  282bd0:	1885883a 	add	r2,r3,r2
  282bd4:	e0fff917 	ldw	r3,-28(fp)
  282bd8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  282bdc:	e0fff817 	ldw	r3,-32(fp)
  282be0:	18c00044 	addi	r3,r3,1
  282be4:	e0fff815 	stw	r3,-32(fp)
  282be8:	e13ffb17 	ldw	r4,-20(fp)
  282bec:	e0bff817 	ldw	r2,-32(fp)
  282bf0:	20bff52e 	bgeu	r4,r2,282bc8 <alt_up_pixel_buffer_dma_draw_hline+0x114>
  282bf4:	00007f06 	br	282df4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  282bf8:	e0bff317 	ldw	r2,-52(fp)
  282bfc:	10800e17 	ldw	r2,56(r2)
  282c00:	10800098 	cmpnei	r2,r2,2
  282c04:	1000121e 	bne	r2,zero,282c50 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			for (x = l_x; x <= r_x; x++)
  282c08:	e0fffc17 	ldw	r3,-16(fp)
  282c0c:	e0fff815 	stw	r3,-32(fp)
  282c10:	00000b06 	br	282c40 <alt_up_pixel_buffer_dma_draw_hline+0x18c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  282c14:	e13ff817 	ldw	r4,-32(fp)
  282c18:	e13ff817 	ldw	r4,-32(fp)
  282c1c:	2105883a 	add	r2,r4,r4
  282c20:	1007883a 	mov	r3,r2
  282c24:	e0bfff17 	ldw	r2,-4(fp)
  282c28:	1885883a 	add	r2,r3,r2
  282c2c:	e0fff917 	ldw	r3,-28(fp)
  282c30:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
  282c34:	e0bff817 	ldw	r2,-32(fp)
  282c38:	10800044 	addi	r2,r2,1
  282c3c:	e0bff815 	stw	r2,-32(fp)
  282c40:	e0fffb17 	ldw	r3,-20(fp)
  282c44:	e13ff817 	ldw	r4,-32(fp)
  282c48:	193ff22e 	bgeu	r3,r4,282c14 <alt_up_pixel_buffer_dma_draw_hline+0x160>
  282c4c:	00006906 	br	282df4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  282c50:	e0bffc17 	ldw	r2,-16(fp)
  282c54:	e0bff815 	stw	r2,-32(fp)
  282c58:	00000c06 	br	282c8c <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  282c5c:	e0fff817 	ldw	r3,-32(fp)
  282c60:	e0fff817 	ldw	r3,-32(fp)
  282c64:	18c5883a 	add	r2,r3,r3
  282c68:	1085883a 	add	r2,r2,r2
  282c6c:	1007883a 	mov	r3,r2
  282c70:	e0bfff17 	ldw	r2,-4(fp)
  282c74:	1885883a 	add	r2,r3,r2
  282c78:	e0fff917 	ldw	r3,-28(fp)
  282c7c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
  282c80:	e13ff817 	ldw	r4,-32(fp)
  282c84:	21000044 	addi	r4,r4,1
  282c88:	e13ff815 	stw	r4,-32(fp)
  282c8c:	e0bffb17 	ldw	r2,-20(fp)
  282c90:	e0fff817 	ldw	r3,-32(fp)
  282c94:	10fff12e 	bgeu	r2,r3,282c5c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
  282c98:	00005606 	br	282df4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  282c9c:	e0bff317 	ldw	r2,-52(fp)
  282ca0:	10800e17 	ldw	r2,56(r2)
  282ca4:	10800058 	cmpnei	r2,r2,1
  282ca8:	1000151e 	bne	r2,zero,282d00 <alt_up_pixel_buffer_dma_draw_hline+0x24c>
			addr = addr + line_y * limit_x;
  282cac:	e13ffa17 	ldw	r4,-24(fp)
  282cb0:	e0fffe17 	ldw	r3,-8(fp)
  282cb4:	20c5383a 	mul	r2,r4,r3
  282cb8:	e13fff17 	ldw	r4,-4(fp)
  282cbc:	2089883a 	add	r4,r4,r2
  282cc0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  282cc4:	e0bffc17 	ldw	r2,-16(fp)
  282cc8:	e0bff715 	stw	r2,-36(fp)
  282ccc:	00000806 	br	282cf0 <alt_up_pixel_buffer_dma_draw_hline+0x23c>
			{
				IOWR_8DIRECT(addr, x, local_color);
  282cd0:	e0ffff17 	ldw	r3,-4(fp)
  282cd4:	e0bff717 	ldw	r2,-36(fp)
  282cd8:	1885883a 	add	r2,r3,r2
  282cdc:	e0fff917 	ldw	r3,-28(fp)
  282ce0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  282ce4:	e0fff717 	ldw	r3,-36(fp)
  282ce8:	18c00044 	addi	r3,r3,1
  282cec:	e0fff715 	stw	r3,-36(fp)
  282cf0:	e13ffb17 	ldw	r4,-20(fp)
  282cf4:	e0bff717 	ldw	r2,-36(fp)
  282cf8:	20bff52e 	bgeu	r4,r2,282cd0 <alt_up_pixel_buffer_dma_draw_hline+0x21c>
  282cfc:	00003d06 	br	282df4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  282d00:	e0bff317 	ldw	r2,-52(fp)
  282d04:	10800e17 	ldw	r2,56(r2)
  282d08:	10800098 	cmpnei	r2,r2,2
  282d0c:	10001c1e 	bne	r2,zero,282d80 <alt_up_pixel_buffer_dma_draw_hline+0x2cc>
			limit_x = limit_x << 1;
  282d10:	e0fffe17 	ldw	r3,-8(fp)
  282d14:	e0fffe17 	ldw	r3,-8(fp)
  282d18:	18c5883a 	add	r2,r3,r3
  282d1c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  282d20:	e13ffa17 	ldw	r4,-24(fp)
  282d24:	e0fffe17 	ldw	r3,-8(fp)
  282d28:	20c5383a 	mul	r2,r4,r3
  282d2c:	e13fff17 	ldw	r4,-4(fp)
  282d30:	2089883a 	add	r4,r4,r2
  282d34:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
  282d38:	e0bffc17 	ldw	r2,-16(fp)
  282d3c:	e0bff715 	stw	r2,-36(fp)
  282d40:	00000b06 	br	282d70 <alt_up_pixel_buffer_dma_draw_hline+0x2bc>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
  282d44:	e0fff717 	ldw	r3,-36(fp)
  282d48:	e0fff717 	ldw	r3,-36(fp)
  282d4c:	18c5883a 	add	r2,r3,r3
  282d50:	1007883a 	mov	r3,r2
  282d54:	e0bfff17 	ldw	r2,-4(fp)
  282d58:	1885883a 	add	r2,r3,r2
  282d5c:	e0fff917 	ldw	r3,-28(fp)
  282d60:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  282d64:	e13ff717 	ldw	r4,-36(fp)
  282d68:	21000044 	addi	r4,r4,1
  282d6c:	e13ff715 	stw	r4,-36(fp)
  282d70:	e0bffb17 	ldw	r2,-20(fp)
  282d74:	e0fff717 	ldw	r3,-36(fp)
  282d78:	10fff22e 	bgeu	r2,r3,282d44 <alt_up_pixel_buffer_dma_draw_hline+0x290>
  282d7c:	00001d06 	br	282df4 <alt_up_pixel_buffer_dma_draw_hline+0x340>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
  282d80:	e13ffe17 	ldw	r4,-8(fp)
  282d84:	e13ffe17 	ldw	r4,-8(fp)
  282d88:	2105883a 	add	r2,r4,r4
  282d8c:	1085883a 	add	r2,r2,r2
  282d90:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
  282d94:	e0fffa17 	ldw	r3,-24(fp)
  282d98:	e13ffe17 	ldw	r4,-8(fp)
  282d9c:	1905383a 	mul	r2,r3,r4
  282da0:	e0ffff17 	ldw	r3,-4(fp)
  282da4:	1887883a 	add	r3,r3,r2
  282da8:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
  282dac:	e13ffc17 	ldw	r4,-16(fp)
  282db0:	e13ff715 	stw	r4,-36(fp)
  282db4:	00000c06 	br	282de8 <alt_up_pixel_buffer_dma_draw_hline+0x334>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
  282db8:	e0fff717 	ldw	r3,-36(fp)
  282dbc:	e0fff717 	ldw	r3,-36(fp)
  282dc0:	18c5883a 	add	r2,r3,r3
  282dc4:	1085883a 	add	r2,r2,r2
  282dc8:	1007883a 	mov	r3,r2
  282dcc:	e0bfff17 	ldw	r2,-4(fp)
  282dd0:	1885883a 	add	r2,r3,r2
  282dd4:	e0fff917 	ldw	r3,-28(fp)
  282dd8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
  282ddc:	e13ff717 	ldw	r4,-36(fp)
  282de0:	21000044 	addi	r4,r4,1
  282de4:	e13ff715 	stw	r4,-36(fp)
  282de8:	e0bffb17 	ldw	r2,-20(fp)
  282dec:	e0fff717 	ldw	r3,-36(fp)
  282df0:	10fff12e 	bgeu	r2,r3,282db8 <alt_up_pixel_buffer_dma_draw_hline+0x304>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
  282df4:	e037883a 	mov	sp,fp
  282df8:	df000017 	ldw	fp,0(sp)
  282dfc:	dec00104 	addi	sp,sp,4
  282e00:	f800283a 	ret

00282e04 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
  282e04:	defff104 	addi	sp,sp,-60
  282e08:	df000e15 	stw	fp,56(sp)
  282e0c:	df000e04 	addi	fp,sp,56
  282e10:	e13ff215 	stw	r4,-56(fp)
  282e14:	e17ff315 	stw	r5,-52(fp)
  282e18:	e1bff415 	stw	r6,-48(fp)
  282e1c:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
  282e20:	e0bff217 	ldw	r2,-56(fp)
  282e24:	10800f17 	ldw	r2,60(r2)
  282e28:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
  282e2c:	e0bff217 	ldw	r2,-56(fp)
  282e30:	10801017 	ldw	r2,64(r2)
  282e34:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
  282e38:	e0bff317 	ldw	r2,-52(fp)
  282e3c:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
  282e40:	e0fff417 	ldw	r3,-48(fp)
  282e44:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
  282e48:	e13ff517 	ldw	r4,-44(fp)
  282e4c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
  282e50:	e0800117 	ldw	r2,4(fp)
  282e54:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
  282e58:	e0fffa17 	ldw	r3,-24(fp)
  282e5c:	e13ffb17 	ldw	r4,-20(fp)
  282e60:	1900042e 	bgeu	r3,r4,282e74 <alt_up_pixel_buffer_dma_draw_vline+0x70>
	{
		temp = t_y;
  282e64:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
  282e68:	e0fffa17 	ldw	r3,-24(fp)
  282e6c:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
  282e70:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
  282e74:	e13ffc17 	ldw	r4,-16(fp)
  282e78:	e0bffe17 	ldw	r2,-8(fp)
  282e7c:	2080d12e 	bgeu	r4,r2,2831c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
  282e80:	e0fffb17 	ldw	r3,-20(fp)
  282e84:	e13ffd17 	ldw	r4,-12(fp)
  282e88:	19000136 	bltu	r3,r4,282e90 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
  282e8c:	0000cd06 	br	2831c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
  282e90:	e0bffa17 	ldw	r2,-24(fp)
  282e94:	e0fffd17 	ldw	r3,-12(fp)
  282e98:	10c00336 	bltu	r2,r3,282ea8 <alt_up_pixel_buffer_dma_draw_vline+0xa4>
	{
		b_y = limit_y - 1;
  282e9c:	e13ffd17 	ldw	r4,-12(fp)
  282ea0:	213fffc4 	addi	r4,r4,-1
  282ea4:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
  282ea8:	e0800217 	ldw	r2,8(fp)
  282eac:	10800058 	cmpnei	r2,r2,1
  282eb0:	1000041e 	bne	r2,zero,282ec4 <alt_up_pixel_buffer_dma_draw_vline+0xc0>
		addr = pixel_buffer->back_buffer_start_address;
  282eb4:	e0bff217 	ldw	r2,-56(fp)
  282eb8:	10800c17 	ldw	r2,48(r2)
  282ebc:	e0bfff15 	stw	r2,-4(fp)
  282ec0:	00000306 	br	282ed0 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
	else
		addr = pixel_buffer->buffer_start_address;
  282ec4:	e0bff217 	ldw	r2,-56(fp)
  282ec8:	10800b17 	ldw	r2,44(r2)
  282ecc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
  282ed0:	e0bff217 	ldw	r2,-56(fp)
  282ed4:	10800d17 	ldw	r2,52(r2)
  282ed8:	1004c03a 	cmpne	r2,r2,zero
  282edc:	1000571e 	bne	r2,zero,28303c <alt_up_pixel_buffer_dma_draw_vline+0x238>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
  282ee0:	e0bff217 	ldw	r2,-56(fp)
  282ee4:	10801317 	ldw	r2,76(r2)
  282ee8:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
  282eec:	e0bff717 	ldw	r2,-36(fp)
  282ef0:	e0fffb17 	ldw	r3,-20(fp)
  282ef4:	1884983a 	sll	r2,r3,r2
  282ef8:	e13fff17 	ldw	r4,-4(fp)
  282efc:	2089883a 	add	r4,r4,r2
  282f00:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  282f04:	e0bff217 	ldw	r2,-56(fp)
  282f08:	10800e17 	ldw	r2,56(r2)
  282f0c:	10800058 	cmpnei	r2,r2,1
  282f10:	1000151e 	bne	r2,zero,282f68 <alt_up_pixel_buffer_dma_draw_vline+0x164>
			for (y = t_y; y <= b_y; y++)
  282f14:	e0bffb17 	ldw	r2,-20(fp)
  282f18:	e0bff815 	stw	r2,-32(fp)
  282f1c:	00000e06 	br	282f58 <alt_up_pixel_buffer_dma_draw_vline+0x154>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  282f20:	e0ffff17 	ldw	r3,-4(fp)
  282f24:	e0bffc17 	ldw	r2,-16(fp)
  282f28:	1885883a 	add	r2,r3,r2
  282f2c:	e0fff917 	ldw	r3,-28(fp)
  282f30:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
  282f34:	e0fff717 	ldw	r3,-36(fp)
  282f38:	00800044 	movi	r2,1
  282f3c:	10c4983a 	sll	r2,r2,r3
  282f40:	e0ffff17 	ldw	r3,-4(fp)
  282f44:	1887883a 	add	r3,r3,r2
  282f48:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  282f4c:	e13ff817 	ldw	r4,-32(fp)
  282f50:	21000044 	addi	r4,r4,1
  282f54:	e13ff815 	stw	r4,-32(fp)
  282f58:	e0bffa17 	ldw	r2,-24(fp)
  282f5c:	e0fff817 	ldw	r3,-32(fp)
  282f60:	10ffef2e 	bgeu	r2,r3,282f20 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
  282f64:	00009706 	br	2831c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  282f68:	e0bff217 	ldw	r2,-56(fp)
  282f6c:	10800e17 	ldw	r2,56(r2)
  282f70:	10800098 	cmpnei	r2,r2,2
  282f74:	1000181e 	bne	r2,zero,282fd8 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
			for (y = t_y; y <= b_y; y++)
  282f78:	e13ffb17 	ldw	r4,-20(fp)
  282f7c:	e13ff815 	stw	r4,-32(fp)
  282f80:	00001106 	br	282fc8 <alt_up_pixel_buffer_dma_draw_vline+0x1c4>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  282f84:	e0fffc17 	ldw	r3,-16(fp)
  282f88:	e0fffc17 	ldw	r3,-16(fp)
  282f8c:	18c5883a 	add	r2,r3,r3
  282f90:	1007883a 	mov	r3,r2
  282f94:	e0bfff17 	ldw	r2,-4(fp)
  282f98:	1885883a 	add	r2,r3,r2
  282f9c:	e0fff917 	ldw	r3,-28(fp)
  282fa0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
  282fa4:	e0fff717 	ldw	r3,-36(fp)
  282fa8:	00800044 	movi	r2,1
  282fac:	10c4983a 	sll	r2,r2,r3
  282fb0:	e13fff17 	ldw	r4,-4(fp)
  282fb4:	2089883a 	add	r4,r4,r2
  282fb8:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
  282fbc:	e0bff817 	ldw	r2,-32(fp)
  282fc0:	10800044 	addi	r2,r2,1
  282fc4:	e0bff815 	stw	r2,-32(fp)
  282fc8:	e0fffa17 	ldw	r3,-24(fp)
  282fcc:	e13ff817 	ldw	r4,-32(fp)
  282fd0:	193fec2e 	bgeu	r3,r4,282f84 <alt_up_pixel_buffer_dma_draw_vline+0x180>
  282fd4:	00007b06 	br	2831c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  282fd8:	e0bffb17 	ldw	r2,-20(fp)
  282fdc:	e0bff815 	stw	r2,-32(fp)
  282fe0:	00001206 	br	28302c <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  282fe4:	e0fffc17 	ldw	r3,-16(fp)
  282fe8:	e0fffc17 	ldw	r3,-16(fp)
  282fec:	18c5883a 	add	r2,r3,r3
  282ff0:	1085883a 	add	r2,r2,r2
  282ff4:	1007883a 	mov	r3,r2
  282ff8:	e0bfff17 	ldw	r2,-4(fp)
  282ffc:	1885883a 	add	r2,r3,r2
  283000:	e0fff917 	ldw	r3,-28(fp)
  283004:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
  283008:	e0fff717 	ldw	r3,-36(fp)
  28300c:	00800044 	movi	r2,1
  283010:	10c4983a 	sll	r2,r2,r3
  283014:	e13fff17 	ldw	r4,-4(fp)
  283018:	2089883a 	add	r4,r4,r2
  28301c:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
  283020:	e0bff817 	ldw	r2,-32(fp)
  283024:	10800044 	addi	r2,r2,1
  283028:	e0bff815 	stw	r2,-32(fp)
  28302c:	e0fffa17 	ldw	r3,-24(fp)
  283030:	e13ff817 	ldw	r4,-32(fp)
  283034:	193feb2e 	bgeu	r3,r4,282fe4 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
  283038:	00006206 	br	2831c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
  28303c:	e0bff217 	ldw	r2,-56(fp)
  283040:	10800e17 	ldw	r2,56(r2)
  283044:	10800058 	cmpnei	r2,r2,1
  283048:	1000191e 	bne	r2,zero,2830b0 <alt_up_pixel_buffer_dma_draw_vline+0x2ac>
			addr = addr + t_y * limit_x;
  28304c:	e0fffb17 	ldw	r3,-20(fp)
  283050:	e13ffe17 	ldw	r4,-8(fp)
  283054:	1905383a 	mul	r2,r3,r4
  283058:	e0ffff17 	ldw	r3,-4(fp)
  28305c:	1887883a 	add	r3,r3,r2
  283060:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  283064:	e13ffb17 	ldw	r4,-20(fp)
  283068:	e13ff615 	stw	r4,-40(fp)
  28306c:	00000c06 	br	2830a0 <alt_up_pixel_buffer_dma_draw_vline+0x29c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
  283070:	e0ffff17 	ldw	r3,-4(fp)
  283074:	e0bffc17 	ldw	r2,-16(fp)
  283078:	1885883a 	add	r2,r3,r2
  28307c:	e0fff917 	ldw	r3,-28(fp)
  283080:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
  283084:	e0bfff17 	ldw	r2,-4(fp)
  283088:	e0fffe17 	ldw	r3,-8(fp)
  28308c:	10c5883a 	add	r2,r2,r3
  283090:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  283094:	e13ff617 	ldw	r4,-40(fp)
  283098:	21000044 	addi	r4,r4,1
  28309c:	e13ff615 	stw	r4,-40(fp)
  2830a0:	e0bffa17 	ldw	r2,-24(fp)
  2830a4:	e0fff617 	ldw	r3,-40(fp)
  2830a8:	10fff12e 	bgeu	r2,r3,283070 <alt_up_pixel_buffer_dma_draw_vline+0x26c>
  2830ac:	00004506 	br	2831c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
  2830b0:	e0bff217 	ldw	r2,-56(fp)
  2830b4:	10800e17 	ldw	r2,56(r2)
  2830b8:	10800098 	cmpnei	r2,r2,2
  2830bc:	1000201e 	bne	r2,zero,283140 <alt_up_pixel_buffer_dma_draw_vline+0x33c>
			limit_x = limit_x << 1;
  2830c0:	e13ffe17 	ldw	r4,-8(fp)
  2830c4:	e13ffe17 	ldw	r4,-8(fp)
  2830c8:	2105883a 	add	r2,r4,r4
  2830cc:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  2830d0:	e0fffb17 	ldw	r3,-20(fp)
  2830d4:	e13ffe17 	ldw	r4,-8(fp)
  2830d8:	1905383a 	mul	r2,r3,r4
  2830dc:	e0ffff17 	ldw	r3,-4(fp)
  2830e0:	1887883a 	add	r3,r3,r2
  2830e4:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
  2830e8:	e13ffb17 	ldw	r4,-20(fp)
  2830ec:	e13ff615 	stw	r4,-40(fp)
  2830f0:	00000f06 	br	283130 <alt_up_pixel_buffer_dma_draw_vline+0x32c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
  2830f4:	e0fffc17 	ldw	r3,-16(fp)
  2830f8:	e0fffc17 	ldw	r3,-16(fp)
  2830fc:	18c5883a 	add	r2,r3,r3
  283100:	1007883a 	mov	r3,r2
  283104:	e0bfff17 	ldw	r2,-4(fp)
  283108:	1885883a 	add	r2,r3,r2
  28310c:	e0fff917 	ldw	r3,-28(fp)
  283110:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
  283114:	e13fff17 	ldw	r4,-4(fp)
  283118:	e0bffe17 	ldw	r2,-8(fp)
  28311c:	2089883a 	add	r4,r4,r2
  283120:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  283124:	e0fff617 	ldw	r3,-40(fp)
  283128:	18c00044 	addi	r3,r3,1
  28312c:	e0fff615 	stw	r3,-40(fp)
  283130:	e13ffa17 	ldw	r4,-24(fp)
  283134:	e0bff617 	ldw	r2,-40(fp)
  283138:	20bfee2e 	bgeu	r4,r2,2830f4 <alt_up_pixel_buffer_dma_draw_vline+0x2f0>
  28313c:	00002106 	br	2831c4 <alt_up_pixel_buffer_dma_draw_vline+0x3c0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
  283140:	e0fffe17 	ldw	r3,-8(fp)
  283144:	e0fffe17 	ldw	r3,-8(fp)
  283148:	18c5883a 	add	r2,r3,r3
  28314c:	1085883a 	add	r2,r2,r2
  283150:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
  283154:	e13ffb17 	ldw	r4,-20(fp)
  283158:	e0fffe17 	ldw	r3,-8(fp)
  28315c:	20c5383a 	mul	r2,r4,r3
  283160:	e13fff17 	ldw	r4,-4(fp)
  283164:	2089883a 	add	r4,r4,r2
  283168:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
  28316c:	e0bffb17 	ldw	r2,-20(fp)
  283170:	e0bff615 	stw	r2,-40(fp)
  283174:	00001006 	br	2831b8 <alt_up_pixel_buffer_dma_draw_vline+0x3b4>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
  283178:	e0fffc17 	ldw	r3,-16(fp)
  28317c:	e0fffc17 	ldw	r3,-16(fp)
  283180:	18c5883a 	add	r2,r3,r3
  283184:	1085883a 	add	r2,r2,r2
  283188:	1007883a 	mov	r3,r2
  28318c:	e0bfff17 	ldw	r2,-4(fp)
  283190:	1885883a 	add	r2,r3,r2
  283194:	e0fff917 	ldw	r3,-28(fp)
  283198:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
  28319c:	e13fff17 	ldw	r4,-4(fp)
  2831a0:	e0bffe17 	ldw	r2,-8(fp)
  2831a4:	2089883a 	add	r4,r4,r2
  2831a8:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
  2831ac:	e0fff617 	ldw	r3,-40(fp)
  2831b0:	18c00044 	addi	r3,r3,1
  2831b4:	e0fff615 	stw	r3,-40(fp)
  2831b8:	e13ffa17 	ldw	r4,-24(fp)
  2831bc:	e0bff617 	ldw	r2,-40(fp)
  2831c0:	20bfed2e 	bgeu	r4,r2,283178 <alt_up_pixel_buffer_dma_draw_vline+0x374>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
  2831c4:	e037883a 	mov	sp,fp
  2831c8:	df000017 	ldw	fp,0(sp)
  2831cc:	dec00104 	addi	sp,sp,4
  2831d0:	f800283a 	ret

002831d4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
  2831d4:	defff804 	addi	sp,sp,-32
  2831d8:	dfc00715 	stw	ra,28(sp)
  2831dc:	df000615 	stw	fp,24(sp)
  2831e0:	df000604 	addi	fp,sp,24
  2831e4:	e13ffc15 	stw	r4,-16(fp)
  2831e8:	e17ffd15 	stw	r5,-12(fp)
  2831ec:	e1bffe15 	stw	r6,-8(fp)
  2831f0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
  2831f4:	e0800317 	ldw	r2,12(fp)
  2831f8:	d8800015 	stw	r2,0(sp)
  2831fc:	e0800417 	ldw	r2,16(fp)
  283200:	d8800115 	stw	r2,4(sp)
  283204:	e13ffc17 	ldw	r4,-16(fp)
  283208:	e17ffd17 	ldw	r5,-12(fp)
  28320c:	e1bfff17 	ldw	r6,-4(fp)
  283210:	e1fffe17 	ldw	r7,-8(fp)
  283214:	0282ab40 	call	282ab4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
  283218:	e0800317 	ldw	r2,12(fp)
  28321c:	d8800015 	stw	r2,0(sp)
  283220:	e0800417 	ldw	r2,16(fp)
  283224:	d8800115 	stw	r2,4(sp)
  283228:	e13ffc17 	ldw	r4,-16(fp)
  28322c:	e17ffd17 	ldw	r5,-12(fp)
  283230:	e1bfff17 	ldw	r6,-4(fp)
  283234:	e1c00217 	ldw	r7,8(fp)
  283238:	0282ab40 	call	282ab4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
  28323c:	e0800317 	ldw	r2,12(fp)
  283240:	d8800015 	stw	r2,0(sp)
  283244:	e0800417 	ldw	r2,16(fp)
  283248:	d8800115 	stw	r2,4(sp)
  28324c:	e13ffc17 	ldw	r4,-16(fp)
  283250:	e17ffd17 	ldw	r5,-12(fp)
  283254:	e1bffe17 	ldw	r6,-8(fp)
  283258:	e1c00217 	ldw	r7,8(fp)
  28325c:	0282e040 	call	282e04 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
  283260:	e0800317 	ldw	r2,12(fp)
  283264:	d8800015 	stw	r2,0(sp)
  283268:	e0800417 	ldw	r2,16(fp)
  28326c:	d8800115 	stw	r2,4(sp)
  283270:	e13ffc17 	ldw	r4,-16(fp)
  283274:	e17fff17 	ldw	r5,-4(fp)
  283278:	e1bffe17 	ldw	r6,-8(fp)
  28327c:	e1c00217 	ldw	r7,8(fp)
  283280:	0282e040 	call	282e04 <alt_up_pixel_buffer_dma_draw_vline>
}
  283284:	e037883a 	mov	sp,fp
  283288:	dfc00117 	ldw	ra,4(sp)
  28328c:	df000017 	ldw	fp,0(sp)
  283290:	dec00204 	addi	sp,sp,8
  283294:	f800283a 	ret

00283298 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
  283298:	defffb04 	addi	sp,sp,-20
  28329c:	df000415 	stw	fp,16(sp)
  2832a0:	df000404 	addi	fp,sp,16
  2832a4:	e13ffc15 	stw	r4,-16(fp)
  2832a8:	e17ffd15 	stw	r5,-12(fp)
  2832ac:	e1bffe15 	stw	r6,-8(fp)
  2832b0:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
  2832b4:	e0c00217 	ldw	r3,8(fp)
  2832b8:	1804c03a 	cmpne	r2,r3,zero
  2832bc:	10000b1e 	bne	r2,zero,2832ec <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
  2832c0:	e13ffd17 	ldw	r4,-12(fp)
  2832c4:	e0ffff17 	ldw	r3,-4(fp)
  2832c8:	20c5383a 	mul	r2,r4,r3
  2832cc:	e13ffe17 	ldw	r4,-8(fp)
  2832d0:	1105883a 	add	r2,r2,r4
  2832d4:	1007883a 	mov	r3,r2
  2832d8:	e0bffc17 	ldw	r2,-16(fp)
  2832dc:	1885883a 	add	r2,r3,r2
  2832e0:	e0c00117 	ldw	r3,4(fp)
  2832e4:	10c00025 	stbio	r3,0(r2)
  2832e8:	00001b06 	br	283358 <helper_plot_pixel+0xc0>
	else if (mode == 1)
  2832ec:	e1000217 	ldw	r4,8(fp)
  2832f0:	20800058 	cmpnei	r2,r4,1
  2832f4:	10000c1e 	bne	r2,zero,283328 <helper_plot_pixel+0x90>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
  2832f8:	e0fffd17 	ldw	r3,-12(fp)
  2832fc:	e13fff17 	ldw	r4,-4(fp)
  283300:	1905383a 	mul	r2,r3,r4
  283304:	e0fffe17 	ldw	r3,-8(fp)
  283308:	10c5883a 	add	r2,r2,r3
  28330c:	1085883a 	add	r2,r2,r2
  283310:	1007883a 	mov	r3,r2
  283314:	e0bffc17 	ldw	r2,-16(fp)
  283318:	1885883a 	add	r2,r3,r2
  28331c:	e1000117 	ldw	r4,4(fp)
  283320:	1100002d 	sthio	r4,0(r2)
  283324:	00000c06 	br	283358 <helper_plot_pixel+0xc0>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
  283328:	e0fffd17 	ldw	r3,-12(fp)
  28332c:	e13fff17 	ldw	r4,-4(fp)
  283330:	1905383a 	mul	r2,r3,r4
  283334:	e0fffe17 	ldw	r3,-8(fp)
  283338:	10c5883a 	add	r2,r2,r3
  28333c:	1085883a 	add	r2,r2,r2
  283340:	1085883a 	add	r2,r2,r2
  283344:	1007883a 	mov	r3,r2
  283348:	e0bffc17 	ldw	r2,-16(fp)
  28334c:	1885883a 	add	r2,r3,r2
  283350:	e1000117 	ldw	r4,4(fp)
  283354:	11000035 	stwio	r4,0(r2)
}
  283358:	e037883a 	mov	sp,fp
  28335c:	df000017 	ldw	fp,0(sp)
  283360:	dec00104 	addi	sp,sp,4
  283364:	f800283a 	ret

00283368 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
  283368:	deffe404 	addi	sp,sp,-112
  28336c:	dfc01b15 	stw	ra,108(sp)
  283370:	df001a15 	stw	fp,104(sp)
  283374:	df001a04 	addi	fp,sp,104
  283378:	e13fe815 	stw	r4,-96(fp)
  28337c:	e17fe915 	stw	r5,-92(fp)
  283380:	e1bfea15 	stw	r6,-88(fp)
  283384:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
  283388:	e0bfe917 	ldw	r2,-92(fp)
  28338c:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
  283390:	e0ffea17 	ldw	r3,-88(fp)
  283394:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
  283398:	e13feb17 	ldw	r4,-84(fp)
  28339c:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
  2833a0:	e0800217 	ldw	r2,8(fp)
  2833a4:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
  2833a8:	e0fff717 	ldw	r3,-36(fp)
  2833ac:	e13ff917 	ldw	r4,-28(fp)
  2833b0:	1905c83a 	sub	r2,r3,r4
  2833b4:	e0bfff15 	stw	r2,-4(fp)
  2833b8:	e0ffff17 	ldw	r3,-4(fp)
  2833bc:	1804403a 	cmpge	r2,r3,zero
  2833c0:	1000031e 	bne	r2,zero,2833d0 <alt_up_pixel_buffer_dma_draw_line+0x68>
  2833c4:	e13fff17 	ldw	r4,-4(fp)
  2833c8:	0109c83a 	sub	r4,zero,r4
  2833cc:	e13fff15 	stw	r4,-4(fp)
  2833d0:	e0fff817 	ldw	r3,-32(fp)
  2833d4:	e13ffa17 	ldw	r4,-24(fp)
  2833d8:	1905c83a 	sub	r2,r3,r4
  2833dc:	e0bffe15 	stw	r2,-8(fp)
  2833e0:	e0fffe17 	ldw	r3,-8(fp)
  2833e4:	1804403a 	cmpge	r2,r3,zero
  2833e8:	1000031e 	bne	r2,zero,2833f8 <alt_up_pixel_buffer_dma_draw_line+0x90>
  2833ec:	e13ffe17 	ldw	r4,-8(fp)
  2833f0:	0109c83a 	sub	r4,zero,r4
  2833f4:	e13ffe15 	stw	r4,-8(fp)
  2833f8:	e0fffe17 	ldw	r3,-8(fp)
  2833fc:	e13fff17 	ldw	r4,-4(fp)
  283400:	1904803a 	cmplt	r2,r3,r4
  283404:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
  283408:	e0bfe817 	ldw	r2,-96(fp)
  28340c:	10800e17 	ldw	r2,56(r2)
  283410:	10800060 	cmpeqi	r2,r2,1
  283414:	10000c1e 	bne	r2,zero,283448 <alt_up_pixel_buffer_dma_draw_line+0xe0>
  283418:	e0bfe817 	ldw	r2,-96(fp)
  28341c:	10800e17 	ldw	r2,56(r2)
  283420:	10800098 	cmpnei	r2,r2,2
  283424:	1000031e 	bne	r2,zero,283434 <alt_up_pixel_buffer_dma_draw_line+0xcc>
  283428:	00800044 	movi	r2,1
  28342c:	e0bffc15 	stw	r2,-16(fp)
  283430:	00000206 	br	28343c <alt_up_pixel_buffer_dma_draw_line+0xd4>
  283434:	00c00084 	movi	r3,2
  283438:	e0fffc15 	stw	r3,-16(fp)
  28343c:	e13ffc17 	ldw	r4,-16(fp)
  283440:	e13ffd15 	stw	r4,-12(fp)
  283444:	00000106 	br	28344c <alt_up_pixel_buffer_dma_draw_line+0xe4>
  283448:	e03ffd15 	stw	zero,-12(fp)
  28344c:	e0bffd17 	ldw	r2,-12(fp)
  283450:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
  283454:	e0c00317 	ldw	r3,12(fp)
  283458:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
  28345c:	e0bfe817 	ldw	r2,-96(fp)
  283460:	10800d17 	ldw	r2,52(r2)
  283464:	1004c03a 	cmpne	r2,r2,zero
  283468:	1000091e 	bne	r2,zero,283490 <alt_up_pixel_buffer_dma_draw_line+0x128>
  28346c:	e0bfe817 	ldw	r2,-96(fp)
  283470:	10c01317 	ldw	r3,76(r2)
  283474:	e0bfef17 	ldw	r2,-68(fp)
  283478:	1885c83a 	sub	r2,r3,r2
  28347c:	1007883a 	mov	r3,r2
  283480:	00800044 	movi	r2,1
  283484:	10c4983a 	sll	r2,r2,r3
  283488:	e0bffb15 	stw	r2,-20(fp)
  28348c:	00000306 	br	28349c <alt_up_pixel_buffer_dma_draw_line+0x134>
  283490:	e0bfe817 	ldw	r2,-96(fp)
  283494:	10800f17 	ldw	r2,60(r2)
  283498:	e0bffb15 	stw	r2,-20(fp)
  28349c:	e13ffb17 	ldw	r4,-20(fp)
  2834a0:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
  2834a4:	e0800417 	ldw	r2,16(fp)
  2834a8:	10800058 	cmpnei	r2,r2,1
  2834ac:	1000041e 	bne	r2,zero,2834c0 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
  2834b0:	e0bfe817 	ldw	r2,-96(fp)
  2834b4:	10800c17 	ldw	r2,48(r2)
  2834b8:	e0bfed15 	stw	r2,-76(fp)
  2834bc:	00000306 	br	2834cc <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
  2834c0:	e0bfe817 	ldw	r2,-96(fp)
  2834c4:	10800b17 	ldw	r2,44(r2)
  2834c8:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
  2834cc:	e0fff603 	ldbu	r3,-40(fp)
  2834d0:	18803fcc 	andi	r2,r3,255
  2834d4:	1080201c 	xori	r2,r2,128
  2834d8:	10bfe004 	addi	r2,r2,-128
  2834dc:	10800050 	cmplti	r2,r2,1
  2834e0:	10000c1e 	bne	r2,zero,283514 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
  2834e4:	e13ffa17 	ldw	r4,-24(fp)
  2834e8:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
  2834ec:	e0bff917 	ldw	r2,-28(fp)
  2834f0:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
  2834f4:	e0fff317 	ldw	r3,-52(fp)
  2834f8:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
  2834fc:	e13ff817 	ldw	r4,-32(fp)
  283500:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
  283504:	e0bff717 	ldw	r2,-36(fp)
  283508:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
  28350c:	e0fff317 	ldw	r3,-52(fp)
  283510:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
  283514:	e13ff817 	ldw	r4,-32(fp)
  283518:	e0bffa17 	ldw	r2,-24(fp)
  28351c:	20800c0e 	bge	r4,r2,283550 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
  283520:	e0fffa17 	ldw	r3,-24(fp)
  283524:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
  283528:	e13ff817 	ldw	r4,-32(fp)
  28352c:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
  283530:	e0bff317 	ldw	r2,-52(fp)
  283534:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
  283538:	e0fff917 	ldw	r3,-28(fp)
  28353c:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
  283540:	e13ff717 	ldw	r4,-36(fp)
  283544:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
  283548:	e0bff317 	ldw	r2,-52(fp)
  28354c:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
  283550:	e0fff817 	ldw	r3,-32(fp)
  283554:	e13ffa17 	ldw	r4,-24(fp)
  283558:	1907c83a 	sub	r3,r3,r4
  28355c:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
  283560:	e0fff717 	ldw	r3,-36(fp)
  283564:	e13ff917 	ldw	r4,-28(fp)
  283568:	1905c83a 	sub	r2,r3,r4
  28356c:	e0bff415 	stw	r2,-48(fp)
  283570:	e0fff417 	ldw	r3,-48(fp)
  283574:	1804403a 	cmpge	r2,r3,zero
  283578:	1000031e 	bne	r2,zero,283588 <alt_up_pixel_buffer_dma_draw_line+0x220>
  28357c:	e13ff417 	ldw	r4,-48(fp)
  283580:	0109c83a 	sub	r4,zero,r4
  283584:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
  283588:	e0fff517 	ldw	r3,-44(fp)
  28358c:	1804d7fa 	srli	r2,r3,31
  283590:	e13ff517 	ldw	r4,-44(fp)
  283594:	1105883a 	add	r2,r2,r4
  283598:	1005d07a 	srai	r2,r2,1
  28359c:	0085c83a 	sub	r2,zero,r2
  2835a0:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
  2835a4:	e0bff917 	ldw	r2,-28(fp)
  2835a8:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
  2835ac:	e0fff917 	ldw	r3,-28(fp)
  2835b0:	e13ff717 	ldw	r4,-36(fp)
  2835b4:	1900030e 	bge	r3,r4,2835c4 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
  2835b8:	00800044 	movi	r2,1
  2835bc:	e0bff215 	stw	r2,-56(fp)
  2835c0:	00000206 	br	2835cc <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
  2835c4:	00ffffc4 	movi	r3,-1
  2835c8:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
  2835cc:	e13ff603 	ldbu	r4,-40(fp)
  2835d0:	20803fcc 	andi	r2,r4,255
  2835d4:	1080201c 	xori	r2,r2,128
  2835d8:	10bfe004 	addi	r2,r2,-128
  2835dc:	10800058 	cmpnei	r2,r2,1
  2835e0:	1000221e 	bne	r2,zero,28366c <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
  2835e4:	e0bffa17 	ldw	r2,-24(fp)
  2835e8:	e0bff115 	stw	r2,-60(fp)
  2835ec:	00001b06 	br	28365c <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
  2835f0:	e0ffee17 	ldw	r3,-72(fp)
  2835f4:	d8c00015 	stw	r3,0(sp)
  2835f8:	e13fef17 	ldw	r4,-68(fp)
  2835fc:	d9000115 	stw	r4,4(sp)
  283600:	e13fed17 	ldw	r4,-76(fp)
  283604:	e17fec17 	ldw	r5,-80(fp)
  283608:	e1bff017 	ldw	r6,-64(fp)
  28360c:	e1fff117 	ldw	r7,-60(fp)
  283610:	02832980 	call	283298 <helper_plot_pixel>
			error = error + deltay;
  283614:	e0bff317 	ldw	r2,-52(fp)
  283618:	e0fff417 	ldw	r3,-48(fp)
  28361c:	10c5883a 	add	r2,r2,r3
  283620:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
  283624:	e13ff317 	ldw	r4,-52(fp)
  283628:	20800050 	cmplti	r2,r4,1
  28362c:	1000081e 	bne	r2,zero,283650 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
  283630:	e0bff017 	ldw	r2,-64(fp)
  283634:	e0fff217 	ldw	r3,-56(fp)
  283638:	10c5883a 	add	r2,r2,r3
  28363c:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
  283640:	e13ff317 	ldw	r4,-52(fp)
  283644:	e0bff517 	ldw	r2,-44(fp)
  283648:	2089c83a 	sub	r4,r4,r2
  28364c:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
  283650:	e0fff117 	ldw	r3,-60(fp)
  283654:	18c00044 	addi	r3,r3,1
  283658:	e0fff115 	stw	r3,-60(fp)
  28365c:	e13ff817 	ldw	r4,-32(fp)
  283660:	e0bff117 	ldw	r2,-60(fp)
  283664:	20bfe20e 	bge	r4,r2,2835f0 <alt_up_pixel_buffer_dma_draw_line+0x288>
  283668:	00002106 	br	2836f0 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  28366c:	e0fffa17 	ldw	r3,-24(fp)
  283670:	e0fff115 	stw	r3,-60(fp)
  283674:	00001b06 	br	2836e4 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
  283678:	e13fee17 	ldw	r4,-72(fp)
  28367c:	d9000015 	stw	r4,0(sp)
  283680:	e0bfef17 	ldw	r2,-68(fp)
  283684:	d8800115 	stw	r2,4(sp)
  283688:	e13fed17 	ldw	r4,-76(fp)
  28368c:	e17fec17 	ldw	r5,-80(fp)
  283690:	e1bff117 	ldw	r6,-60(fp)
  283694:	e1fff017 	ldw	r7,-64(fp)
  283698:	02832980 	call	283298 <helper_plot_pixel>
			error = error + deltay;
  28369c:	e0fff317 	ldw	r3,-52(fp)
  2836a0:	e13ff417 	ldw	r4,-48(fp)
  2836a4:	1907883a 	add	r3,r3,r4
  2836a8:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
  2836ac:	e0fff317 	ldw	r3,-52(fp)
  2836b0:	18800050 	cmplti	r2,r3,1
  2836b4:	1000081e 	bne	r2,zero,2836d8 <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
  2836b8:	e13ff017 	ldw	r4,-64(fp)
  2836bc:	e0bff217 	ldw	r2,-56(fp)
  2836c0:	2089883a 	add	r4,r4,r2
  2836c4:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
  2836c8:	e0fff317 	ldw	r3,-52(fp)
  2836cc:	e13ff517 	ldw	r4,-44(fp)
  2836d0:	1907c83a 	sub	r3,r3,r4
  2836d4:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
  2836d8:	e0bff117 	ldw	r2,-60(fp)
  2836dc:	10800044 	addi	r2,r2,1
  2836e0:	e0bff115 	stw	r2,-60(fp)
  2836e4:	e0fff817 	ldw	r3,-32(fp)
  2836e8:	e13ff117 	ldw	r4,-60(fp)
  2836ec:	193fe20e 	bge	r3,r4,283678 <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
  2836f0:	e037883a 	mov	sp,fp
  2836f4:	dfc00117 	ldw	ra,4(sp)
  2836f8:	df000017 	ldw	fp,0(sp)
  2836fc:	dec00204 	addi	sp,sp,8
  283700:	f800283a 	ret

00283704 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  283704:	defff404 	addi	sp,sp,-48
  283708:	df000b15 	stw	fp,44(sp)
  28370c:	df000b04 	addi	fp,sp,44
  283710:	e13ffb15 	stw	r4,-20(fp)
  283714:	e17ffc15 	stw	r5,-16(fp)
  283718:	e1bffd15 	stw	r6,-12(fp)
  28371c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  283720:	e03ff915 	stw	zero,-28(fp)
  283724:	00800a74 	movhi	r2,41
  283728:	10b8d504 	addi	r2,r2,-7340
  28372c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  283730:	1005003a 	cmpeq	r2,r2,zero
  283734:	1000411e 	bne	r2,zero,28383c <alt_alarm_start+0x138>
  {
    if (alarm)
  283738:	e0bffb17 	ldw	r2,-20(fp)
  28373c:	1005003a 	cmpeq	r2,r2,zero
  283740:	10003b1e 	bne	r2,zero,283830 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  283744:	e0fffb17 	ldw	r3,-20(fp)
  283748:	e0bffd17 	ldw	r2,-12(fp)
  28374c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  283750:	e0fffb17 	ldw	r3,-20(fp)
  283754:	e0bffe17 	ldw	r2,-8(fp)
  283758:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  28375c:	0005303a 	rdctl	r2,status
  283760:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  283764:	e0fff817 	ldw	r3,-32(fp)
  283768:	00bfff84 	movi	r2,-2
  28376c:	1884703a 	and	r2,r3,r2
  283770:	1001703a 	wrctl	status,r2
  
  return context;
  283774:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  283778:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  28377c:	00800a74 	movhi	r2,41
  283780:	10b8d604 	addi	r2,r2,-7336
  283784:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  283788:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  28378c:	e0fffc17 	ldw	r3,-16(fp)
  283790:	e0bff917 	ldw	r2,-28(fp)
  283794:	1885883a 	add	r2,r3,r2
  283798:	10c00044 	addi	r3,r2,1
  28379c:	e0bffb17 	ldw	r2,-20(fp)
  2837a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  2837a4:	e0bffb17 	ldw	r2,-20(fp)
  2837a8:	10c00217 	ldw	r3,8(r2)
  2837ac:	e0bff917 	ldw	r2,-28(fp)
  2837b0:	1880042e 	bgeu	r3,r2,2837c4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  2837b4:	e0fffb17 	ldw	r3,-20(fp)
  2837b8:	00800044 	movi	r2,1
  2837bc:	18800405 	stb	r2,16(r3)
  2837c0:	00000206 	br	2837cc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  2837c4:	e0bffb17 	ldw	r2,-20(fp)
  2837c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  2837cc:	e0fffb17 	ldw	r3,-20(fp)
  2837d0:	00800a74 	movhi	r2,41
  2837d4:	10b1e004 	addi	r2,r2,-14464
  2837d8:	e0bff615 	stw	r2,-40(fp)
  2837dc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  2837e0:	e0fff717 	ldw	r3,-36(fp)
  2837e4:	e0bff617 	ldw	r2,-40(fp)
  2837e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  2837ec:	e0bff617 	ldw	r2,-40(fp)
  2837f0:	10c00017 	ldw	r3,0(r2)
  2837f4:	e0bff717 	ldw	r2,-36(fp)
  2837f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  2837fc:	e0bff617 	ldw	r2,-40(fp)
  283800:	10c00017 	ldw	r3,0(r2)
  283804:	e0bff717 	ldw	r2,-36(fp)
  283808:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  28380c:	e0fff617 	ldw	r3,-40(fp)
  283810:	e0bff717 	ldw	r2,-36(fp)
  283814:	18800015 	stw	r2,0(r3)
  283818:	e0bffa17 	ldw	r2,-24(fp)
  28381c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  283820:	e0bff517 	ldw	r2,-44(fp)
  283824:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  283828:	e03fff15 	stw	zero,-4(fp)
  28382c:	00000506 	br	283844 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  283830:	00bffa84 	movi	r2,-22
  283834:	e0bfff15 	stw	r2,-4(fp)
  283838:	00000206 	br	283844 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  28383c:	00bfde84 	movi	r2,-134
  283840:	e0bfff15 	stw	r2,-4(fp)
  283844:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  283848:	e037883a 	mov	sp,fp
  28384c:	df000017 	ldw	fp,0(sp)
  283850:	dec00104 	addi	sp,sp,4
  283854:	f800283a 	ret

00283858 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  283858:	defff804 	addi	sp,sp,-32
  28385c:	dfc00715 	stw	ra,28(sp)
  283860:	df000615 	stw	fp,24(sp)
  283864:	df000604 	addi	fp,sp,24
  283868:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  28386c:	e0bffc17 	ldw	r2,-16(fp)
  283870:	1004803a 	cmplt	r2,r2,zero
  283874:	1000081e 	bne	r2,zero,283898 <close+0x40>
  283878:	e0bffc17 	ldw	r2,-16(fp)
  28387c:	10800324 	muli	r2,r2,12
  283880:	1007883a 	mov	r3,r2
  283884:	00800a74 	movhi	r2,41
  283888:	10af7704 	addi	r2,r2,-16932
  28388c:	1887883a 	add	r3,r3,r2
  283890:	e0ffff15 	stw	r3,-4(fp)
  283894:	00000106 	br	28389c <close+0x44>
  283898:	e03fff15 	stw	zero,-4(fp)
  28389c:	e0bfff17 	ldw	r2,-4(fp)
  2838a0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  2838a4:	e0bffb17 	ldw	r2,-20(fp)
  2838a8:	1005003a 	cmpeq	r2,r2,zero
  2838ac:	10001d1e 	bne	r2,zero,283924 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  2838b0:	e0bffb17 	ldw	r2,-20(fp)
  2838b4:	10800017 	ldw	r2,0(r2)
  2838b8:	10800417 	ldw	r2,16(r2)
  2838bc:	1005003a 	cmpeq	r2,r2,zero
  2838c0:	1000071e 	bne	r2,zero,2838e0 <close+0x88>
  2838c4:	e0bffb17 	ldw	r2,-20(fp)
  2838c8:	10800017 	ldw	r2,0(r2)
  2838cc:	10800417 	ldw	r2,16(r2)
  2838d0:	e13ffb17 	ldw	r4,-20(fp)
  2838d4:	103ee83a 	callr	r2
  2838d8:	e0bffe15 	stw	r2,-8(fp)
  2838dc:	00000106 	br	2838e4 <close+0x8c>
  2838e0:	e03ffe15 	stw	zero,-8(fp)
  2838e4:	e0bffe17 	ldw	r2,-8(fp)
  2838e8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  2838ec:	e13ffc17 	ldw	r4,-16(fp)
  2838f0:	028425c0 	call	28425c <alt_release_fd>
    if (rval < 0)
  2838f4:	e0bffa17 	ldw	r2,-24(fp)
  2838f8:	1004403a 	cmpge	r2,r2,zero
  2838fc:	1000071e 	bne	r2,zero,28391c <close+0xc4>
    {
      ALT_ERRNO = -rval;
  283900:	02839540 	call	283954 <alt_get_errno>
  283904:	e0fffa17 	ldw	r3,-24(fp)
  283908:	00c7c83a 	sub	r3,zero,r3
  28390c:	10c00015 	stw	r3,0(r2)
      return -1;
  283910:	00bfffc4 	movi	r2,-1
  283914:	e0bffd15 	stw	r2,-12(fp)
  283918:	00000806 	br	28393c <close+0xe4>
    }
    return 0;
  28391c:	e03ffd15 	stw	zero,-12(fp)
  283920:	00000606 	br	28393c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  283924:	02839540 	call	283954 <alt_get_errno>
  283928:	1007883a 	mov	r3,r2
  28392c:	00801444 	movi	r2,81
  283930:	18800015 	stw	r2,0(r3)
    return -1;
  283934:	00bfffc4 	movi	r2,-1
  283938:	e0bffd15 	stw	r2,-12(fp)
  28393c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  283940:	e037883a 	mov	sp,fp
  283944:	dfc00117 	ldw	ra,4(sp)
  283948:	df000017 	ldw	fp,0(sp)
  28394c:	dec00204 	addi	sp,sp,8
  283950:	f800283a 	ret

00283954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  283954:	defffd04 	addi	sp,sp,-12
  283958:	dfc00215 	stw	ra,8(sp)
  28395c:	df000115 	stw	fp,4(sp)
  283960:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  283964:	00800a74 	movhi	r2,41
  283968:	10b1de04 	addi	r2,r2,-14472
  28396c:	10800017 	ldw	r2,0(r2)
  283970:	1005003a 	cmpeq	r2,r2,zero
  283974:	1000061e 	bne	r2,zero,283990 <alt_get_errno+0x3c>
  283978:	00800a74 	movhi	r2,41
  28397c:	10b1de04 	addi	r2,r2,-14472
  283980:	10800017 	ldw	r2,0(r2)
  283984:	103ee83a 	callr	r2
  283988:	e0bfff15 	stw	r2,-4(fp)
  28398c:	00000306 	br	28399c <alt_get_errno+0x48>
  283990:	00800a74 	movhi	r2,41
  283994:	10b8d704 	addi	r2,r2,-7332
  283998:	e0bfff15 	stw	r2,-4(fp)
  28399c:	e0bfff17 	ldw	r2,-4(fp)
}
  2839a0:	e037883a 	mov	sp,fp
  2839a4:	dfc00117 	ldw	ra,4(sp)
  2839a8:	df000017 	ldw	fp,0(sp)
  2839ac:	dec00204 	addi	sp,sp,8
  2839b0:	f800283a 	ret

002839b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  2839b4:	deffff04 	addi	sp,sp,-4
  2839b8:	df000015 	stw	fp,0(sp)
  2839bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  2839c0:	e037883a 	mov	sp,fp
  2839c4:	df000017 	ldw	fp,0(sp)
  2839c8:	dec00104 	addi	sp,sp,4
  2839cc:	f800283a 	ret

002839d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  2839d0:	defffc04 	addi	sp,sp,-16
  2839d4:	df000315 	stw	fp,12(sp)
  2839d8:	df000304 	addi	fp,sp,12
  2839dc:	e13ffd15 	stw	r4,-12(fp)
  2839e0:	e17ffe15 	stw	r5,-8(fp)
  2839e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
  2839e8:	e0bfff17 	ldw	r2,-4(fp)
}
  2839ec:	e037883a 	mov	sp,fp
  2839f0:	df000017 	ldw	fp,0(sp)
  2839f4:	dec00104 	addi	sp,sp,4
  2839f8:	f800283a 	ret

002839fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  2839fc:	defff904 	addi	sp,sp,-28
  283a00:	dfc00615 	stw	ra,24(sp)
  283a04:	df000515 	stw	fp,20(sp)
  283a08:	df000504 	addi	fp,sp,20
  283a0c:	e13ffd15 	stw	r4,-12(fp)
  283a10:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  283a14:	e0bffd17 	ldw	r2,-12(fp)
  283a18:	1005003a 	cmpeq	r2,r2,zero
  283a1c:	1000041e 	bne	r2,zero,283a30 <alt_dev_llist_insert+0x34>
  283a20:	e0bffd17 	ldw	r2,-12(fp)
  283a24:	10800217 	ldw	r2,8(r2)
  283a28:	1004c03a 	cmpne	r2,r2,zero
  283a2c:	1000071e 	bne	r2,zero,283a4c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  283a30:	0283ab00 	call	283ab0 <alt_get_errno>
  283a34:	1007883a 	mov	r3,r2
  283a38:	00800584 	movi	r2,22
  283a3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  283a40:	00bffa84 	movi	r2,-22
  283a44:	e0bfff15 	stw	r2,-4(fp)
  283a48:	00001306 	br	283a98 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  283a4c:	e0fffd17 	ldw	r3,-12(fp)
  283a50:	e0bffe17 	ldw	r2,-8(fp)
  283a54:	e0bffb15 	stw	r2,-20(fp)
  283a58:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  283a5c:	e0fffc17 	ldw	r3,-16(fp)
  283a60:	e0bffb17 	ldw	r2,-20(fp)
  283a64:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  283a68:	e0bffb17 	ldw	r2,-20(fp)
  283a6c:	10c00017 	ldw	r3,0(r2)
  283a70:	e0bffc17 	ldw	r2,-16(fp)
  283a74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  283a78:	e0bffb17 	ldw	r2,-20(fp)
  283a7c:	10c00017 	ldw	r3,0(r2)
  283a80:	e0bffc17 	ldw	r2,-16(fp)
  283a84:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  283a88:	e0fffb17 	ldw	r3,-20(fp)
  283a8c:	e0bffc17 	ldw	r2,-16(fp)
  283a90:	18800015 	stw	r2,0(r3)

  return 0;  
  283a94:	e03fff15 	stw	zero,-4(fp)
  283a98:	e0bfff17 	ldw	r2,-4(fp)
}
  283a9c:	e037883a 	mov	sp,fp
  283aa0:	dfc00117 	ldw	ra,4(sp)
  283aa4:	df000017 	ldw	fp,0(sp)
  283aa8:	dec00204 	addi	sp,sp,8
  283aac:	f800283a 	ret

00283ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  283ab0:	defffd04 	addi	sp,sp,-12
  283ab4:	dfc00215 	stw	ra,8(sp)
  283ab8:	df000115 	stw	fp,4(sp)
  283abc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  283ac0:	00800a74 	movhi	r2,41
  283ac4:	10b1de04 	addi	r2,r2,-14472
  283ac8:	10800017 	ldw	r2,0(r2)
  283acc:	1005003a 	cmpeq	r2,r2,zero
  283ad0:	1000061e 	bne	r2,zero,283aec <alt_get_errno+0x3c>
  283ad4:	00800a74 	movhi	r2,41
  283ad8:	10b1de04 	addi	r2,r2,-14472
  283adc:	10800017 	ldw	r2,0(r2)
  283ae0:	103ee83a 	callr	r2
  283ae4:	e0bfff15 	stw	r2,-4(fp)
  283ae8:	00000306 	br	283af8 <alt_get_errno+0x48>
  283aec:	00800a74 	movhi	r2,41
  283af0:	10b8d704 	addi	r2,r2,-7332
  283af4:	e0bfff15 	stw	r2,-4(fp)
  283af8:	e0bfff17 	ldw	r2,-4(fp)
}
  283afc:	e037883a 	mov	sp,fp
  283b00:	dfc00117 	ldw	ra,4(sp)
  283b04:	df000017 	ldw	fp,0(sp)
  283b08:	dec00204 	addi	sp,sp,8
  283b0c:	f800283a 	ret

00283b10 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  283b10:	defffd04 	addi	sp,sp,-12
  283b14:	dfc00215 	stw	ra,8(sp)
  283b18:	df000115 	stw	fp,4(sp)
  283b1c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  283b20:	00bfff04 	movi	r2,-4
  283b24:	00c00a34 	movhi	r3,40
  283b28:	18dc7c04 	addi	r3,r3,29168
  283b2c:	1885883a 	add	r2,r3,r2
  283b30:	e0bfff15 	stw	r2,-4(fp)
  283b34:	00000606 	br	283b50 <_do_ctors+0x40>
        (*ctor) (); 
  283b38:	e0bfff17 	ldw	r2,-4(fp)
  283b3c:	10800017 	ldw	r2,0(r2)
  283b40:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  283b44:	e0bfff17 	ldw	r2,-4(fp)
  283b48:	10bfff04 	addi	r2,r2,-4
  283b4c:	e0bfff15 	stw	r2,-4(fp)
  283b50:	e0ffff17 	ldw	r3,-4(fp)
  283b54:	00800a34 	movhi	r2,40
  283b58:	109c7b04 	addi	r2,r2,29164
  283b5c:	18bff62e 	bgeu	r3,r2,283b38 <_do_ctors+0x28>
        (*ctor) (); 
}
  283b60:	e037883a 	mov	sp,fp
  283b64:	dfc00117 	ldw	ra,4(sp)
  283b68:	df000017 	ldw	fp,0(sp)
  283b6c:	dec00204 	addi	sp,sp,8
  283b70:	f800283a 	ret

00283b74 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  283b74:	defffd04 	addi	sp,sp,-12
  283b78:	dfc00215 	stw	ra,8(sp)
  283b7c:	df000115 	stw	fp,4(sp)
  283b80:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  283b84:	00bfff04 	movi	r2,-4
  283b88:	00c00a34 	movhi	r3,40
  283b8c:	18dc7c04 	addi	r3,r3,29168
  283b90:	1885883a 	add	r2,r3,r2
  283b94:	e0bfff15 	stw	r2,-4(fp)
  283b98:	00000606 	br	283bb4 <_do_dtors+0x40>
        (*dtor) (); 
  283b9c:	e0bfff17 	ldw	r2,-4(fp)
  283ba0:	10800017 	ldw	r2,0(r2)
  283ba4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  283ba8:	e0bfff17 	ldw	r2,-4(fp)
  283bac:	10bfff04 	addi	r2,r2,-4
  283bb0:	e0bfff15 	stw	r2,-4(fp)
  283bb4:	e0ffff17 	ldw	r3,-4(fp)
  283bb8:	00800a34 	movhi	r2,40
  283bbc:	109c7c04 	addi	r2,r2,29168
  283bc0:	18bff62e 	bgeu	r3,r2,283b9c <_do_dtors+0x28>
        (*dtor) (); 
}
  283bc4:	e037883a 	mov	sp,fp
  283bc8:	dfc00117 	ldw	ra,4(sp)
  283bcc:	df000017 	ldw	fp,0(sp)
  283bd0:	dec00204 	addi	sp,sp,8
  283bd4:	f800283a 	ret

00283bd8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  283bd8:	defff904 	addi	sp,sp,-28
  283bdc:	dfc00615 	stw	ra,24(sp)
  283be0:	df000515 	stw	fp,20(sp)
  283be4:	df000504 	addi	fp,sp,20
  283be8:	e13ffd15 	stw	r4,-12(fp)
  283bec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  283bf0:	e0bffe17 	ldw	r2,-8(fp)
  283bf4:	10800017 	ldw	r2,0(r2)
  283bf8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  283bfc:	e13ffd17 	ldw	r4,-12(fp)
  283c00:	0284a500 	call	284a50 <strlen>
  283c04:	10800044 	addi	r2,r2,1
  283c08:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  283c0c:	00000d06 	br	283c44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  283c10:	e0bffc17 	ldw	r2,-16(fp)
  283c14:	11000217 	ldw	r4,8(r2)
  283c18:	e1bffb17 	ldw	r6,-20(fp)
  283c1c:	e17ffd17 	ldw	r5,-12(fp)
  283c20:	02847340 	call	284734 <memcmp>
  283c24:	1004c03a 	cmpne	r2,r2,zero
  283c28:	1000031e 	bne	r2,zero,283c38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  283c2c:	e0bffc17 	ldw	r2,-16(fp)
  283c30:	e0bfff15 	stw	r2,-4(fp)
  283c34:	00000706 	br	283c54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  283c38:	e0bffc17 	ldw	r2,-16(fp)
  283c3c:	10800017 	ldw	r2,0(r2)
  283c40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  283c44:	e0fffe17 	ldw	r3,-8(fp)
  283c48:	e0bffc17 	ldw	r2,-16(fp)
  283c4c:	10fff01e 	bne	r2,r3,283c10 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  283c50:	e03fff15 	stw	zero,-4(fp)
  283c54:	e0bfff17 	ldw	r2,-4(fp)
}
  283c58:	e037883a 	mov	sp,fp
  283c5c:	dfc00117 	ldw	ra,4(sp)
  283c60:	df000017 	ldw	fp,0(sp)
  283c64:	dec00204 	addi	sp,sp,8
  283c68:	f800283a 	ret

00283c6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  283c6c:	defffe04 	addi	sp,sp,-8
  283c70:	dfc00115 	stw	ra,4(sp)
  283c74:	df000015 	stw	fp,0(sp)
  283c78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  283c7c:	0009883a 	mov	r4,zero
  283c80:	01440004 	movi	r5,4096
  283c84:	02846580 	call	284658 <alt_icache_flush>
#endif
}
  283c88:	e037883a 	mov	sp,fp
  283c8c:	dfc00117 	ldw	ra,4(sp)
  283c90:	df000017 	ldw	fp,0(sp)
  283c94:	dec00204 	addi	sp,sp,8
  283c98:	f800283a 	ret

00283c9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  283c9c:	defff904 	addi	sp,sp,-28
  283ca0:	dfc00615 	stw	ra,24(sp)
  283ca4:	df000515 	stw	fp,20(sp)
  283ca8:	df000504 	addi	fp,sp,20
  283cac:	e13ffc15 	stw	r4,-16(fp)
  283cb0:	e17ffd15 	stw	r5,-12(fp)
  283cb4:	e1bffe15 	stw	r6,-8(fp)
  283cb8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  283cbc:	e13ffd17 	ldw	r4,-12(fp)
  283cc0:	e17ffe17 	ldw	r5,-8(fp)
  283cc4:	e1bfff17 	ldw	r6,-4(fp)
  283cc8:	02840740 	call	284074 <open>
  283ccc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  283cd0:	e0bffb17 	ldw	r2,-20(fp)
  283cd4:	1004803a 	cmplt	r2,r2,zero
  283cd8:	10001c1e 	bne	r2,zero,283d4c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  283cdc:	e0bffb17 	ldw	r2,-20(fp)
  283ce0:	00c00a74 	movhi	r3,41
  283ce4:	18ef7704 	addi	r3,r3,-16932
  283ce8:	10800324 	muli	r2,r2,12
  283cec:	10c5883a 	add	r2,r2,r3
  283cf0:	10c00017 	ldw	r3,0(r2)
  283cf4:	e0bffc17 	ldw	r2,-16(fp)
  283cf8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  283cfc:	e0bffb17 	ldw	r2,-20(fp)
  283d00:	00c00a74 	movhi	r3,41
  283d04:	18ef7704 	addi	r3,r3,-16932
  283d08:	10800324 	muli	r2,r2,12
  283d0c:	10c5883a 	add	r2,r2,r3
  283d10:	10800104 	addi	r2,r2,4
  283d14:	10c00017 	ldw	r3,0(r2)
  283d18:	e0bffc17 	ldw	r2,-16(fp)
  283d1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  283d20:	e0bffb17 	ldw	r2,-20(fp)
  283d24:	00c00a74 	movhi	r3,41
  283d28:	18ef7704 	addi	r3,r3,-16932
  283d2c:	10800324 	muli	r2,r2,12
  283d30:	10c5883a 	add	r2,r2,r3
  283d34:	10800204 	addi	r2,r2,8
  283d38:	10c00017 	ldw	r3,0(r2)
  283d3c:	e0bffc17 	ldw	r2,-16(fp)
  283d40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  283d44:	e13ffb17 	ldw	r4,-20(fp)
  283d48:	028425c0 	call	28425c <alt_release_fd>
  }
} 
  283d4c:	e037883a 	mov	sp,fp
  283d50:	dfc00117 	ldw	ra,4(sp)
  283d54:	df000017 	ldw	fp,0(sp)
  283d58:	dec00204 	addi	sp,sp,8
  283d5c:	f800283a 	ret

00283d60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  283d60:	defffb04 	addi	sp,sp,-20
  283d64:	dfc00415 	stw	ra,16(sp)
  283d68:	df000315 	stw	fp,12(sp)
  283d6c:	df000304 	addi	fp,sp,12
  283d70:	e13ffd15 	stw	r4,-12(fp)
  283d74:	e17ffe15 	stw	r5,-8(fp)
  283d78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  283d7c:	01000a74 	movhi	r4,41
  283d80:	212f7a04 	addi	r4,r4,-16920
  283d84:	e17ffd17 	ldw	r5,-12(fp)
  283d88:	01800044 	movi	r6,1
  283d8c:	01c07fc4 	movi	r7,511
  283d90:	0283c9c0 	call	283c9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  283d94:	01000a74 	movhi	r4,41
  283d98:	212f7704 	addi	r4,r4,-16932
  283d9c:	e17ffe17 	ldw	r5,-8(fp)
  283da0:	000d883a 	mov	r6,zero
  283da4:	01c07fc4 	movi	r7,511
  283da8:	0283c9c0 	call	283c9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  283dac:	01000a74 	movhi	r4,41
  283db0:	212f7d04 	addi	r4,r4,-16908
  283db4:	e17fff17 	ldw	r5,-4(fp)
  283db8:	01800044 	movi	r6,1
  283dbc:	01c07fc4 	movi	r7,511
  283dc0:	0283c9c0 	call	283c9c <alt_open_fd>
}  
  283dc4:	e037883a 	mov	sp,fp
  283dc8:	dfc00117 	ldw	ra,4(sp)
  283dcc:	df000017 	ldw	fp,0(sp)
  283dd0:	dec00204 	addi	sp,sp,8
  283dd4:	f800283a 	ret

00283dd8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  283dd8:	deffef04 	addi	sp,sp,-68
  283ddc:	df001015 	stw	fp,64(sp)
  283de0:	df001004 	addi	fp,sp,64
  283de4:	e13ffc15 	stw	r4,-16(fp)
  283de8:	e17ffd15 	stw	r5,-12(fp)
  283dec:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
  283df0:	00bffa84 	movi	r2,-22
  283df4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  283df8:	e0bffc17 	ldw	r2,-16(fp)
  283dfc:	10800828 	cmpgeui	r2,r2,32
  283e00:	1000601e 	bne	r2,zero,283f84 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  283e04:	0005303a 	rdctl	r2,status
  283e08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  283e0c:	e0fff917 	ldw	r3,-28(fp)
  283e10:	00bfff84 	movi	r2,-2
  283e14:	1884703a 	and	r2,r3,r2
  283e18:	1001703a 	wrctl	status,r2
  
  return context;
  283e1c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  283e20:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
  283e24:	e0bffc17 	ldw	r2,-16(fp)
  283e28:	00c00a74 	movhi	r3,41
  283e2c:	18f8e504 	addi	r3,r3,-7276
  283e30:	100490fa 	slli	r2,r2,3
  283e34:	10c7883a 	add	r3,r2,r3
  283e38:	e0bffe17 	ldw	r2,-8(fp)
  283e3c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  283e40:	e0bffc17 	ldw	r2,-16(fp)
  283e44:	00c00a74 	movhi	r3,41
  283e48:	18f8e504 	addi	r3,r3,-7276
  283e4c:	100490fa 	slli	r2,r2,3
  283e50:	10c5883a 	add	r2,r2,r3
  283e54:	10c00104 	addi	r3,r2,4
  283e58:	e0bffd17 	ldw	r2,-12(fp)
  283e5c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  283e60:	e0bffe17 	ldw	r2,-8(fp)
  283e64:	1005003a 	cmpeq	r2,r2,zero
  283e68:	1000201e 	bne	r2,zero,283eec <alt_irq_register+0x114>
  283e6c:	e0bffc17 	ldw	r2,-16(fp)
  283e70:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  283e74:	0005303a 	rdctl	r2,status
  283e78:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  283e7c:	e0fff617 	ldw	r3,-40(fp)
  283e80:	00bfff84 	movi	r2,-2
  283e84:	1884703a 	and	r2,r3,r2
  283e88:	1001703a 	wrctl	status,r2
  
  return context;
  283e8c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  283e90:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  283e94:	e0fff717 	ldw	r3,-36(fp)
  283e98:	00800044 	movi	r2,1
  283e9c:	10c4983a 	sll	r2,r2,r3
  283ea0:	1007883a 	mov	r3,r2
  283ea4:	00800a74 	movhi	r2,41
  283ea8:	10b8d404 	addi	r2,r2,-7344
  283eac:	10800017 	ldw	r2,0(r2)
  283eb0:	1886b03a 	or	r3,r3,r2
  283eb4:	00800a74 	movhi	r2,41
  283eb8:	10b8d404 	addi	r2,r2,-7344
  283ebc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  283ec0:	00800a74 	movhi	r2,41
  283ec4:	10b8d404 	addi	r2,r2,-7344
  283ec8:	10800017 	ldw	r2,0(r2)
  283ecc:	100170fa 	wrctl	ienable,r2
  283ed0:	e0bff817 	ldw	r2,-32(fp)
  283ed4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  283ed8:	e0bff517 	ldw	r2,-44(fp)
  283edc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  283ee0:	0005883a 	mov	r2,zero
  283ee4:	e0bfff15 	stw	r2,-4(fp)
  283ee8:	00002006 	br	283f6c <alt_irq_register+0x194>
  283eec:	e0bffc17 	ldw	r2,-16(fp)
  283ef0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  283ef4:	0005303a 	rdctl	r2,status
  283ef8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  283efc:	e0fff217 	ldw	r3,-56(fp)
  283f00:	00bfff84 	movi	r2,-2
  283f04:	1884703a 	and	r2,r3,r2
  283f08:	1001703a 	wrctl	status,r2
  
  return context;
  283f0c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  283f10:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
  283f14:	e0fff317 	ldw	r3,-52(fp)
  283f18:	00800044 	movi	r2,1
  283f1c:	10c4983a 	sll	r2,r2,r3
  283f20:	0084303a 	nor	r2,zero,r2
  283f24:	1007883a 	mov	r3,r2
  283f28:	00800a74 	movhi	r2,41
  283f2c:	10b8d404 	addi	r2,r2,-7344
  283f30:	10800017 	ldw	r2,0(r2)
  283f34:	1886703a 	and	r3,r3,r2
  283f38:	00800a74 	movhi	r2,41
  283f3c:	10b8d404 	addi	r2,r2,-7344
  283f40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  283f44:	00800a74 	movhi	r2,41
  283f48:	10b8d404 	addi	r2,r2,-7344
  283f4c:	10800017 	ldw	r2,0(r2)
  283f50:	100170fa 	wrctl	ienable,r2
  283f54:	e0bff417 	ldw	r2,-48(fp)
  283f58:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  283f5c:	e0bff117 	ldw	r2,-60(fp)
  283f60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  283f64:	0005883a 	mov	r2,zero
  283f68:	e0bfff15 	stw	r2,-4(fp)
  283f6c:	e0bfff17 	ldw	r2,-4(fp)
  283f70:	e0bffb15 	stw	r2,-20(fp)
  283f74:	e0bffa17 	ldw	r2,-24(fp)
  283f78:	e0bff015 	stw	r2,-64(fp)
  283f7c:	e0bff017 	ldw	r2,-64(fp)
  283f80:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  283f84:	e0bffb17 	ldw	r2,-20(fp)
}
  283f88:	e037883a 	mov	sp,fp
  283f8c:	df000017 	ldw	fp,0(sp)
  283f90:	dec00104 	addi	sp,sp,4
  283f94:	f800283a 	ret

00283f98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  283f98:	defffc04 	addi	sp,sp,-16
  283f9c:	df000315 	stw	fp,12(sp)
  283fa0:	df000304 	addi	fp,sp,12
  283fa4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  283fa8:	e0bffe17 	ldw	r2,-8(fp)
  283fac:	10800217 	ldw	r2,8(r2)
  283fb0:	10d00034 	orhi	r3,r2,16384
  283fb4:	e0bffe17 	ldw	r2,-8(fp)
  283fb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  283fbc:	e03ffd15 	stw	zero,-12(fp)
  283fc0:	00002006 	br	284044 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  283fc4:	e0bffd17 	ldw	r2,-12(fp)
  283fc8:	00c00a74 	movhi	r3,41
  283fcc:	18ef7704 	addi	r3,r3,-16932
  283fd0:	10800324 	muli	r2,r2,12
  283fd4:	10c5883a 	add	r2,r2,r3
  283fd8:	10c00017 	ldw	r3,0(r2)
  283fdc:	e0bffe17 	ldw	r2,-8(fp)
  283fe0:	10800017 	ldw	r2,0(r2)
  283fe4:	1880141e 	bne	r3,r2,284038 <alt_file_locked+0xa0>
  283fe8:	e0bffd17 	ldw	r2,-12(fp)
  283fec:	00c00a74 	movhi	r3,41
  283ff0:	18ef7704 	addi	r3,r3,-16932
  283ff4:	10800324 	muli	r2,r2,12
  283ff8:	10c5883a 	add	r2,r2,r3
  283ffc:	10800204 	addi	r2,r2,8
  284000:	10800017 	ldw	r2,0(r2)
  284004:	1004403a 	cmpge	r2,r2,zero
  284008:	10000b1e 	bne	r2,zero,284038 <alt_file_locked+0xa0>
  28400c:	e0bffd17 	ldw	r2,-12(fp)
  284010:	10800324 	muli	r2,r2,12
  284014:	1007883a 	mov	r3,r2
  284018:	00800a74 	movhi	r2,41
  28401c:	10af7704 	addi	r2,r2,-16932
  284020:	1887883a 	add	r3,r3,r2
  284024:	e0bffe17 	ldw	r2,-8(fp)
  284028:	18800326 	beq	r3,r2,284038 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  28402c:	00bffcc4 	movi	r2,-13
  284030:	e0bfff15 	stw	r2,-4(fp)
  284034:	00000a06 	br	284060 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  284038:	e0bffd17 	ldw	r2,-12(fp)
  28403c:	10800044 	addi	r2,r2,1
  284040:	e0bffd15 	stw	r2,-12(fp)
  284044:	00800a74 	movhi	r2,41
  284048:	10b1dd04 	addi	r2,r2,-14476
  28404c:	10800017 	ldw	r2,0(r2)
  284050:	1007883a 	mov	r3,r2
  284054:	e0bffd17 	ldw	r2,-12(fp)
  284058:	18bfda2e 	bgeu	r3,r2,283fc4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  28405c:	e03fff15 	stw	zero,-4(fp)
  284060:	e0bfff17 	ldw	r2,-4(fp)
}
  284064:	e037883a 	mov	sp,fp
  284068:	df000017 	ldw	fp,0(sp)
  28406c:	dec00104 	addi	sp,sp,4
  284070:	f800283a 	ret

00284074 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  284074:	defff404 	addi	sp,sp,-48
  284078:	dfc00b15 	stw	ra,44(sp)
  28407c:	df000a15 	stw	fp,40(sp)
  284080:	df000a04 	addi	fp,sp,40
  284084:	e13ffb15 	stw	r4,-20(fp)
  284088:	e17ffc15 	stw	r5,-16(fp)
  28408c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  284090:	00bfffc4 	movi	r2,-1
  284094:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  284098:	00bffb44 	movi	r2,-19
  28409c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  2840a0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  2840a4:	e13ffb17 	ldw	r4,-20(fp)
  2840a8:	01400a74 	movhi	r5,41
  2840ac:	2971db04 	addi	r5,r5,-14484
  2840b0:	0283bd80 	call	283bd8 <alt_find_dev>
  2840b4:	e0bffa15 	stw	r2,-24(fp)
  2840b8:	e0bffa17 	ldw	r2,-24(fp)
  2840bc:	1004c03a 	cmpne	r2,r2,zero
  2840c0:	1000051e 	bne	r2,zero,2840d8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  2840c4:	e13ffb17 	ldw	r4,-20(fp)
  2840c8:	02844800 	call	284480 <alt_find_file>
  2840cc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  2840d0:	00800044 	movi	r2,1
  2840d4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  2840d8:	e0bffa17 	ldw	r2,-24(fp)
  2840dc:	1005003a 	cmpeq	r2,r2,zero
  2840e0:	1000301e 	bne	r2,zero,2841a4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  2840e4:	e13ffa17 	ldw	r4,-24(fp)
  2840e8:	02845a00 	call	2845a0 <alt_get_fd>
  2840ec:	e0bff815 	stw	r2,-32(fp)
  2840f0:	e0bff817 	ldw	r2,-32(fp)
  2840f4:	1004403a 	cmpge	r2,r2,zero
  2840f8:	1000031e 	bne	r2,zero,284108 <open+0x94>
    {
      status = index;
  2840fc:	e0bff817 	ldw	r2,-32(fp)
  284100:	e0bff715 	stw	r2,-36(fp)
  284104:	00002906 	br	2841ac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  284108:	e0bff817 	ldw	r2,-32(fp)
  28410c:	10800324 	muli	r2,r2,12
  284110:	1007883a 	mov	r3,r2
  284114:	00800a74 	movhi	r2,41
  284118:	10af7704 	addi	r2,r2,-16932
  28411c:	1885883a 	add	r2,r3,r2
  284120:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  284124:	e0fffc17 	ldw	r3,-16(fp)
  284128:	00900034 	movhi	r2,16384
  28412c:	10bfffc4 	addi	r2,r2,-1
  284130:	1886703a 	and	r3,r3,r2
  284134:	e0bff917 	ldw	r2,-28(fp)
  284138:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  28413c:	e0bff617 	ldw	r2,-40(fp)
  284140:	1004c03a 	cmpne	r2,r2,zero
  284144:	1000061e 	bne	r2,zero,284160 <open+0xec>
  284148:	e13ff917 	ldw	r4,-28(fp)
  28414c:	0283f980 	call	283f98 <alt_file_locked>
  284150:	e0bff715 	stw	r2,-36(fp)
  284154:	e0bff717 	ldw	r2,-36(fp)
  284158:	1004803a 	cmplt	r2,r2,zero
  28415c:	1000131e 	bne	r2,zero,2841ac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  284160:	e0bffa17 	ldw	r2,-24(fp)
  284164:	10800317 	ldw	r2,12(r2)
  284168:	1005003a 	cmpeq	r2,r2,zero
  28416c:	1000091e 	bne	r2,zero,284194 <open+0x120>
  284170:	e0bffa17 	ldw	r2,-24(fp)
  284174:	10800317 	ldw	r2,12(r2)
  284178:	e13ff917 	ldw	r4,-28(fp)
  28417c:	e17ffb17 	ldw	r5,-20(fp)
  284180:	e1bffc17 	ldw	r6,-16(fp)
  284184:	e1fffd17 	ldw	r7,-12(fp)
  284188:	103ee83a 	callr	r2
  28418c:	e0bfff15 	stw	r2,-4(fp)
  284190:	00000106 	br	284198 <open+0x124>
  284194:	e03fff15 	stw	zero,-4(fp)
  284198:	e0bfff17 	ldw	r2,-4(fp)
  28419c:	e0bff715 	stw	r2,-36(fp)
  2841a0:	00000206 	br	2841ac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  2841a4:	00bffb44 	movi	r2,-19
  2841a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  2841ac:	e0bff717 	ldw	r2,-36(fp)
  2841b0:	1004403a 	cmpge	r2,r2,zero
  2841b4:	1000091e 	bne	r2,zero,2841dc <open+0x168>
  {
    alt_release_fd (index);  
  2841b8:	e13ff817 	ldw	r4,-32(fp)
  2841bc:	028425c0 	call	28425c <alt_release_fd>
    ALT_ERRNO = -status;
  2841c0:	02841fc0 	call	2841fc <alt_get_errno>
  2841c4:	e0fff717 	ldw	r3,-36(fp)
  2841c8:	00c7c83a 	sub	r3,zero,r3
  2841cc:	10c00015 	stw	r3,0(r2)
    return -1;
  2841d0:	00bfffc4 	movi	r2,-1
  2841d4:	e0bffe15 	stw	r2,-8(fp)
  2841d8:	00000206 	br	2841e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  2841dc:	e0bff817 	ldw	r2,-32(fp)
  2841e0:	e0bffe15 	stw	r2,-8(fp)
  2841e4:	e0bffe17 	ldw	r2,-8(fp)
}
  2841e8:	e037883a 	mov	sp,fp
  2841ec:	dfc00117 	ldw	ra,4(sp)
  2841f0:	df000017 	ldw	fp,0(sp)
  2841f4:	dec00204 	addi	sp,sp,8
  2841f8:	f800283a 	ret

002841fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  2841fc:	defffd04 	addi	sp,sp,-12
  284200:	dfc00215 	stw	ra,8(sp)
  284204:	df000115 	stw	fp,4(sp)
  284208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  28420c:	00800a74 	movhi	r2,41
  284210:	10b1de04 	addi	r2,r2,-14472
  284214:	10800017 	ldw	r2,0(r2)
  284218:	1005003a 	cmpeq	r2,r2,zero
  28421c:	1000061e 	bne	r2,zero,284238 <alt_get_errno+0x3c>
  284220:	00800a74 	movhi	r2,41
  284224:	10b1de04 	addi	r2,r2,-14472
  284228:	10800017 	ldw	r2,0(r2)
  28422c:	103ee83a 	callr	r2
  284230:	e0bfff15 	stw	r2,-4(fp)
  284234:	00000306 	br	284244 <alt_get_errno+0x48>
  284238:	00800a74 	movhi	r2,41
  28423c:	10b8d704 	addi	r2,r2,-7332
  284240:	e0bfff15 	stw	r2,-4(fp)
  284244:	e0bfff17 	ldw	r2,-4(fp)
}
  284248:	e037883a 	mov	sp,fp
  28424c:	dfc00117 	ldw	ra,4(sp)
  284250:	df000017 	ldw	fp,0(sp)
  284254:	dec00204 	addi	sp,sp,8
  284258:	f800283a 	ret

0028425c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  28425c:	defffe04 	addi	sp,sp,-8
  284260:	df000115 	stw	fp,4(sp)
  284264:	df000104 	addi	fp,sp,4
  284268:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  28426c:	e0bfff17 	ldw	r2,-4(fp)
  284270:	108000d0 	cmplti	r2,r2,3
  284274:	10000d1e 	bne	r2,zero,2842ac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  284278:	e0bfff17 	ldw	r2,-4(fp)
  28427c:	00c00a74 	movhi	r3,41
  284280:	18ef7704 	addi	r3,r3,-16932
  284284:	10800324 	muli	r2,r2,12
  284288:	10c5883a 	add	r2,r2,r3
  28428c:	10800204 	addi	r2,r2,8
  284290:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  284294:	e0bfff17 	ldw	r2,-4(fp)
  284298:	00c00a74 	movhi	r3,41
  28429c:	18ef7704 	addi	r3,r3,-16932
  2842a0:	10800324 	muli	r2,r2,12
  2842a4:	10c5883a 	add	r2,r2,r3
  2842a8:	10000015 	stw	zero,0(r2)
  }
}
  2842ac:	e037883a 	mov	sp,fp
  2842b0:	df000017 	ldw	fp,0(sp)
  2842b4:	dec00104 	addi	sp,sp,4
  2842b8:	f800283a 	ret

002842bc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  2842bc:	defffa04 	addi	sp,sp,-24
  2842c0:	df000515 	stw	fp,20(sp)
  2842c4:	df000504 	addi	fp,sp,20
  2842c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  2842cc:	0005303a 	rdctl	r2,status
  2842d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  2842d4:	e0fffd17 	ldw	r3,-12(fp)
  2842d8:	00bfff84 	movi	r2,-2
  2842dc:	1884703a 	and	r2,r3,r2
  2842e0:	1001703a 	wrctl	status,r2
  
  return context;
  2842e4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  2842e8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  2842ec:	e0bfff17 	ldw	r2,-4(fp)
  2842f0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  2842f4:	e0bffc17 	ldw	r2,-16(fp)
  2842f8:	10c00017 	ldw	r3,0(r2)
  2842fc:	e0bffc17 	ldw	r2,-16(fp)
  284300:	10800117 	ldw	r2,4(r2)
  284304:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  284308:	e0bffc17 	ldw	r2,-16(fp)
  28430c:	10c00117 	ldw	r3,4(r2)
  284310:	e0bffc17 	ldw	r2,-16(fp)
  284314:	10800017 	ldw	r2,0(r2)
  284318:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  28431c:	e0fffc17 	ldw	r3,-16(fp)
  284320:	e0bffc17 	ldw	r2,-16(fp)
  284324:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  284328:	e0fffc17 	ldw	r3,-16(fp)
  28432c:	e0bffc17 	ldw	r2,-16(fp)
  284330:	18800015 	stw	r2,0(r3)
  284334:	e0bffe17 	ldw	r2,-8(fp)
  284338:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  28433c:	e0bffb17 	ldw	r2,-20(fp)
  284340:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  284344:	e037883a 	mov	sp,fp
  284348:	df000017 	ldw	fp,0(sp)
  28434c:	dec00104 	addi	sp,sp,4
  284350:	f800283a 	ret

00284354 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  284354:	defffb04 	addi	sp,sp,-20
  284358:	dfc00415 	stw	ra,16(sp)
  28435c:	df000315 	stw	fp,12(sp)
  284360:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  284364:	d0a00717 	ldw	r2,-32740(gp)
  284368:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  28436c:	d0a6fd17 	ldw	r2,-25612(gp)
  284370:	10800044 	addi	r2,r2,1
  284374:	d0a6fd15 	stw	r2,-25612(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  284378:	00003106 	br	284440 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  28437c:	e0bffe17 	ldw	r2,-8(fp)
  284380:	10800017 	ldw	r2,0(r2)
  284384:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  284388:	e0bffe17 	ldw	r2,-8(fp)
  28438c:	10800403 	ldbu	r2,16(r2)
  284390:	10803fcc 	andi	r2,r2,255
  284394:	1005003a 	cmpeq	r2,r2,zero
  284398:	1000051e 	bne	r2,zero,2843b0 <alt_tick+0x5c>
  28439c:	d0a6fd17 	ldw	r2,-25612(gp)
  2843a0:	1004c03a 	cmpne	r2,r2,zero
  2843a4:	1000021e 	bne	r2,zero,2843b0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  2843a8:	e0bffe17 	ldw	r2,-8(fp)
  2843ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  2843b0:	e0bffe17 	ldw	r2,-8(fp)
  2843b4:	10c00217 	ldw	r3,8(r2)
  2843b8:	d0a6fd17 	ldw	r2,-25612(gp)
  2843bc:	10c01e36 	bltu	r2,r3,284438 <alt_tick+0xe4>
  2843c0:	e0bffe17 	ldw	r2,-8(fp)
  2843c4:	10800403 	ldbu	r2,16(r2)
  2843c8:	10803fcc 	andi	r2,r2,255
  2843cc:	1004c03a 	cmpne	r2,r2,zero
  2843d0:	1000191e 	bne	r2,zero,284438 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  2843d4:	e0bffe17 	ldw	r2,-8(fp)
  2843d8:	10c00317 	ldw	r3,12(r2)
  2843dc:	e0bffe17 	ldw	r2,-8(fp)
  2843e0:	11000517 	ldw	r4,20(r2)
  2843e4:	183ee83a 	callr	r3
  2843e8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  2843ec:	e0bffd17 	ldw	r2,-12(fp)
  2843f0:	1004c03a 	cmpne	r2,r2,zero
  2843f4:	1000031e 	bne	r2,zero,284404 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  2843f8:	e13ffe17 	ldw	r4,-8(fp)
  2843fc:	02842bc0 	call	2842bc <alt_alarm_stop>
  284400:	00000d06 	br	284438 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  284404:	e0bffe17 	ldw	r2,-8(fp)
  284408:	10c00217 	ldw	r3,8(r2)
  28440c:	e0bffd17 	ldw	r2,-12(fp)
  284410:	1887883a 	add	r3,r3,r2
  284414:	e0bffe17 	ldw	r2,-8(fp)
  284418:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  28441c:	e0bffe17 	ldw	r2,-8(fp)
  284420:	10c00217 	ldw	r3,8(r2)
  284424:	d0a6fd17 	ldw	r2,-25612(gp)
  284428:	1880032e 	bgeu	r3,r2,284438 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  28442c:	e0fffe17 	ldw	r3,-8(fp)
  284430:	00800044 	movi	r2,1
  284434:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  284438:	e0bfff17 	ldw	r2,-4(fp)
  28443c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  284440:	d0e00704 	addi	r3,gp,-32740
  284444:	e0bffe17 	ldw	r2,-8(fp)
  284448:	10ffcc1e 	bne	r2,r3,28437c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  28444c:	e037883a 	mov	sp,fp
  284450:	dfc00117 	ldw	ra,4(sp)
  284454:	df000017 	ldw	fp,0(sp)
  284458:	dec00204 	addi	sp,sp,8
  28445c:	f800283a 	ret

00284460 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  284460:	deffff04 	addi	sp,sp,-4
  284464:	df000015 	stw	fp,0(sp)
  284468:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  28446c:	000170fa 	wrctl	ienable,zero
}
  284470:	e037883a 	mov	sp,fp
  284474:	df000017 	ldw	fp,0(sp)
  284478:	dec00104 	addi	sp,sp,4
  28447c:	f800283a 	ret

00284480 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  284480:	defffa04 	addi	sp,sp,-24
  284484:	dfc00515 	stw	ra,20(sp)
  284488:	df000415 	stw	fp,16(sp)
  28448c:	df000404 	addi	fp,sp,16
  284490:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  284494:	00800a74 	movhi	r2,41
  284498:	10b1d904 	addi	r2,r2,-14492
  28449c:	10800017 	ldw	r2,0(r2)
  2844a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  2844a4:	00003306 	br	284574 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  2844a8:	e0bffd17 	ldw	r2,-12(fp)
  2844ac:	11000217 	ldw	r4,8(r2)
  2844b0:	0284a500 	call	284a50 <strlen>
  2844b4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  2844b8:	e0bffd17 	ldw	r2,-12(fp)
  2844bc:	10c00217 	ldw	r3,8(r2)
  2844c0:	e0bffc17 	ldw	r2,-16(fp)
  2844c4:	1885883a 	add	r2,r3,r2
  2844c8:	10bfffc4 	addi	r2,r2,-1
  2844cc:	10800003 	ldbu	r2,0(r2)
  2844d0:	10803fcc 	andi	r2,r2,255
  2844d4:	1080201c 	xori	r2,r2,128
  2844d8:	10bfe004 	addi	r2,r2,-128
  2844dc:	10800bd8 	cmpnei	r2,r2,47
  2844e0:	1000031e 	bne	r2,zero,2844f0 <alt_find_file+0x70>
    {
      len -= 1;
  2844e4:	e0bffc17 	ldw	r2,-16(fp)
  2844e8:	10bfffc4 	addi	r2,r2,-1
  2844ec:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  2844f0:	e0bffc17 	ldw	r2,-16(fp)
  2844f4:	1007883a 	mov	r3,r2
  2844f8:	e0bffe17 	ldw	r2,-8(fp)
  2844fc:	1885883a 	add	r2,r3,r2
  284500:	10800003 	ldbu	r2,0(r2)
  284504:	10803fcc 	andi	r2,r2,255
  284508:	1080201c 	xori	r2,r2,128
  28450c:	10bfe004 	addi	r2,r2,-128
  284510:	10800be0 	cmpeqi	r2,r2,47
  284514:	10000a1e 	bne	r2,zero,284540 <alt_find_file+0xc0>
  284518:	e0bffc17 	ldw	r2,-16(fp)
  28451c:	1007883a 	mov	r3,r2
  284520:	e0bffe17 	ldw	r2,-8(fp)
  284524:	1885883a 	add	r2,r3,r2
  284528:	10800003 	ldbu	r2,0(r2)
  28452c:	10803fcc 	andi	r2,r2,255
  284530:	1080201c 	xori	r2,r2,128
  284534:	10bfe004 	addi	r2,r2,-128
  284538:	1004c03a 	cmpne	r2,r2,zero
  28453c:	10000a1e 	bne	r2,zero,284568 <alt_find_file+0xe8>
  284540:	e0bffd17 	ldw	r2,-12(fp)
  284544:	11000217 	ldw	r4,8(r2)
  284548:	e1bffc17 	ldw	r6,-16(fp)
  28454c:	e17ffe17 	ldw	r5,-8(fp)
  284550:	02847340 	call	284734 <memcmp>
  284554:	1004c03a 	cmpne	r2,r2,zero
  284558:	1000031e 	bne	r2,zero,284568 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  28455c:	e0bffd17 	ldw	r2,-12(fp)
  284560:	e0bfff15 	stw	r2,-4(fp)
  284564:	00000806 	br	284588 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  284568:	e0bffd17 	ldw	r2,-12(fp)
  28456c:	10800017 	ldw	r2,0(r2)
  284570:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  284574:	00c00a74 	movhi	r3,41
  284578:	18f1d904 	addi	r3,r3,-14492
  28457c:	e0bffd17 	ldw	r2,-12(fp)
  284580:	10ffc91e 	bne	r2,r3,2844a8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  284584:	e03fff15 	stw	zero,-4(fp)
  284588:	e0bfff17 	ldw	r2,-4(fp)
}
  28458c:	e037883a 	mov	sp,fp
  284590:	dfc00117 	ldw	ra,4(sp)
  284594:	df000017 	ldw	fp,0(sp)
  284598:	dec00204 	addi	sp,sp,8
  28459c:	f800283a 	ret

002845a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  2845a0:	defffc04 	addi	sp,sp,-16
  2845a4:	df000315 	stw	fp,12(sp)
  2845a8:	df000304 	addi	fp,sp,12
  2845ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  2845b0:	00bffa04 	movi	r2,-24
  2845b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  2845b8:	e03ffe15 	stw	zero,-8(fp)
  2845bc:	00001e06 	br	284638 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  2845c0:	e0bffe17 	ldw	r2,-8(fp)
  2845c4:	00c00a74 	movhi	r3,41
  2845c8:	18ef7704 	addi	r3,r3,-16932
  2845cc:	10800324 	muli	r2,r2,12
  2845d0:	10c5883a 	add	r2,r2,r3
  2845d4:	10800017 	ldw	r2,0(r2)
  2845d8:	1004c03a 	cmpne	r2,r2,zero
  2845dc:	1000131e 	bne	r2,zero,28462c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  2845e0:	e0bffe17 	ldw	r2,-8(fp)
  2845e4:	00c00a74 	movhi	r3,41
  2845e8:	18ef7704 	addi	r3,r3,-16932
  2845ec:	10800324 	muli	r2,r2,12
  2845f0:	10c7883a 	add	r3,r2,r3
  2845f4:	e0bfff17 	ldw	r2,-4(fp)
  2845f8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  2845fc:	00800a74 	movhi	r2,41
  284600:	10b1dd04 	addi	r2,r2,-14476
  284604:	10c00017 	ldw	r3,0(r2)
  284608:	e0bffe17 	ldw	r2,-8(fp)
  28460c:	1880040e 	bge	r3,r2,284620 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  284610:	00c00a74 	movhi	r3,41
  284614:	18f1dd04 	addi	r3,r3,-14476
  284618:	e0bffe17 	ldw	r2,-8(fp)
  28461c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  284620:	e0bffe17 	ldw	r2,-8(fp)
  284624:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  284628:	00000606 	br	284644 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  28462c:	e0bffe17 	ldw	r2,-8(fp)
  284630:	10800044 	addi	r2,r2,1
  284634:	e0bffe15 	stw	r2,-8(fp)
  284638:	e0bffe17 	ldw	r2,-8(fp)
  28463c:	10800810 	cmplti	r2,r2,32
  284640:	103fdf1e 	bne	r2,zero,2845c0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  284644:	e0bffd17 	ldw	r2,-12(fp)
}
  284648:	e037883a 	mov	sp,fp
  28464c:	df000017 	ldw	fp,0(sp)
  284650:	dec00104 	addi	sp,sp,4
  284654:	f800283a 	ret

00284658 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  284658:	defffb04 	addi	sp,sp,-20
  28465c:	df000415 	stw	fp,16(sp)
  284660:	df000404 	addi	fp,sp,16
  284664:	e13ffe15 	stw	r4,-8(fp)
  284668:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  28466c:	e0bfff17 	ldw	r2,-4(fp)
  284670:	10840070 	cmpltui	r2,r2,4097
  284674:	1000021e 	bne	r2,zero,284680 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  284678:	00840004 	movi	r2,4096
  28467c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  284680:	e0fffe17 	ldw	r3,-8(fp)
  284684:	e0bfff17 	ldw	r2,-4(fp)
  284688:	1885883a 	add	r2,r3,r2
  28468c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  284690:	e0bffe17 	ldw	r2,-8(fp)
  284694:	e0bffd15 	stw	r2,-12(fp)
  284698:	00000506 	br	2846b0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  28469c:	e0bffd17 	ldw	r2,-12(fp)
  2846a0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  2846a4:	e0bffd17 	ldw	r2,-12(fp)
  2846a8:	10800804 	addi	r2,r2,32
  2846ac:	e0bffd15 	stw	r2,-12(fp)
  2846b0:	e0fffd17 	ldw	r3,-12(fp)
  2846b4:	e0bffc17 	ldw	r2,-16(fp)
  2846b8:	18bff836 	bltu	r3,r2,28469c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  2846bc:	e0bffe17 	ldw	r2,-8(fp)
  2846c0:	108007cc 	andi	r2,r2,31
  2846c4:	1005003a 	cmpeq	r2,r2,zero
  2846c8:	1000021e 	bne	r2,zero,2846d4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  2846cc:	e0bffd17 	ldw	r2,-12(fp)
  2846d0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  2846d4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  2846d8:	e037883a 	mov	sp,fp
  2846dc:	df000017 	ldw	fp,0(sp)
  2846e0:	dec00104 	addi	sp,sp,4
  2846e4:	f800283a 	ret

002846e8 <atexit>:
  2846e8:	200b883a 	mov	r5,r4
  2846ec:	000d883a 	mov	r6,zero
  2846f0:	0009883a 	mov	r4,zero
  2846f4:	000f883a 	mov	r7,zero
  2846f8:	0284d4c1 	jmpi	284d4c <__register_exitproc>

002846fc <exit>:
  2846fc:	defffe04 	addi	sp,sp,-8
  284700:	000b883a 	mov	r5,zero
  284704:	dc000015 	stw	r16,0(sp)
  284708:	dfc00115 	stw	ra,4(sp)
  28470c:	2021883a 	mov	r16,r4
  284710:	0284e840 	call	284e84 <__call_exitprocs>
  284714:	00800a74 	movhi	r2,41
  284718:	10b1e304 	addi	r2,r2,-14452
  28471c:	11000017 	ldw	r4,0(r2)
  284720:	20800f17 	ldw	r2,60(r4)
  284724:	10000126 	beq	r2,zero,28472c <exit+0x30>
  284728:	103ee83a 	callr	r2
  28472c:	8009883a 	mov	r4,r16
  284730:	0286a2c0 	call	286a2c <_exit>

00284734 <memcmp>:
  284734:	00c000c4 	movi	r3,3
  284738:	1980032e 	bgeu	r3,r6,284748 <memcmp+0x14>
  28473c:	2144b03a 	or	r2,r4,r5
  284740:	10c4703a 	and	r2,r2,r3
  284744:	10000f26 	beq	r2,zero,284784 <memcmp+0x50>
  284748:	31ffffc4 	addi	r7,r6,-1
  28474c:	3000061e 	bne	r6,zero,284768 <memcmp+0x34>
  284750:	00000a06 	br	28477c <memcmp+0x48>
  284754:	39ffffc4 	addi	r7,r7,-1
  284758:	00bfffc4 	movi	r2,-1
  28475c:	21000044 	addi	r4,r4,1
  284760:	29400044 	addi	r5,r5,1
  284764:	38800526 	beq	r7,r2,28477c <memcmp+0x48>
  284768:	20c00003 	ldbu	r3,0(r4)
  28476c:	28800003 	ldbu	r2,0(r5)
  284770:	18bff826 	beq	r3,r2,284754 <memcmp+0x20>
  284774:	1885c83a 	sub	r2,r3,r2
  284778:	f800283a 	ret
  28477c:	0005883a 	mov	r2,zero
  284780:	f800283a 	ret
  284784:	180f883a 	mov	r7,r3
  284788:	20c00017 	ldw	r3,0(r4)
  28478c:	28800017 	ldw	r2,0(r5)
  284790:	18bfed1e 	bne	r3,r2,284748 <memcmp+0x14>
  284794:	31bfff04 	addi	r6,r6,-4
  284798:	21000104 	addi	r4,r4,4
  28479c:	29400104 	addi	r5,r5,4
  2847a0:	39bff936 	bltu	r7,r6,284788 <memcmp+0x54>
  2847a4:	003fe806 	br	284748 <memcmp+0x14>

002847a8 <putc>:
  2847a8:	defffc04 	addi	sp,sp,-16
  2847ac:	dc800215 	stw	r18,8(sp)
  2847b0:	04800a74 	movhi	r18,41
  2847b4:	94b1e204 	addi	r18,r18,-14456
  2847b8:	90c00017 	ldw	r3,0(r18)
  2847bc:	dc400115 	stw	r17,4(sp)
  2847c0:	dc000015 	stw	r16,0(sp)
  2847c4:	dfc00315 	stw	ra,12(sp)
  2847c8:	2023883a 	mov	r17,r4
  2847cc:	2821883a 	mov	r16,r5
  2847d0:	18000226 	beq	r3,zero,2847dc <putc+0x34>
  2847d4:	18800e17 	ldw	r2,56(r3)
  2847d8:	10001126 	beq	r2,zero,284820 <putc+0x78>
  2847dc:	80800217 	ldw	r2,8(r16)
  2847e0:	10ffffc4 	addi	r3,r2,-1
  2847e4:	80c00215 	stw	r3,8(r16)
  2847e8:	18001316 	blt	r3,zero,284838 <putc+0x90>
  2847ec:	80800017 	ldw	r2,0(r16)
  2847f0:	14400005 	stb	r17,0(r2)
  2847f4:	80c00017 	ldw	r3,0(r16)
  2847f8:	18800044 	addi	r2,r3,1
  2847fc:	18c00003 	ldbu	r3,0(r3)
  284800:	80800015 	stw	r2,0(r16)
  284804:	1805883a 	mov	r2,r3
  284808:	dfc00317 	ldw	ra,12(sp)
  28480c:	dc800217 	ldw	r18,8(sp)
  284810:	dc400117 	ldw	r17,4(sp)
  284814:	dc000017 	ldw	r16,0(sp)
  284818:	dec00404 	addi	sp,sp,16
  28481c:	f800283a 	ret
  284820:	1809883a 	mov	r4,r3
  284824:	02852cc0 	call	2852cc <__sinit>
  284828:	80800217 	ldw	r2,8(r16)
  28482c:	10ffffc4 	addi	r3,r2,-1
  284830:	80c00215 	stw	r3,8(r16)
  284834:	183fed0e 	bge	r3,zero,2847ec <putc+0x44>
  284838:	80800617 	ldw	r2,24(r16)
  28483c:	18800f16 	blt	r3,r2,28487c <putc+0xd4>
  284840:	80800017 	ldw	r2,0(r16)
  284844:	14400005 	stb	r17,0(r2)
  284848:	81000017 	ldw	r4,0(r16)
  28484c:	00800284 	movi	r2,10
  284850:	20c00003 	ldbu	r3,0(r4)
  284854:	18801226 	beq	r3,r2,2848a0 <putc+0xf8>
  284858:	20800044 	addi	r2,r4,1
  28485c:	80800015 	stw	r2,0(r16)
  284860:	1805883a 	mov	r2,r3
  284864:	dfc00317 	ldw	ra,12(sp)
  284868:	dc800217 	ldw	r18,8(sp)
  28486c:	dc400117 	ldw	r17,4(sp)
  284870:	dc000017 	ldw	r16,0(sp)
  284874:	dec00404 	addi	sp,sp,16
  284878:	f800283a 	ret
  28487c:	91000017 	ldw	r4,0(r18)
  284880:	880b883a 	mov	r5,r17
  284884:	800d883a 	mov	r6,r16
  284888:	dfc00317 	ldw	ra,12(sp)
  28488c:	dc800217 	ldw	r18,8(sp)
  284890:	dc400117 	ldw	r17,4(sp)
  284894:	dc000017 	ldw	r16,0(sp)
  284898:	dec00404 	addi	sp,sp,16
  28489c:	0284ac41 	jmpi	284ac4 <__swbuf_r>
  2848a0:	91000017 	ldw	r4,0(r18)
  2848a4:	180b883a 	mov	r5,r3
  2848a8:	003ff606 	br	284884 <putc+0xdc>

002848ac <_putc_r>:
  2848ac:	defffc04 	addi	sp,sp,-16
  2848b0:	dc400215 	stw	r17,8(sp)
  2848b4:	dc000115 	stw	r16,4(sp)
  2848b8:	dfc00315 	stw	ra,12(sp)
  2848bc:	2021883a 	mov	r16,r4
  2848c0:	2823883a 	mov	r17,r5
  2848c4:	20000226 	beq	r4,zero,2848d0 <_putc_r+0x24>
  2848c8:	20800e17 	ldw	r2,56(r4)
  2848cc:	10001026 	beq	r2,zero,284910 <_putc_r+0x64>
  2848d0:	30800217 	ldw	r2,8(r6)
  2848d4:	10ffffc4 	addi	r3,r2,-1
  2848d8:	30c00215 	stw	r3,8(r6)
  2848dc:	18001316 	blt	r3,zero,28492c <_putc_r+0x80>
  2848e0:	30800017 	ldw	r2,0(r6)
  2848e4:	14400005 	stb	r17,0(r2)
  2848e8:	30c00017 	ldw	r3,0(r6)
  2848ec:	18800044 	addi	r2,r3,1
  2848f0:	18c00003 	ldbu	r3,0(r3)
  2848f4:	30800015 	stw	r2,0(r6)
  2848f8:	1805883a 	mov	r2,r3
  2848fc:	dfc00317 	ldw	ra,12(sp)
  284900:	dc400217 	ldw	r17,8(sp)
  284904:	dc000117 	ldw	r16,4(sp)
  284908:	dec00404 	addi	sp,sp,16
  28490c:	f800283a 	ret
  284910:	d9800015 	stw	r6,0(sp)
  284914:	02852cc0 	call	2852cc <__sinit>
  284918:	d9800017 	ldw	r6,0(sp)
  28491c:	30800217 	ldw	r2,8(r6)
  284920:	10ffffc4 	addi	r3,r2,-1
  284924:	30c00215 	stw	r3,8(r6)
  284928:	183fed0e 	bge	r3,zero,2848e0 <_putc_r+0x34>
  28492c:	30800617 	ldw	r2,24(r6)
  284930:	18800e16 	blt	r3,r2,28496c <_putc_r+0xc0>
  284934:	30800017 	ldw	r2,0(r6)
  284938:	14400005 	stb	r17,0(r2)
  28493c:	31000017 	ldw	r4,0(r6)
  284940:	00800284 	movi	r2,10
  284944:	20c00003 	ldbu	r3,0(r4)
  284948:	18800f26 	beq	r3,r2,284988 <_putc_r+0xdc>
  28494c:	20800044 	addi	r2,r4,1
  284950:	30800015 	stw	r2,0(r6)
  284954:	1805883a 	mov	r2,r3
  284958:	dfc00317 	ldw	ra,12(sp)
  28495c:	dc400217 	ldw	r17,8(sp)
  284960:	dc000117 	ldw	r16,4(sp)
  284964:	dec00404 	addi	sp,sp,16
  284968:	f800283a 	ret
  28496c:	8009883a 	mov	r4,r16
  284970:	880b883a 	mov	r5,r17
  284974:	dfc00317 	ldw	ra,12(sp)
  284978:	dc400217 	ldw	r17,8(sp)
  28497c:	dc000117 	ldw	r16,4(sp)
  284980:	dec00404 	addi	sp,sp,16
  284984:	0284ac41 	jmpi	284ac4 <__swbuf_r>
  284988:	8009883a 	mov	r4,r16
  28498c:	180b883a 	mov	r5,r3
  284990:	003ff806 	br	284974 <_putc_r+0xc8>

00284994 <strcmp>:
  284994:	2144b03a 	or	r2,r4,r5
  284998:	108000cc 	andi	r2,r2,3
  28499c:	10001d1e 	bne	r2,zero,284a14 <strcmp+0x80>
  2849a0:	200f883a 	mov	r7,r4
  2849a4:	28800017 	ldw	r2,0(r5)
  2849a8:	21000017 	ldw	r4,0(r4)
  2849ac:	280d883a 	mov	r6,r5
  2849b0:	2080161e 	bne	r4,r2,284a0c <strcmp+0x78>
  2849b4:	023fbff4 	movhi	r8,65279
  2849b8:	423fbfc4 	addi	r8,r8,-257
  2849bc:	2207883a 	add	r3,r4,r8
  2849c0:	01602074 	movhi	r5,32897
  2849c4:	29602004 	addi	r5,r5,-32640
  2849c8:	1946703a 	and	r3,r3,r5
  2849cc:	0104303a 	nor	r2,zero,r4
  2849d0:	10c4703a 	and	r2,r2,r3
  2849d4:	10001c1e 	bne	r2,zero,284a48 <strcmp+0xb4>
  2849d8:	4013883a 	mov	r9,r8
  2849dc:	2811883a 	mov	r8,r5
  2849e0:	00000106 	br	2849e8 <strcmp+0x54>
  2849e4:	1800181e 	bne	r3,zero,284a48 <strcmp+0xb4>
  2849e8:	39c00104 	addi	r7,r7,4
  2849ec:	39000017 	ldw	r4,0(r7)
  2849f0:	31800104 	addi	r6,r6,4
  2849f4:	31400017 	ldw	r5,0(r6)
  2849f8:	2245883a 	add	r2,r4,r9
  2849fc:	1204703a 	and	r2,r2,r8
  284a00:	0106303a 	nor	r3,zero,r4
  284a04:	1886703a 	and	r3,r3,r2
  284a08:	217ff626 	beq	r4,r5,2849e4 <strcmp+0x50>
  284a0c:	3809883a 	mov	r4,r7
  284a10:	300b883a 	mov	r5,r6
  284a14:	20c00007 	ldb	r3,0(r4)
  284a18:	1800051e 	bne	r3,zero,284a30 <strcmp+0x9c>
  284a1c:	00000606 	br	284a38 <strcmp+0xa4>
  284a20:	21000044 	addi	r4,r4,1
  284a24:	20c00007 	ldb	r3,0(r4)
  284a28:	29400044 	addi	r5,r5,1
  284a2c:	18000226 	beq	r3,zero,284a38 <strcmp+0xa4>
  284a30:	28800007 	ldb	r2,0(r5)
  284a34:	18bffa26 	beq	r3,r2,284a20 <strcmp+0x8c>
  284a38:	20c00003 	ldbu	r3,0(r4)
  284a3c:	28800003 	ldbu	r2,0(r5)
  284a40:	1885c83a 	sub	r2,r3,r2
  284a44:	f800283a 	ret
  284a48:	0005883a 	mov	r2,zero
  284a4c:	f800283a 	ret

00284a50 <strlen>:
  284a50:	208000cc 	andi	r2,r4,3
  284a54:	2011883a 	mov	r8,r4
  284a58:	1000161e 	bne	r2,zero,284ab4 <strlen+0x64>
  284a5c:	20c00017 	ldw	r3,0(r4)
  284a60:	017fbff4 	movhi	r5,65279
  284a64:	297fbfc4 	addi	r5,r5,-257
  284a68:	01e02074 	movhi	r7,32897
  284a6c:	39e02004 	addi	r7,r7,-32640
  284a70:	1945883a 	add	r2,r3,r5
  284a74:	11c4703a 	and	r2,r2,r7
  284a78:	00c6303a 	nor	r3,zero,r3
  284a7c:	1886703a 	and	r3,r3,r2
  284a80:	18000c1e 	bne	r3,zero,284ab4 <strlen+0x64>
  284a84:	280d883a 	mov	r6,r5
  284a88:	380b883a 	mov	r5,r7
  284a8c:	21000104 	addi	r4,r4,4
  284a90:	20800017 	ldw	r2,0(r4)
  284a94:	1187883a 	add	r3,r2,r6
  284a98:	1946703a 	and	r3,r3,r5
  284a9c:	0084303a 	nor	r2,zero,r2
  284aa0:	10c4703a 	and	r2,r2,r3
  284aa4:	103ff926 	beq	r2,zero,284a8c <strlen+0x3c>
  284aa8:	20800007 	ldb	r2,0(r4)
  284aac:	10000326 	beq	r2,zero,284abc <strlen+0x6c>
  284ab0:	21000044 	addi	r4,r4,1
  284ab4:	20800007 	ldb	r2,0(r4)
  284ab8:	103ffd1e 	bne	r2,zero,284ab0 <strlen+0x60>
  284abc:	2205c83a 	sub	r2,r4,r8
  284ac0:	f800283a 	ret

00284ac4 <__swbuf_r>:
  284ac4:	defffc04 	addi	sp,sp,-16
  284ac8:	dc400215 	stw	r17,8(sp)
  284acc:	dc000115 	stw	r16,4(sp)
  284ad0:	dfc00315 	stw	ra,12(sp)
  284ad4:	2023883a 	mov	r17,r4
  284ad8:	2821883a 	mov	r16,r5
  284adc:	20000226 	beq	r4,zero,284ae8 <__swbuf_r+0x24>
  284ae0:	20800e17 	ldw	r2,56(r4)
  284ae4:	10002f26 	beq	r2,zero,284ba4 <__swbuf_r+0xe0>
  284ae8:	3080030b 	ldhu	r2,12(r6)
  284aec:	30c00617 	ldw	r3,24(r6)
  284af0:	1080020c 	andi	r2,r2,8
  284af4:	30c00215 	stw	r3,8(r6)
  284af8:	10002226 	beq	r2,zero,284b84 <__swbuf_r+0xc0>
  284afc:	30c00417 	ldw	r3,16(r6)
  284b00:	18002026 	beq	r3,zero,284b84 <__swbuf_r+0xc0>
  284b04:	31000017 	ldw	r4,0(r6)
  284b08:	30800517 	ldw	r2,20(r6)
  284b0c:	20c7c83a 	sub	r3,r4,r3
  284b10:	18802f0e 	bge	r3,r2,284bd0 <__swbuf_r+0x10c>
  284b14:	19400044 	addi	r5,r3,1
  284b18:	30800217 	ldw	r2,8(r6)
  284b1c:	84003fcc 	andi	r16,r16,255
  284b20:	20c00044 	addi	r3,r4,1
  284b24:	10bfffc4 	addi	r2,r2,-1
  284b28:	30800215 	stw	r2,8(r6)
  284b2c:	24000005 	stb	r16,0(r4)
  284b30:	30800517 	ldw	r2,20(r6)
  284b34:	30c00015 	stw	r3,0(r6)
  284b38:	11400c26 	beq	r2,r5,284b6c <__swbuf_r+0xa8>
  284b3c:	3080030b 	ldhu	r2,12(r6)
  284b40:	1080004c 	andi	r2,r2,1
  284b44:	1005003a 	cmpeq	r2,r2,zero
  284b48:	10000626 	beq	r2,zero,284b64 <__swbuf_r+0xa0>
  284b4c:	8005883a 	mov	r2,r16
  284b50:	dfc00317 	ldw	ra,12(sp)
  284b54:	dc400217 	ldw	r17,8(sp)
  284b58:	dc000117 	ldw	r16,4(sp)
  284b5c:	dec00404 	addi	sp,sp,16
  284b60:	f800283a 	ret
  284b64:	00800284 	movi	r2,10
  284b68:	80bff81e 	bne	r16,r2,284b4c <__swbuf_r+0x88>
  284b6c:	8809883a 	mov	r4,r17
  284b70:	300b883a 	mov	r5,r6
  284b74:	02850340 	call	285034 <_fflush_r>
  284b78:	103ff426 	beq	r2,zero,284b4c <__swbuf_r+0x88>
  284b7c:	043fffc4 	movi	r16,-1
  284b80:	003ff206 	br	284b4c <__swbuf_r+0x88>
  284b84:	300b883a 	mov	r5,r6
  284b88:	8809883a 	mov	r4,r17
  284b8c:	d9800015 	stw	r6,0(sp)
  284b90:	0284c100 	call	284c10 <__swsetup_r>
  284b94:	d9800017 	ldw	r6,0(sp)
  284b98:	1000061e 	bne	r2,zero,284bb4 <__swbuf_r+0xf0>
  284b9c:	30c00417 	ldw	r3,16(r6)
  284ba0:	003fd806 	br	284b04 <__swbuf_r+0x40>
  284ba4:	d9800015 	stw	r6,0(sp)
  284ba8:	02852cc0 	call	2852cc <__sinit>
  284bac:	d9800017 	ldw	r6,0(sp)
  284bb0:	003fcd06 	br	284ae8 <__swbuf_r+0x24>
  284bb4:	3080030b 	ldhu	r2,12(r6)
  284bb8:	00c00244 	movi	r3,9
  284bbc:	043fffc4 	movi	r16,-1
  284bc0:	10801014 	ori	r2,r2,64
  284bc4:	3080030d 	sth	r2,12(r6)
  284bc8:	88c00015 	stw	r3,0(r17)
  284bcc:	003fdf06 	br	284b4c <__swbuf_r+0x88>
  284bd0:	300b883a 	mov	r5,r6
  284bd4:	8809883a 	mov	r4,r17
  284bd8:	d9800015 	stw	r6,0(sp)
  284bdc:	02850340 	call	285034 <_fflush_r>
  284be0:	d9800017 	ldw	r6,0(sp)
  284be4:	103fe51e 	bne	r2,zero,284b7c <__swbuf_r+0xb8>
  284be8:	31000017 	ldw	r4,0(r6)
  284bec:	01400044 	movi	r5,1
  284bf0:	003fc906 	br	284b18 <__swbuf_r+0x54>

00284bf4 <__swbuf>:
  284bf4:	01800a74 	movhi	r6,41
  284bf8:	31b1e204 	addi	r6,r6,-14456
  284bfc:	2007883a 	mov	r3,r4
  284c00:	31000017 	ldw	r4,0(r6)
  284c04:	280d883a 	mov	r6,r5
  284c08:	180b883a 	mov	r5,r3
  284c0c:	0284ac41 	jmpi	284ac4 <__swbuf_r>

00284c10 <__swsetup_r>:
  284c10:	00800a74 	movhi	r2,41
  284c14:	10b1e204 	addi	r2,r2,-14456
  284c18:	10c00017 	ldw	r3,0(r2)
  284c1c:	defffd04 	addi	sp,sp,-12
  284c20:	dc400115 	stw	r17,4(sp)
  284c24:	dc000015 	stw	r16,0(sp)
  284c28:	dfc00215 	stw	ra,8(sp)
  284c2c:	2023883a 	mov	r17,r4
  284c30:	2821883a 	mov	r16,r5
  284c34:	18000226 	beq	r3,zero,284c40 <__swsetup_r+0x30>
  284c38:	18800e17 	ldw	r2,56(r3)
  284c3c:	10001f26 	beq	r2,zero,284cbc <__swsetup_r+0xac>
  284c40:	8100030b 	ldhu	r4,12(r16)
  284c44:	2080020c 	andi	r2,r4,8
  284c48:	10002826 	beq	r2,zero,284cec <__swsetup_r+0xdc>
  284c4c:	81400417 	ldw	r5,16(r16)
  284c50:	28001d26 	beq	r5,zero,284cc8 <__swsetup_r+0xb8>
  284c54:	2080004c 	andi	r2,r4,1
  284c58:	1005003a 	cmpeq	r2,r2,zero
  284c5c:	10000b26 	beq	r2,zero,284c8c <__swsetup_r+0x7c>
  284c60:	2080008c 	andi	r2,r4,2
  284c64:	10001226 	beq	r2,zero,284cb0 <__swsetup_r+0xa0>
  284c68:	0005883a 	mov	r2,zero
  284c6c:	80800215 	stw	r2,8(r16)
  284c70:	28000b26 	beq	r5,zero,284ca0 <__swsetup_r+0x90>
  284c74:	0005883a 	mov	r2,zero
  284c78:	dfc00217 	ldw	ra,8(sp)
  284c7c:	dc400117 	ldw	r17,4(sp)
  284c80:	dc000017 	ldw	r16,0(sp)
  284c84:	dec00304 	addi	sp,sp,12
  284c88:	f800283a 	ret
  284c8c:	80800517 	ldw	r2,20(r16)
  284c90:	80000215 	stw	zero,8(r16)
  284c94:	0085c83a 	sub	r2,zero,r2
  284c98:	80800615 	stw	r2,24(r16)
  284c9c:	283ff51e 	bne	r5,zero,284c74 <__swsetup_r+0x64>
  284ca0:	2080200c 	andi	r2,r4,128
  284ca4:	103ff326 	beq	r2,zero,284c74 <__swsetup_r+0x64>
  284ca8:	00bfffc4 	movi	r2,-1
  284cac:	003ff206 	br	284c78 <__swsetup_r+0x68>
  284cb0:	80800517 	ldw	r2,20(r16)
  284cb4:	80800215 	stw	r2,8(r16)
  284cb8:	003fed06 	br	284c70 <__swsetup_r+0x60>
  284cbc:	1809883a 	mov	r4,r3
  284cc0:	02852cc0 	call	2852cc <__sinit>
  284cc4:	003fde06 	br	284c40 <__swsetup_r+0x30>
  284cc8:	20c0a00c 	andi	r3,r4,640
  284ccc:	00808004 	movi	r2,512
  284cd0:	18bfe026 	beq	r3,r2,284c54 <__swsetup_r+0x44>
  284cd4:	8809883a 	mov	r4,r17
  284cd8:	800b883a 	mov	r5,r16
  284cdc:	0285ae40 	call	285ae4 <__smakebuf_r>
  284ce0:	8100030b 	ldhu	r4,12(r16)
  284ce4:	81400417 	ldw	r5,16(r16)
  284ce8:	003fda06 	br	284c54 <__swsetup_r+0x44>
  284cec:	2080040c 	andi	r2,r4,16
  284cf0:	103fed26 	beq	r2,zero,284ca8 <__swsetup_r+0x98>
  284cf4:	2080010c 	andi	r2,r4,4
  284cf8:	10001226 	beq	r2,zero,284d44 <__swsetup_r+0x134>
  284cfc:	81400c17 	ldw	r5,48(r16)
  284d00:	28000526 	beq	r5,zero,284d18 <__swsetup_r+0x108>
  284d04:	80801004 	addi	r2,r16,64
  284d08:	28800226 	beq	r5,r2,284d14 <__swsetup_r+0x104>
  284d0c:	8809883a 	mov	r4,r17
  284d10:	02856500 	call	285650 <_free_r>
  284d14:	80000c15 	stw	zero,48(r16)
  284d18:	8080030b 	ldhu	r2,12(r16)
  284d1c:	81400417 	ldw	r5,16(r16)
  284d20:	80000115 	stw	zero,4(r16)
  284d24:	10bff6cc 	andi	r2,r2,65499
  284d28:	8080030d 	sth	r2,12(r16)
  284d2c:	81400015 	stw	r5,0(r16)
  284d30:	8080030b 	ldhu	r2,12(r16)
  284d34:	10800214 	ori	r2,r2,8
  284d38:	113fffcc 	andi	r4,r2,65535
  284d3c:	8080030d 	sth	r2,12(r16)
  284d40:	003fc306 	br	284c50 <__swsetup_r+0x40>
  284d44:	81400417 	ldw	r5,16(r16)
  284d48:	003ff906 	br	284d30 <__swsetup_r+0x120>

00284d4c <__register_exitproc>:
  284d4c:	defffa04 	addi	sp,sp,-24
  284d50:	00800a74 	movhi	r2,41
  284d54:	10b1e304 	addi	r2,r2,-14452
  284d58:	dc000015 	stw	r16,0(sp)
  284d5c:	14000017 	ldw	r16,0(r2)
  284d60:	dd000415 	stw	r20,16(sp)
  284d64:	2829883a 	mov	r20,r5
  284d68:	81405217 	ldw	r5,328(r16)
  284d6c:	dcc00315 	stw	r19,12(sp)
  284d70:	dc800215 	stw	r18,8(sp)
  284d74:	dc400115 	stw	r17,4(sp)
  284d78:	dfc00515 	stw	ra,20(sp)
  284d7c:	2023883a 	mov	r17,r4
  284d80:	3027883a 	mov	r19,r6
  284d84:	3825883a 	mov	r18,r7
  284d88:	28002526 	beq	r5,zero,284e20 <__register_exitproc+0xd4>
  284d8c:	29000117 	ldw	r4,4(r5)
  284d90:	008007c4 	movi	r2,31
  284d94:	11002716 	blt	r2,r4,284e34 <__register_exitproc+0xe8>
  284d98:	8800101e 	bne	r17,zero,284ddc <__register_exitproc+0x90>
  284d9c:	2105883a 	add	r2,r4,r4
  284da0:	1085883a 	add	r2,r2,r2
  284da4:	20c00044 	addi	r3,r4,1
  284da8:	1145883a 	add	r2,r2,r5
  284dac:	0009883a 	mov	r4,zero
  284db0:	15000215 	stw	r20,8(r2)
  284db4:	28c00115 	stw	r3,4(r5)
  284db8:	2005883a 	mov	r2,r4
  284dbc:	dfc00517 	ldw	ra,20(sp)
  284dc0:	dd000417 	ldw	r20,16(sp)
  284dc4:	dcc00317 	ldw	r19,12(sp)
  284dc8:	dc800217 	ldw	r18,8(sp)
  284dcc:	dc400117 	ldw	r17,4(sp)
  284dd0:	dc000017 	ldw	r16,0(sp)
  284dd4:	dec00604 	addi	sp,sp,24
  284dd8:	f800283a 	ret
  284ddc:	29802204 	addi	r6,r5,136
  284de0:	00800044 	movi	r2,1
  284de4:	110e983a 	sll	r7,r2,r4
  284de8:	30c04017 	ldw	r3,256(r6)
  284dec:	2105883a 	add	r2,r4,r4
  284df0:	1085883a 	add	r2,r2,r2
  284df4:	1185883a 	add	r2,r2,r6
  284df8:	19c6b03a 	or	r3,r3,r7
  284dfc:	14802015 	stw	r18,128(r2)
  284e00:	14c00015 	stw	r19,0(r2)
  284e04:	00800084 	movi	r2,2
  284e08:	30c04015 	stw	r3,256(r6)
  284e0c:	88bfe31e 	bne	r17,r2,284d9c <__register_exitproc+0x50>
  284e10:	30804117 	ldw	r2,260(r6)
  284e14:	11c4b03a 	or	r2,r2,r7
  284e18:	30804115 	stw	r2,260(r6)
  284e1c:	003fdf06 	br	284d9c <__register_exitproc+0x50>
  284e20:	00800a74 	movhi	r2,41
  284e24:	10b92504 	addi	r2,r2,-7020
  284e28:	100b883a 	mov	r5,r2
  284e2c:	80805215 	stw	r2,328(r16)
  284e30:	003fd606 	br	284d8c <__register_exitproc+0x40>
  284e34:	00800034 	movhi	r2,0
  284e38:	10800004 	addi	r2,r2,0
  284e3c:	1000021e 	bne	r2,zero,284e48 <__register_exitproc+0xfc>
  284e40:	013fffc4 	movi	r4,-1
  284e44:	003fdc06 	br	284db8 <__register_exitproc+0x6c>
  284e48:	01006404 	movi	r4,400
  284e4c:	103ee83a 	callr	r2
  284e50:	1007883a 	mov	r3,r2
  284e54:	103ffa26 	beq	r2,zero,284e40 <__register_exitproc+0xf4>
  284e58:	80805217 	ldw	r2,328(r16)
  284e5c:	180b883a 	mov	r5,r3
  284e60:	18000115 	stw	zero,4(r3)
  284e64:	18800015 	stw	r2,0(r3)
  284e68:	80c05215 	stw	r3,328(r16)
  284e6c:	18006215 	stw	zero,392(r3)
  284e70:	18006315 	stw	zero,396(r3)
  284e74:	0009883a 	mov	r4,zero
  284e78:	883fc826 	beq	r17,zero,284d9c <__register_exitproc+0x50>
  284e7c:	003fd706 	br	284ddc <__register_exitproc+0x90>

00284e80 <register_fini>:
  284e80:	f800283a 	ret

00284e84 <__call_exitprocs>:
  284e84:	00800a74 	movhi	r2,41
  284e88:	10b1e304 	addi	r2,r2,-14452
  284e8c:	10800017 	ldw	r2,0(r2)
  284e90:	defff304 	addi	sp,sp,-52
  284e94:	df000b15 	stw	fp,44(sp)
  284e98:	d8800115 	stw	r2,4(sp)
  284e9c:	00800034 	movhi	r2,0
  284ea0:	10800004 	addi	r2,r2,0
  284ea4:	1005003a 	cmpeq	r2,r2,zero
  284ea8:	d8800215 	stw	r2,8(sp)
  284eac:	d8800117 	ldw	r2,4(sp)
  284eb0:	dd400815 	stw	r21,32(sp)
  284eb4:	dd000715 	stw	r20,28(sp)
  284eb8:	10805204 	addi	r2,r2,328
  284ebc:	dfc00c15 	stw	ra,48(sp)
  284ec0:	ddc00a15 	stw	r23,40(sp)
  284ec4:	dd800915 	stw	r22,36(sp)
  284ec8:	dcc00615 	stw	r19,24(sp)
  284ecc:	dc800515 	stw	r18,20(sp)
  284ed0:	dc400415 	stw	r17,16(sp)
  284ed4:	dc000315 	stw	r16,12(sp)
  284ed8:	282b883a 	mov	r21,r5
  284edc:	2039883a 	mov	fp,r4
  284ee0:	d8800015 	stw	r2,0(sp)
  284ee4:	2829003a 	cmpeq	r20,r5,zero
  284ee8:	d8800117 	ldw	r2,4(sp)
  284eec:	14405217 	ldw	r17,328(r2)
  284ef0:	88001026 	beq	r17,zero,284f34 <__call_exitprocs+0xb0>
  284ef4:	ddc00017 	ldw	r23,0(sp)
  284ef8:	88800117 	ldw	r2,4(r17)
  284efc:	8c802204 	addi	r18,r17,136
  284f00:	143fffc4 	addi	r16,r2,-1
  284f04:	80000916 	blt	r16,zero,284f2c <__call_exitprocs+0xa8>
  284f08:	05bfffc4 	movi	r22,-1
  284f0c:	a000151e 	bne	r20,zero,284f64 <__call_exitprocs+0xe0>
  284f10:	8409883a 	add	r4,r16,r16
  284f14:	2105883a 	add	r2,r4,r4
  284f18:	1485883a 	add	r2,r2,r18
  284f1c:	10c02017 	ldw	r3,128(r2)
  284f20:	a8c01126 	beq	r21,r3,284f68 <__call_exitprocs+0xe4>
  284f24:	843fffc4 	addi	r16,r16,-1
  284f28:	85bff81e 	bne	r16,r22,284f0c <__call_exitprocs+0x88>
  284f2c:	d8800217 	ldw	r2,8(sp)
  284f30:	10003126 	beq	r2,zero,284ff8 <__call_exitprocs+0x174>
  284f34:	dfc00c17 	ldw	ra,48(sp)
  284f38:	df000b17 	ldw	fp,44(sp)
  284f3c:	ddc00a17 	ldw	r23,40(sp)
  284f40:	dd800917 	ldw	r22,36(sp)
  284f44:	dd400817 	ldw	r21,32(sp)
  284f48:	dd000717 	ldw	r20,28(sp)
  284f4c:	dcc00617 	ldw	r19,24(sp)
  284f50:	dc800517 	ldw	r18,20(sp)
  284f54:	dc400417 	ldw	r17,16(sp)
  284f58:	dc000317 	ldw	r16,12(sp)
  284f5c:	dec00d04 	addi	sp,sp,52
  284f60:	f800283a 	ret
  284f64:	8409883a 	add	r4,r16,r16
  284f68:	88c00117 	ldw	r3,4(r17)
  284f6c:	2105883a 	add	r2,r4,r4
  284f70:	1445883a 	add	r2,r2,r17
  284f74:	18ffffc4 	addi	r3,r3,-1
  284f78:	11800217 	ldw	r6,8(r2)
  284f7c:	1c001526 	beq	r3,r16,284fd4 <__call_exitprocs+0x150>
  284f80:	10000215 	stw	zero,8(r2)
  284f84:	303fe726 	beq	r6,zero,284f24 <__call_exitprocs+0xa0>
  284f88:	00c00044 	movi	r3,1
  284f8c:	1c06983a 	sll	r3,r3,r16
  284f90:	90804017 	ldw	r2,256(r18)
  284f94:	8cc00117 	ldw	r19,4(r17)
  284f98:	1884703a 	and	r2,r3,r2
  284f9c:	10001426 	beq	r2,zero,284ff0 <__call_exitprocs+0x16c>
  284fa0:	90804117 	ldw	r2,260(r18)
  284fa4:	1884703a 	and	r2,r3,r2
  284fa8:	10000c1e 	bne	r2,zero,284fdc <__call_exitprocs+0x158>
  284fac:	2105883a 	add	r2,r4,r4
  284fb0:	1485883a 	add	r2,r2,r18
  284fb4:	11400017 	ldw	r5,0(r2)
  284fb8:	e009883a 	mov	r4,fp
  284fbc:	303ee83a 	callr	r6
  284fc0:	88800117 	ldw	r2,4(r17)
  284fc4:	98bfc81e 	bne	r19,r2,284ee8 <__call_exitprocs+0x64>
  284fc8:	b8800017 	ldw	r2,0(r23)
  284fcc:	147fd526 	beq	r2,r17,284f24 <__call_exitprocs+0xa0>
  284fd0:	003fc506 	br	284ee8 <__call_exitprocs+0x64>
  284fd4:	8c000115 	stw	r16,4(r17)
  284fd8:	003fea06 	br	284f84 <__call_exitprocs+0x100>
  284fdc:	2105883a 	add	r2,r4,r4
  284fe0:	1485883a 	add	r2,r2,r18
  284fe4:	11000017 	ldw	r4,0(r2)
  284fe8:	303ee83a 	callr	r6
  284fec:	003ff406 	br	284fc0 <__call_exitprocs+0x13c>
  284ff0:	303ee83a 	callr	r6
  284ff4:	003ff206 	br	284fc0 <__call_exitprocs+0x13c>
  284ff8:	88800117 	ldw	r2,4(r17)
  284ffc:	1000081e 	bne	r2,zero,285020 <__call_exitprocs+0x19c>
  285000:	89000017 	ldw	r4,0(r17)
  285004:	20000726 	beq	r4,zero,285024 <__call_exitprocs+0x1a0>
  285008:	b9000015 	stw	r4,0(r23)
  28500c:	8809883a 	mov	r4,r17
  285010:	00000000 	call	0 <__reset-0x280000>
  285014:	bc400017 	ldw	r17,0(r23)
  285018:	883fb71e 	bne	r17,zero,284ef8 <__call_exitprocs+0x74>
  28501c:	003fc506 	br	284f34 <__call_exitprocs+0xb0>
  285020:	89000017 	ldw	r4,0(r17)
  285024:	882f883a 	mov	r23,r17
  285028:	2023883a 	mov	r17,r4
  28502c:	883fb21e 	bne	r17,zero,284ef8 <__call_exitprocs+0x74>
  285030:	003fc006 	br	284f34 <__call_exitprocs+0xb0>

00285034 <_fflush_r>:
  285034:	defffb04 	addi	sp,sp,-20
  285038:	dcc00315 	stw	r19,12(sp)
  28503c:	dc800215 	stw	r18,8(sp)
  285040:	dfc00415 	stw	ra,16(sp)
  285044:	dc400115 	stw	r17,4(sp)
  285048:	dc000015 	stw	r16,0(sp)
  28504c:	2027883a 	mov	r19,r4
  285050:	2825883a 	mov	r18,r5
  285054:	20000226 	beq	r4,zero,285060 <_fflush_r+0x2c>
  285058:	20800e17 	ldw	r2,56(r4)
  28505c:	10005626 	beq	r2,zero,2851b8 <_fflush_r+0x184>
  285060:	9100030b 	ldhu	r4,12(r18)
  285064:	20ffffcc 	andi	r3,r4,65535
  285068:	18e0001c 	xori	r3,r3,32768
  28506c:	18e00004 	addi	r3,r3,-32768
  285070:	1880020c 	andi	r2,r3,8
  285074:	1000261e 	bne	r2,zero,285110 <_fflush_r+0xdc>
  285078:	90c00117 	ldw	r3,4(r18)
  28507c:	20820014 	ori	r2,r4,2048
  285080:	9080030d 	sth	r2,12(r18)
  285084:	1009883a 	mov	r4,r2
  285088:	00c0400e 	bge	zero,r3,28518c <_fflush_r+0x158>
  28508c:	92000a17 	ldw	r8,40(r18)
  285090:	40004026 	beq	r8,zero,285194 <_fflush_r+0x160>
  285094:	2084000c 	andi	r2,r4,4096
  285098:	10005326 	beq	r2,zero,2851e8 <_fflush_r+0x1b4>
  28509c:	94001417 	ldw	r16,80(r18)
  2850a0:	9080030b 	ldhu	r2,12(r18)
  2850a4:	1080010c 	andi	r2,r2,4
  2850a8:	1000481e 	bne	r2,zero,2851cc <_fflush_r+0x198>
  2850ac:	91400717 	ldw	r5,28(r18)
  2850b0:	9809883a 	mov	r4,r19
  2850b4:	800d883a 	mov	r6,r16
  2850b8:	000f883a 	mov	r7,zero
  2850bc:	403ee83a 	callr	r8
  2850c0:	8080261e 	bne	r16,r2,28515c <_fflush_r+0x128>
  2850c4:	9080030b 	ldhu	r2,12(r18)
  2850c8:	91000417 	ldw	r4,16(r18)
  2850cc:	90000115 	stw	zero,4(r18)
  2850d0:	10bdffcc 	andi	r2,r2,63487
  2850d4:	10ffffcc 	andi	r3,r2,65535
  2850d8:	18c4000c 	andi	r3,r3,4096
  2850dc:	9080030d 	sth	r2,12(r18)
  2850e0:	91000015 	stw	r4,0(r18)
  2850e4:	18002b26 	beq	r3,zero,285194 <_fflush_r+0x160>
  2850e8:	0007883a 	mov	r3,zero
  2850ec:	1805883a 	mov	r2,r3
  2850f0:	94001415 	stw	r16,80(r18)
  2850f4:	dfc00417 	ldw	ra,16(sp)
  2850f8:	dcc00317 	ldw	r19,12(sp)
  2850fc:	dc800217 	ldw	r18,8(sp)
  285100:	dc400117 	ldw	r17,4(sp)
  285104:	dc000017 	ldw	r16,0(sp)
  285108:	dec00504 	addi	sp,sp,20
  28510c:	f800283a 	ret
  285110:	94400417 	ldw	r17,16(r18)
  285114:	88001f26 	beq	r17,zero,285194 <_fflush_r+0x160>
  285118:	90800017 	ldw	r2,0(r18)
  28511c:	18c000cc 	andi	r3,r3,3
  285120:	94400015 	stw	r17,0(r18)
  285124:	1461c83a 	sub	r16,r2,r17
  285128:	18002526 	beq	r3,zero,2851c0 <_fflush_r+0x18c>
  28512c:	0005883a 	mov	r2,zero
  285130:	90800215 	stw	r2,8(r18)
  285134:	0400170e 	bge	zero,r16,285194 <_fflush_r+0x160>
  285138:	90c00917 	ldw	r3,36(r18)
  28513c:	91400717 	ldw	r5,28(r18)
  285140:	880d883a 	mov	r6,r17
  285144:	800f883a 	mov	r7,r16
  285148:	9809883a 	mov	r4,r19
  28514c:	183ee83a 	callr	r3
  285150:	88a3883a 	add	r17,r17,r2
  285154:	80a1c83a 	sub	r16,r16,r2
  285158:	00bff616 	blt	zero,r2,285134 <_fflush_r+0x100>
  28515c:	9080030b 	ldhu	r2,12(r18)
  285160:	00ffffc4 	movi	r3,-1
  285164:	10801014 	ori	r2,r2,64
  285168:	9080030d 	sth	r2,12(r18)
  28516c:	1805883a 	mov	r2,r3
  285170:	dfc00417 	ldw	ra,16(sp)
  285174:	dcc00317 	ldw	r19,12(sp)
  285178:	dc800217 	ldw	r18,8(sp)
  28517c:	dc400117 	ldw	r17,4(sp)
  285180:	dc000017 	ldw	r16,0(sp)
  285184:	dec00504 	addi	sp,sp,20
  285188:	f800283a 	ret
  28518c:	90800f17 	ldw	r2,60(r18)
  285190:	00bfbe16 	blt	zero,r2,28508c <_fflush_r+0x58>
  285194:	0007883a 	mov	r3,zero
  285198:	1805883a 	mov	r2,r3
  28519c:	dfc00417 	ldw	ra,16(sp)
  2851a0:	dcc00317 	ldw	r19,12(sp)
  2851a4:	dc800217 	ldw	r18,8(sp)
  2851a8:	dc400117 	ldw	r17,4(sp)
  2851ac:	dc000017 	ldw	r16,0(sp)
  2851b0:	dec00504 	addi	sp,sp,20
  2851b4:	f800283a 	ret
  2851b8:	02852cc0 	call	2852cc <__sinit>
  2851bc:	003fa806 	br	285060 <_fflush_r+0x2c>
  2851c0:	90800517 	ldw	r2,20(r18)
  2851c4:	90800215 	stw	r2,8(r18)
  2851c8:	003fda06 	br	285134 <_fflush_r+0x100>
  2851cc:	90800117 	ldw	r2,4(r18)
  2851d0:	90c00c17 	ldw	r3,48(r18)
  2851d4:	80a1c83a 	sub	r16,r16,r2
  2851d8:	183fb426 	beq	r3,zero,2850ac <_fflush_r+0x78>
  2851dc:	90800f17 	ldw	r2,60(r18)
  2851e0:	80a1c83a 	sub	r16,r16,r2
  2851e4:	003fb106 	br	2850ac <_fflush_r+0x78>
  2851e8:	91400717 	ldw	r5,28(r18)
  2851ec:	9809883a 	mov	r4,r19
  2851f0:	000d883a 	mov	r6,zero
  2851f4:	01c00044 	movi	r7,1
  2851f8:	403ee83a 	callr	r8
  2851fc:	1021883a 	mov	r16,r2
  285200:	00bfffc4 	movi	r2,-1
  285204:	80800226 	beq	r16,r2,285210 <_fflush_r+0x1dc>
  285208:	92000a17 	ldw	r8,40(r18)
  28520c:	003fa406 	br	2850a0 <_fflush_r+0x6c>
  285210:	98c00017 	ldw	r3,0(r19)
  285214:	00800744 	movi	r2,29
  285218:	18bfde26 	beq	r3,r2,285194 <_fflush_r+0x160>
  28521c:	9080030b 	ldhu	r2,12(r18)
  285220:	8007883a 	mov	r3,r16
  285224:	10801014 	ori	r2,r2,64
  285228:	9080030d 	sth	r2,12(r18)
  28522c:	003fcf06 	br	28516c <_fflush_r+0x138>

00285230 <fflush>:
  285230:	01400a34 	movhi	r5,40
  285234:	29540d04 	addi	r5,r5,20532
  285238:	2007883a 	mov	r3,r4
  28523c:	20000526 	beq	r4,zero,285254 <fflush+0x24>
  285240:	00800a74 	movhi	r2,41
  285244:	10b1e204 	addi	r2,r2,-14456
  285248:	11000017 	ldw	r4,0(r2)
  28524c:	180b883a 	mov	r5,r3
  285250:	02850341 	jmpi	285034 <_fflush_r>
  285254:	00800a74 	movhi	r2,41
  285258:	10b1e304 	addi	r2,r2,-14452
  28525c:	11000017 	ldw	r4,0(r2)
  285260:	02859641 	jmpi	285964 <_fwalk_reent>

00285264 <std>:
  285264:	00800a34 	movhi	r2,40
  285268:	10993004 	addi	r2,r2,25792
  28526c:	20800b15 	stw	r2,44(r4)
  285270:	00800a34 	movhi	r2,40
  285274:	10996b04 	addi	r2,r2,26028
  285278:	20800815 	stw	r2,32(r4)
  28527c:	00c00a34 	movhi	r3,40
  285280:	18d94c04 	addi	r3,r3,25904
  285284:	00800a34 	movhi	r2,40
  285288:	10993204 	addi	r2,r2,25800
  28528c:	2140030d 	sth	r5,12(r4)
  285290:	2180038d 	sth	r6,14(r4)
  285294:	20c00915 	stw	r3,36(r4)
  285298:	20800a15 	stw	r2,40(r4)
  28529c:	20000015 	stw	zero,0(r4)
  2852a0:	20000115 	stw	zero,4(r4)
  2852a4:	20000215 	stw	zero,8(r4)
  2852a8:	20000415 	stw	zero,16(r4)
  2852ac:	20000515 	stw	zero,20(r4)
  2852b0:	20000615 	stw	zero,24(r4)
  2852b4:	21000715 	stw	r4,28(r4)
  2852b8:	f800283a 	ret

002852bc <__sfp_lock_acquire>:
  2852bc:	f800283a 	ret

002852c0 <__sfp_lock_release>:
  2852c0:	f800283a 	ret

002852c4 <__sinit_lock_acquire>:
  2852c4:	f800283a 	ret

002852c8 <__sinit_lock_release>:
  2852c8:	f800283a 	ret

002852cc <__sinit>:
  2852cc:	20800e17 	ldw	r2,56(r4)
  2852d0:	defffd04 	addi	sp,sp,-12
  2852d4:	dc400115 	stw	r17,4(sp)
  2852d8:	dc000015 	stw	r16,0(sp)
  2852dc:	dfc00215 	stw	ra,8(sp)
  2852e0:	04400044 	movi	r17,1
  2852e4:	01400104 	movi	r5,4
  2852e8:	000d883a 	mov	r6,zero
  2852ec:	2021883a 	mov	r16,r4
  2852f0:	2200bb04 	addi	r8,r4,748
  2852f4:	200f883a 	mov	r7,r4
  2852f8:	10000526 	beq	r2,zero,285310 <__sinit+0x44>
  2852fc:	dfc00217 	ldw	ra,8(sp)
  285300:	dc400117 	ldw	r17,4(sp)
  285304:	dc000017 	ldw	r16,0(sp)
  285308:	dec00304 	addi	sp,sp,12
  28530c:	f800283a 	ret
  285310:	21000117 	ldw	r4,4(r4)
  285314:	00800a34 	movhi	r2,40
  285318:	1094ec04 	addi	r2,r2,21424
  28531c:	00c000c4 	movi	r3,3
  285320:	80800f15 	stw	r2,60(r16)
  285324:	80c0b915 	stw	r3,740(r16)
  285328:	8200ba15 	stw	r8,744(r16)
  28532c:	84400e15 	stw	r17,56(r16)
  285330:	8000b815 	stw	zero,736(r16)
  285334:	02852640 	call	285264 <std>
  285338:	81000217 	ldw	r4,8(r16)
  28533c:	880d883a 	mov	r6,r17
  285340:	800f883a 	mov	r7,r16
  285344:	01400284 	movi	r5,10
  285348:	02852640 	call	285264 <std>
  28534c:	81000317 	ldw	r4,12(r16)
  285350:	800f883a 	mov	r7,r16
  285354:	01400484 	movi	r5,18
  285358:	01800084 	movi	r6,2
  28535c:	dfc00217 	ldw	ra,8(sp)
  285360:	dc400117 	ldw	r17,4(sp)
  285364:	dc000017 	ldw	r16,0(sp)
  285368:	dec00304 	addi	sp,sp,12
  28536c:	02852641 	jmpi	285264 <std>

00285370 <__fp_lock>:
  285370:	0005883a 	mov	r2,zero
  285374:	f800283a 	ret

00285378 <__fp_unlock>:
  285378:	0005883a 	mov	r2,zero
  28537c:	f800283a 	ret

00285380 <__fp_unlock_all>:
  285380:	00800a74 	movhi	r2,41
  285384:	10b1e204 	addi	r2,r2,-14456
  285388:	11000017 	ldw	r4,0(r2)
  28538c:	01400a34 	movhi	r5,40
  285390:	2954de04 	addi	r5,r5,21368
  285394:	0285a2c1 	jmpi	285a2c <_fwalk>

00285398 <__fp_lock_all>:
  285398:	00800a74 	movhi	r2,41
  28539c:	10b1e204 	addi	r2,r2,-14456
  2853a0:	11000017 	ldw	r4,0(r2)
  2853a4:	01400a34 	movhi	r5,40
  2853a8:	2954dc04 	addi	r5,r5,21360
  2853ac:	0285a2c1 	jmpi	285a2c <_fwalk>

002853b0 <_cleanup_r>:
  2853b0:	01400a34 	movhi	r5,40
  2853b4:	295a0104 	addi	r5,r5,26628
  2853b8:	0285a2c1 	jmpi	285a2c <_fwalk>

002853bc <_cleanup>:
  2853bc:	00800a74 	movhi	r2,41
  2853c0:	10b1e304 	addi	r2,r2,-14452
  2853c4:	11000017 	ldw	r4,0(r2)
  2853c8:	02853b01 	jmpi	2853b0 <_cleanup_r>

002853cc <__sfmoreglue>:
  2853cc:	defffc04 	addi	sp,sp,-16
  2853d0:	dc400115 	stw	r17,4(sp)
  2853d4:	2c401724 	muli	r17,r5,92
  2853d8:	dc800215 	stw	r18,8(sp)
  2853dc:	2825883a 	mov	r18,r5
  2853e0:	89400304 	addi	r5,r17,12
  2853e4:	dc000015 	stw	r16,0(sp)
  2853e8:	dfc00315 	stw	ra,12(sp)
  2853ec:	0285c780 	call	285c78 <_malloc_r>
  2853f0:	0021883a 	mov	r16,zero
  2853f4:	880d883a 	mov	r6,r17
  2853f8:	000b883a 	mov	r5,zero
  2853fc:	10000626 	beq	r2,zero,285418 <__sfmoreglue+0x4c>
  285400:	11000304 	addi	r4,r2,12
  285404:	14800115 	stw	r18,4(r2)
  285408:	10000015 	stw	zero,0(r2)
  28540c:	11000215 	stw	r4,8(r2)
  285410:	1021883a 	mov	r16,r2
  285414:	02863b80 	call	2863b8 <memset>
  285418:	8005883a 	mov	r2,r16
  28541c:	dfc00317 	ldw	ra,12(sp)
  285420:	dc800217 	ldw	r18,8(sp)
  285424:	dc400117 	ldw	r17,4(sp)
  285428:	dc000017 	ldw	r16,0(sp)
  28542c:	dec00404 	addi	sp,sp,16
  285430:	f800283a 	ret

00285434 <__sfp>:
  285434:	defffd04 	addi	sp,sp,-12
  285438:	00800a74 	movhi	r2,41
  28543c:	10b1e304 	addi	r2,r2,-14452
  285440:	dc000015 	stw	r16,0(sp)
  285444:	14000017 	ldw	r16,0(r2)
  285448:	dc400115 	stw	r17,4(sp)
  28544c:	dfc00215 	stw	ra,8(sp)
  285450:	80800e17 	ldw	r2,56(r16)
  285454:	2023883a 	mov	r17,r4
  285458:	10002626 	beq	r2,zero,2854f4 <__sfp+0xc0>
  28545c:	8400b804 	addi	r16,r16,736
  285460:	80800117 	ldw	r2,4(r16)
  285464:	81000217 	ldw	r4,8(r16)
  285468:	10ffffc4 	addi	r3,r2,-1
  28546c:	18000916 	blt	r3,zero,285494 <__sfp+0x60>
  285470:	2080030f 	ldh	r2,12(r4)
  285474:	10000b26 	beq	r2,zero,2854a4 <__sfp+0x70>
  285478:	017fffc4 	movi	r5,-1
  28547c:	00000206 	br	285488 <__sfp+0x54>
  285480:	2080030f 	ldh	r2,12(r4)
  285484:	10000726 	beq	r2,zero,2854a4 <__sfp+0x70>
  285488:	18ffffc4 	addi	r3,r3,-1
  28548c:	21001704 	addi	r4,r4,92
  285490:	197ffb1e 	bne	r3,r5,285480 <__sfp+0x4c>
  285494:	80800017 	ldw	r2,0(r16)
  285498:	10001926 	beq	r2,zero,285500 <__sfp+0xcc>
  28549c:	1021883a 	mov	r16,r2
  2854a0:	003fef06 	br	285460 <__sfp+0x2c>
  2854a4:	00bfffc4 	movi	r2,-1
  2854a8:	00c00044 	movi	r3,1
  2854ac:	2080038d 	sth	r2,14(r4)
  2854b0:	20c0030d 	sth	r3,12(r4)
  2854b4:	20000015 	stw	zero,0(r4)
  2854b8:	20000215 	stw	zero,8(r4)
  2854bc:	20000115 	stw	zero,4(r4)
  2854c0:	20000415 	stw	zero,16(r4)
  2854c4:	20000515 	stw	zero,20(r4)
  2854c8:	20000615 	stw	zero,24(r4)
  2854cc:	20000c15 	stw	zero,48(r4)
  2854d0:	20000d15 	stw	zero,52(r4)
  2854d4:	20001115 	stw	zero,68(r4)
  2854d8:	20001215 	stw	zero,72(r4)
  2854dc:	2005883a 	mov	r2,r4
  2854e0:	dfc00217 	ldw	ra,8(sp)
  2854e4:	dc400117 	ldw	r17,4(sp)
  2854e8:	dc000017 	ldw	r16,0(sp)
  2854ec:	dec00304 	addi	sp,sp,12
  2854f0:	f800283a 	ret
  2854f4:	8009883a 	mov	r4,r16
  2854f8:	02852cc0 	call	2852cc <__sinit>
  2854fc:	003fd706 	br	28545c <__sfp+0x28>
  285500:	8809883a 	mov	r4,r17
  285504:	01400104 	movi	r5,4
  285508:	02853cc0 	call	2853cc <__sfmoreglue>
  28550c:	80800015 	stw	r2,0(r16)
  285510:	103fe21e 	bne	r2,zero,28549c <__sfp+0x68>
  285514:	00800304 	movi	r2,12
  285518:	0009883a 	mov	r4,zero
  28551c:	88800015 	stw	r2,0(r17)
  285520:	003fee06 	br	2854dc <__sfp+0xa8>

00285524 <_malloc_trim_r>:
  285524:	defffb04 	addi	sp,sp,-20
  285528:	dcc00315 	stw	r19,12(sp)
  28552c:	04c00a74 	movhi	r19,41
  285530:	9cf0d704 	addi	r19,r19,-15524
  285534:	dc800215 	stw	r18,8(sp)
  285538:	dc400115 	stw	r17,4(sp)
  28553c:	dc000015 	stw	r16,0(sp)
  285540:	2823883a 	mov	r17,r5
  285544:	2025883a 	mov	r18,r4
  285548:	dfc00415 	stw	ra,16(sp)
  28554c:	0286df00 	call	286df0 <__malloc_lock>
  285550:	98800217 	ldw	r2,8(r19)
  285554:	9009883a 	mov	r4,r18
  285558:	000b883a 	mov	r5,zero
  28555c:	10c00117 	ldw	r3,4(r2)
  285560:	00bfff04 	movi	r2,-4
  285564:	18a0703a 	and	r16,r3,r2
  285568:	8463c83a 	sub	r17,r16,r17
  28556c:	8c43fbc4 	addi	r17,r17,4079
  285570:	8822d33a 	srli	r17,r17,12
  285574:	0083ffc4 	movi	r2,4095
  285578:	8c7fffc4 	addi	r17,r17,-1
  28557c:	8822933a 	slli	r17,r17,12
  285580:	1440060e 	bge	r2,r17,28559c <_malloc_trim_r+0x78>
  285584:	02864500 	call	286450 <_sbrk_r>
  285588:	98c00217 	ldw	r3,8(r19)
  28558c:	9009883a 	mov	r4,r18
  285590:	044bc83a 	sub	r5,zero,r17
  285594:	80c7883a 	add	r3,r16,r3
  285598:	10c00926 	beq	r2,r3,2855c0 <_malloc_trim_r+0x9c>
  28559c:	0286e100 	call	286e10 <__malloc_unlock>
  2855a0:	0005883a 	mov	r2,zero
  2855a4:	dfc00417 	ldw	ra,16(sp)
  2855a8:	dcc00317 	ldw	r19,12(sp)
  2855ac:	dc800217 	ldw	r18,8(sp)
  2855b0:	dc400117 	ldw	r17,4(sp)
  2855b4:	dc000017 	ldw	r16,0(sp)
  2855b8:	dec00504 	addi	sp,sp,20
  2855bc:	f800283a 	ret
  2855c0:	9009883a 	mov	r4,r18
  2855c4:	02864500 	call	286450 <_sbrk_r>
  2855c8:	844dc83a 	sub	r6,r16,r17
  2855cc:	00ffffc4 	movi	r3,-1
  2855d0:	9009883a 	mov	r4,r18
  2855d4:	000b883a 	mov	r5,zero
  2855d8:	01c00a74 	movhi	r7,41
  2855dc:	39f8db04 	addi	r7,r7,-7316
  2855e0:	31800054 	ori	r6,r6,1
  2855e4:	10c00926 	beq	r2,r3,28560c <_malloc_trim_r+0xe8>
  2855e8:	38800017 	ldw	r2,0(r7)
  2855ec:	98c00217 	ldw	r3,8(r19)
  2855f0:	9009883a 	mov	r4,r18
  2855f4:	1445c83a 	sub	r2,r2,r17
  2855f8:	38800015 	stw	r2,0(r7)
  2855fc:	19800115 	stw	r6,4(r3)
  285600:	0286e100 	call	286e10 <__malloc_unlock>
  285604:	00800044 	movi	r2,1
  285608:	003fe606 	br	2855a4 <_malloc_trim_r+0x80>
  28560c:	02864500 	call	286450 <_sbrk_r>
  285610:	99800217 	ldw	r6,8(r19)
  285614:	100f883a 	mov	r7,r2
  285618:	9009883a 	mov	r4,r18
  28561c:	1187c83a 	sub	r3,r2,r6
  285620:	008003c4 	movi	r2,15
  285624:	19400054 	ori	r5,r3,1
  285628:	10ffdc0e 	bge	r2,r3,28559c <_malloc_trim_r+0x78>
  28562c:	00800a74 	movhi	r2,41
  285630:	10b1e504 	addi	r2,r2,-14444
  285634:	10c00017 	ldw	r3,0(r2)
  285638:	00800a74 	movhi	r2,41
  28563c:	10b8db04 	addi	r2,r2,-7316
  285640:	31400115 	stw	r5,4(r6)
  285644:	38c7c83a 	sub	r3,r7,r3
  285648:	10c00015 	stw	r3,0(r2)
  28564c:	003fd306 	br	28559c <_malloc_trim_r+0x78>

00285650 <_free_r>:
  285650:	defffd04 	addi	sp,sp,-12
  285654:	dc400115 	stw	r17,4(sp)
  285658:	dc000015 	stw	r16,0(sp)
  28565c:	dfc00215 	stw	ra,8(sp)
  285660:	2821883a 	mov	r16,r5
  285664:	2023883a 	mov	r17,r4
  285668:	28005a26 	beq	r5,zero,2857d4 <_free_r+0x184>
  28566c:	0286df00 	call	286df0 <__malloc_lock>
  285670:	823ffe04 	addi	r8,r16,-8
  285674:	41400117 	ldw	r5,4(r8)
  285678:	00bfff84 	movi	r2,-2
  28567c:	02800a74 	movhi	r10,41
  285680:	52b0d704 	addi	r10,r10,-15524
  285684:	288e703a 	and	r7,r5,r2
  285688:	41cd883a 	add	r6,r8,r7
  28568c:	30c00117 	ldw	r3,4(r6)
  285690:	51000217 	ldw	r4,8(r10)
  285694:	00bfff04 	movi	r2,-4
  285698:	1892703a 	and	r9,r3,r2
  28569c:	5017883a 	mov	r11,r10
  2856a0:	31006726 	beq	r6,r4,285840 <_free_r+0x1f0>
  2856a4:	2880004c 	andi	r2,r5,1
  2856a8:	1005003a 	cmpeq	r2,r2,zero
  2856ac:	32400115 	stw	r9,4(r6)
  2856b0:	10001a1e 	bne	r2,zero,28571c <_free_r+0xcc>
  2856b4:	000b883a 	mov	r5,zero
  2856b8:	3247883a 	add	r3,r6,r9
  2856bc:	18800117 	ldw	r2,4(r3)
  2856c0:	1080004c 	andi	r2,r2,1
  2856c4:	1000231e 	bne	r2,zero,285754 <_free_r+0x104>
  2856c8:	280ac03a 	cmpne	r5,r5,zero
  2856cc:	3a4f883a 	add	r7,r7,r9
  2856d0:	2800451e 	bne	r5,zero,2857e8 <_free_r+0x198>
  2856d4:	31000217 	ldw	r4,8(r6)
  2856d8:	00800a74 	movhi	r2,41
  2856dc:	10b0d904 	addi	r2,r2,-15516
  2856e0:	20807b26 	beq	r4,r2,2858d0 <_free_r+0x280>
  2856e4:	30800317 	ldw	r2,12(r6)
  2856e8:	3a07883a 	add	r3,r7,r8
  2856ec:	19c00015 	stw	r7,0(r3)
  2856f0:	11000215 	stw	r4,8(r2)
  2856f4:	20800315 	stw	r2,12(r4)
  2856f8:	38800054 	ori	r2,r7,1
  2856fc:	40800115 	stw	r2,4(r8)
  285700:	28001a26 	beq	r5,zero,28576c <_free_r+0x11c>
  285704:	8809883a 	mov	r4,r17
  285708:	dfc00217 	ldw	ra,8(sp)
  28570c:	dc400117 	ldw	r17,4(sp)
  285710:	dc000017 	ldw	r16,0(sp)
  285714:	dec00304 	addi	sp,sp,12
  285718:	0286e101 	jmpi	286e10 <__malloc_unlock>
  28571c:	80bffe17 	ldw	r2,-8(r16)
  285720:	50c00204 	addi	r3,r10,8
  285724:	4091c83a 	sub	r8,r8,r2
  285728:	41000217 	ldw	r4,8(r8)
  28572c:	388f883a 	add	r7,r7,r2
  285730:	20c06126 	beq	r4,r3,2858b8 <_free_r+0x268>
  285734:	40800317 	ldw	r2,12(r8)
  285738:	3247883a 	add	r3,r6,r9
  28573c:	000b883a 	mov	r5,zero
  285740:	11000215 	stw	r4,8(r2)
  285744:	20800315 	stw	r2,12(r4)
  285748:	18800117 	ldw	r2,4(r3)
  28574c:	1080004c 	andi	r2,r2,1
  285750:	103fdd26 	beq	r2,zero,2856c8 <_free_r+0x78>
  285754:	38800054 	ori	r2,r7,1
  285758:	3a07883a 	add	r3,r7,r8
  28575c:	280ac03a 	cmpne	r5,r5,zero
  285760:	40800115 	stw	r2,4(r8)
  285764:	19c00015 	stw	r7,0(r3)
  285768:	283fe61e 	bne	r5,zero,285704 <_free_r+0xb4>
  28576c:	00807fc4 	movi	r2,511
  285770:	11c01f2e 	bgeu	r2,r7,2857f0 <_free_r+0x1a0>
  285774:	3806d27a 	srli	r3,r7,9
  285778:	1800481e 	bne	r3,zero,28589c <_free_r+0x24c>
  28577c:	3804d0fa 	srli	r2,r7,3
  285780:	100690fa 	slli	r3,r2,3
  285784:	1acd883a 	add	r6,r3,r11
  285788:	31400217 	ldw	r5,8(r6)
  28578c:	31405926 	beq	r6,r5,2858f4 <_free_r+0x2a4>
  285790:	28800117 	ldw	r2,4(r5)
  285794:	00ffff04 	movi	r3,-4
  285798:	10c4703a 	and	r2,r2,r3
  28579c:	3880022e 	bgeu	r7,r2,2857a8 <_free_r+0x158>
  2857a0:	29400217 	ldw	r5,8(r5)
  2857a4:	317ffa1e 	bne	r6,r5,285790 <_free_r+0x140>
  2857a8:	29800317 	ldw	r6,12(r5)
  2857ac:	41800315 	stw	r6,12(r8)
  2857b0:	41400215 	stw	r5,8(r8)
  2857b4:	8809883a 	mov	r4,r17
  2857b8:	2a000315 	stw	r8,12(r5)
  2857bc:	32000215 	stw	r8,8(r6)
  2857c0:	dfc00217 	ldw	ra,8(sp)
  2857c4:	dc400117 	ldw	r17,4(sp)
  2857c8:	dc000017 	ldw	r16,0(sp)
  2857cc:	dec00304 	addi	sp,sp,12
  2857d0:	0286e101 	jmpi	286e10 <__malloc_unlock>
  2857d4:	dfc00217 	ldw	ra,8(sp)
  2857d8:	dc400117 	ldw	r17,4(sp)
  2857dc:	dc000017 	ldw	r16,0(sp)
  2857e0:	dec00304 	addi	sp,sp,12
  2857e4:	f800283a 	ret
  2857e8:	31000217 	ldw	r4,8(r6)
  2857ec:	003fbd06 	br	2856e4 <_free_r+0x94>
  2857f0:	3806d0fa 	srli	r3,r7,3
  2857f4:	00800044 	movi	r2,1
  2857f8:	51400117 	ldw	r5,4(r10)
  2857fc:	180890fa 	slli	r4,r3,3
  285800:	1807d0ba 	srai	r3,r3,2
  285804:	22c9883a 	add	r4,r4,r11
  285808:	21800217 	ldw	r6,8(r4)
  28580c:	10c4983a 	sll	r2,r2,r3
  285810:	41000315 	stw	r4,12(r8)
  285814:	41800215 	stw	r6,8(r8)
  285818:	288ab03a 	or	r5,r5,r2
  28581c:	22000215 	stw	r8,8(r4)
  285820:	8809883a 	mov	r4,r17
  285824:	51400115 	stw	r5,4(r10)
  285828:	32000315 	stw	r8,12(r6)
  28582c:	dfc00217 	ldw	ra,8(sp)
  285830:	dc400117 	ldw	r17,4(sp)
  285834:	dc000017 	ldw	r16,0(sp)
  285838:	dec00304 	addi	sp,sp,12
  28583c:	0286e101 	jmpi	286e10 <__malloc_unlock>
  285840:	2880004c 	andi	r2,r5,1
  285844:	3a4d883a 	add	r6,r7,r9
  285848:	1000071e 	bne	r2,zero,285868 <_free_r+0x218>
  28584c:	80bffe17 	ldw	r2,-8(r16)
  285850:	4091c83a 	sub	r8,r8,r2
  285854:	41000317 	ldw	r4,12(r8)
  285858:	40c00217 	ldw	r3,8(r8)
  28585c:	308d883a 	add	r6,r6,r2
  285860:	20c00215 	stw	r3,8(r4)
  285864:	19000315 	stw	r4,12(r3)
  285868:	00800a74 	movhi	r2,41
  28586c:	10b1e404 	addi	r2,r2,-14448
  285870:	11000017 	ldw	r4,0(r2)
  285874:	30c00054 	ori	r3,r6,1
  285878:	52000215 	stw	r8,8(r10)
  28587c:	40c00115 	stw	r3,4(r8)
  285880:	313fa036 	bltu	r6,r4,285704 <_free_r+0xb4>
  285884:	00800a74 	movhi	r2,41
  285888:	10b8d804 	addi	r2,r2,-7328
  28588c:	11400017 	ldw	r5,0(r2)
  285890:	8809883a 	mov	r4,r17
  285894:	02855240 	call	285524 <_malloc_trim_r>
  285898:	003f9a06 	br	285704 <_free_r+0xb4>
  28589c:	00800104 	movi	r2,4
  2858a0:	10c0072e 	bgeu	r2,r3,2858c0 <_free_r+0x270>
  2858a4:	00800504 	movi	r2,20
  2858a8:	10c01936 	bltu	r2,r3,285910 <_free_r+0x2c0>
  2858ac:	188016c4 	addi	r2,r3,91
  2858b0:	100690fa 	slli	r3,r2,3
  2858b4:	003fb306 	br	285784 <_free_r+0x134>
  2858b8:	01400044 	movi	r5,1
  2858bc:	003f7e06 	br	2856b8 <_free_r+0x68>
  2858c0:	3804d1ba 	srli	r2,r7,6
  2858c4:	10800e04 	addi	r2,r2,56
  2858c8:	100690fa 	slli	r3,r2,3
  2858cc:	003fad06 	br	285784 <_free_r+0x134>
  2858d0:	22000315 	stw	r8,12(r4)
  2858d4:	22000215 	stw	r8,8(r4)
  2858d8:	3a05883a 	add	r2,r7,r8
  2858dc:	38c00054 	ori	r3,r7,1
  2858e0:	11c00015 	stw	r7,0(r2)
  2858e4:	41000215 	stw	r4,8(r8)
  2858e8:	40c00115 	stw	r3,4(r8)
  2858ec:	41000315 	stw	r4,12(r8)
  2858f0:	003f8406 	br	285704 <_free_r+0xb4>
  2858f4:	1005d0ba 	srai	r2,r2,2
  2858f8:	00c00044 	movi	r3,1
  2858fc:	51000117 	ldw	r4,4(r10)
  285900:	1886983a 	sll	r3,r3,r2
  285904:	20c8b03a 	or	r4,r4,r3
  285908:	51000115 	stw	r4,4(r10)
  28590c:	003fa706 	br	2857ac <_free_r+0x15c>
  285910:	00801504 	movi	r2,84
  285914:	10c00436 	bltu	r2,r3,285928 <_free_r+0x2d8>
  285918:	3804d33a 	srli	r2,r7,12
  28591c:	10801b84 	addi	r2,r2,110
  285920:	100690fa 	slli	r3,r2,3
  285924:	003f9706 	br	285784 <_free_r+0x134>
  285928:	00805504 	movi	r2,340
  28592c:	10c00436 	bltu	r2,r3,285940 <_free_r+0x2f0>
  285930:	3804d3fa 	srli	r2,r7,15
  285934:	10801dc4 	addi	r2,r2,119
  285938:	100690fa 	slli	r3,r2,3
  28593c:	003f9106 	br	285784 <_free_r+0x134>
  285940:	00815504 	movi	r2,1364
  285944:	10c0032e 	bgeu	r2,r3,285954 <_free_r+0x304>
  285948:	00801f84 	movi	r2,126
  28594c:	00c0fc04 	movi	r3,1008
  285950:	003f8c06 	br	285784 <_free_r+0x134>
  285954:	3804d4ba 	srli	r2,r7,18
  285958:	10801f04 	addi	r2,r2,124
  28595c:	100690fa 	slli	r3,r2,3
  285960:	003f8806 	br	285784 <_free_r+0x134>

00285964 <_fwalk_reent>:
  285964:	defff704 	addi	sp,sp,-36
  285968:	dcc00315 	stw	r19,12(sp)
  28596c:	24c0b804 	addi	r19,r4,736
  285970:	dd800615 	stw	r22,24(sp)
  285974:	dd400515 	stw	r21,20(sp)
  285978:	dfc00815 	stw	ra,32(sp)
  28597c:	ddc00715 	stw	r23,28(sp)
  285980:	dd000415 	stw	r20,16(sp)
  285984:	dc800215 	stw	r18,8(sp)
  285988:	dc400115 	stw	r17,4(sp)
  28598c:	dc000015 	stw	r16,0(sp)
  285990:	202b883a 	mov	r21,r4
  285994:	282d883a 	mov	r22,r5
  285998:	02852bc0 	call	2852bc <__sfp_lock_acquire>
  28599c:	98002126 	beq	r19,zero,285a24 <_fwalk_reent+0xc0>
  2859a0:	002f883a 	mov	r23,zero
  2859a4:	9c800117 	ldw	r18,4(r19)
  2859a8:	9c000217 	ldw	r16,8(r19)
  2859ac:	90bfffc4 	addi	r2,r18,-1
  2859b0:	10000d16 	blt	r2,zero,2859e8 <_fwalk_reent+0x84>
  2859b4:	0023883a 	mov	r17,zero
  2859b8:	053fffc4 	movi	r20,-1
  2859bc:	8080030f 	ldh	r2,12(r16)
  2859c0:	8c400044 	addi	r17,r17,1
  2859c4:	10000626 	beq	r2,zero,2859e0 <_fwalk_reent+0x7c>
  2859c8:	8080038f 	ldh	r2,14(r16)
  2859cc:	800b883a 	mov	r5,r16
  2859d0:	a809883a 	mov	r4,r21
  2859d4:	15000226 	beq	r2,r20,2859e0 <_fwalk_reent+0x7c>
  2859d8:	b03ee83a 	callr	r22
  2859dc:	b8aeb03a 	or	r23,r23,r2
  2859e0:	84001704 	addi	r16,r16,92
  2859e4:	947ff51e 	bne	r18,r17,2859bc <_fwalk_reent+0x58>
  2859e8:	9cc00017 	ldw	r19,0(r19)
  2859ec:	983fed1e 	bne	r19,zero,2859a4 <_fwalk_reent+0x40>
  2859f0:	02852c00 	call	2852c0 <__sfp_lock_release>
  2859f4:	b805883a 	mov	r2,r23
  2859f8:	dfc00817 	ldw	ra,32(sp)
  2859fc:	ddc00717 	ldw	r23,28(sp)
  285a00:	dd800617 	ldw	r22,24(sp)
  285a04:	dd400517 	ldw	r21,20(sp)
  285a08:	dd000417 	ldw	r20,16(sp)
  285a0c:	dcc00317 	ldw	r19,12(sp)
  285a10:	dc800217 	ldw	r18,8(sp)
  285a14:	dc400117 	ldw	r17,4(sp)
  285a18:	dc000017 	ldw	r16,0(sp)
  285a1c:	dec00904 	addi	sp,sp,36
  285a20:	f800283a 	ret
  285a24:	002f883a 	mov	r23,zero
  285a28:	003ff106 	br	2859f0 <_fwalk_reent+0x8c>

00285a2c <_fwalk>:
  285a2c:	defff804 	addi	sp,sp,-32
  285a30:	dcc00315 	stw	r19,12(sp)
  285a34:	24c0b804 	addi	r19,r4,736
  285a38:	dd400515 	stw	r21,20(sp)
  285a3c:	dfc00715 	stw	ra,28(sp)
  285a40:	dd800615 	stw	r22,24(sp)
  285a44:	dd000415 	stw	r20,16(sp)
  285a48:	dc800215 	stw	r18,8(sp)
  285a4c:	dc400115 	stw	r17,4(sp)
  285a50:	dc000015 	stw	r16,0(sp)
  285a54:	282b883a 	mov	r21,r5
  285a58:	02852bc0 	call	2852bc <__sfp_lock_acquire>
  285a5c:	98001f26 	beq	r19,zero,285adc <_fwalk+0xb0>
  285a60:	002d883a 	mov	r22,zero
  285a64:	9c800117 	ldw	r18,4(r19)
  285a68:	9c000217 	ldw	r16,8(r19)
  285a6c:	90bfffc4 	addi	r2,r18,-1
  285a70:	10000c16 	blt	r2,zero,285aa4 <_fwalk+0x78>
  285a74:	0023883a 	mov	r17,zero
  285a78:	053fffc4 	movi	r20,-1
  285a7c:	8080030f 	ldh	r2,12(r16)
  285a80:	8c400044 	addi	r17,r17,1
  285a84:	10000526 	beq	r2,zero,285a9c <_fwalk+0x70>
  285a88:	8080038f 	ldh	r2,14(r16)
  285a8c:	8009883a 	mov	r4,r16
  285a90:	15000226 	beq	r2,r20,285a9c <_fwalk+0x70>
  285a94:	a83ee83a 	callr	r21
  285a98:	b0acb03a 	or	r22,r22,r2
  285a9c:	84001704 	addi	r16,r16,92
  285aa0:	947ff61e 	bne	r18,r17,285a7c <_fwalk+0x50>
  285aa4:	9cc00017 	ldw	r19,0(r19)
  285aa8:	983fee1e 	bne	r19,zero,285a64 <_fwalk+0x38>
  285aac:	02852c00 	call	2852c0 <__sfp_lock_release>
  285ab0:	b005883a 	mov	r2,r22
  285ab4:	dfc00717 	ldw	ra,28(sp)
  285ab8:	dd800617 	ldw	r22,24(sp)
  285abc:	dd400517 	ldw	r21,20(sp)
  285ac0:	dd000417 	ldw	r20,16(sp)
  285ac4:	dcc00317 	ldw	r19,12(sp)
  285ac8:	dc800217 	ldw	r18,8(sp)
  285acc:	dc400117 	ldw	r17,4(sp)
  285ad0:	dc000017 	ldw	r16,0(sp)
  285ad4:	dec00804 	addi	sp,sp,32
  285ad8:	f800283a 	ret
  285adc:	002d883a 	mov	r22,zero
  285ae0:	003ff206 	br	285aac <_fwalk+0x80>

00285ae4 <__smakebuf_r>:
  285ae4:	2880030b 	ldhu	r2,12(r5)
  285ae8:	deffed04 	addi	sp,sp,-76
  285aec:	dc401015 	stw	r17,64(sp)
  285af0:	1080008c 	andi	r2,r2,2
  285af4:	dc000f15 	stw	r16,60(sp)
  285af8:	dfc01215 	stw	ra,72(sp)
  285afc:	dc801115 	stw	r18,68(sp)
  285b00:	2821883a 	mov	r16,r5
  285b04:	2023883a 	mov	r17,r4
  285b08:	10000b26 	beq	r2,zero,285b38 <__smakebuf_r+0x54>
  285b0c:	28c010c4 	addi	r3,r5,67
  285b10:	00800044 	movi	r2,1
  285b14:	28800515 	stw	r2,20(r5)
  285b18:	28c00415 	stw	r3,16(r5)
  285b1c:	28c00015 	stw	r3,0(r5)
  285b20:	dfc01217 	ldw	ra,72(sp)
  285b24:	dc801117 	ldw	r18,68(sp)
  285b28:	dc401017 	ldw	r17,64(sp)
  285b2c:	dc000f17 	ldw	r16,60(sp)
  285b30:	dec01304 	addi	sp,sp,76
  285b34:	f800283a 	ret
  285b38:	2940038f 	ldh	r5,14(r5)
  285b3c:	28002116 	blt	r5,zero,285bc4 <__smakebuf_r+0xe0>
  285b40:	d80d883a 	mov	r6,sp
  285b44:	02868180 	call	286818 <_fstat_r>
  285b48:	10001e16 	blt	r2,zero,285bc4 <__smakebuf_r+0xe0>
  285b4c:	d8800117 	ldw	r2,4(sp)
  285b50:	00e00014 	movui	r3,32768
  285b54:	113c000c 	andi	r4,r2,61440
  285b58:	20c03126 	beq	r4,r3,285c20 <__smakebuf_r+0x13c>
  285b5c:	8080030b 	ldhu	r2,12(r16)
  285b60:	00c80004 	movi	r3,8192
  285b64:	10820014 	ori	r2,r2,2048
  285b68:	8080030d 	sth	r2,12(r16)
  285b6c:	20c01e26 	beq	r4,r3,285be8 <__smakebuf_r+0x104>
  285b70:	04810004 	movi	r18,1024
  285b74:	8809883a 	mov	r4,r17
  285b78:	900b883a 	mov	r5,r18
  285b7c:	0285c780 	call	285c78 <_malloc_r>
  285b80:	1009883a 	mov	r4,r2
  285b84:	10003126 	beq	r2,zero,285c4c <__smakebuf_r+0x168>
  285b88:	80c0030b 	ldhu	r3,12(r16)
  285b8c:	00800a34 	movhi	r2,40
  285b90:	1094ec04 	addi	r2,r2,21424
  285b94:	88800f15 	stw	r2,60(r17)
  285b98:	18c02014 	ori	r3,r3,128
  285b9c:	84800515 	stw	r18,20(r16)
  285ba0:	80c0030d 	sth	r3,12(r16)
  285ba4:	81000415 	stw	r4,16(r16)
  285ba8:	81000015 	stw	r4,0(r16)
  285bac:	dfc01217 	ldw	ra,72(sp)
  285bb0:	dc801117 	ldw	r18,68(sp)
  285bb4:	dc401017 	ldw	r17,64(sp)
  285bb8:	dc000f17 	ldw	r16,60(sp)
  285bbc:	dec01304 	addi	sp,sp,76
  285bc0:	f800283a 	ret
  285bc4:	80c0030b 	ldhu	r3,12(r16)
  285bc8:	1880200c 	andi	r2,r3,128
  285bcc:	10000426 	beq	r2,zero,285be0 <__smakebuf_r+0xfc>
  285bd0:	04801004 	movi	r18,64
  285bd4:	18820014 	ori	r2,r3,2048
  285bd8:	8080030d 	sth	r2,12(r16)
  285bdc:	003fe506 	br	285b74 <__smakebuf_r+0x90>
  285be0:	04810004 	movi	r18,1024
  285be4:	003ffb06 	br	285bd4 <__smakebuf_r+0xf0>
  285be8:	8140038f 	ldh	r5,14(r16)
  285bec:	8809883a 	mov	r4,r17
  285bf0:	028688c0 	call	28688c <_isatty_r>
  285bf4:	103fde26 	beq	r2,zero,285b70 <__smakebuf_r+0x8c>
  285bf8:	8080030b 	ldhu	r2,12(r16)
  285bfc:	80c010c4 	addi	r3,r16,67
  285c00:	04810004 	movi	r18,1024
  285c04:	10800054 	ori	r2,r2,1
  285c08:	8080030d 	sth	r2,12(r16)
  285c0c:	00800044 	movi	r2,1
  285c10:	80c00415 	stw	r3,16(r16)
  285c14:	80800515 	stw	r2,20(r16)
  285c18:	80c00015 	stw	r3,0(r16)
  285c1c:	003fd506 	br	285b74 <__smakebuf_r+0x90>
  285c20:	80c00a17 	ldw	r3,40(r16)
  285c24:	00800a34 	movhi	r2,40
  285c28:	10993204 	addi	r2,r2,25800
  285c2c:	18bfcb1e 	bne	r3,r2,285b5c <__smakebuf_r+0x78>
  285c30:	8080030b 	ldhu	r2,12(r16)
  285c34:	00c10004 	movi	r3,1024
  285c38:	1825883a 	mov	r18,r3
  285c3c:	10c4b03a 	or	r2,r2,r3
  285c40:	8080030d 	sth	r2,12(r16)
  285c44:	80c01315 	stw	r3,76(r16)
  285c48:	003fca06 	br	285b74 <__smakebuf_r+0x90>
  285c4c:	8100030b 	ldhu	r4,12(r16)
  285c50:	2080800c 	andi	r2,r4,512
  285c54:	103fb21e 	bne	r2,zero,285b20 <__smakebuf_r+0x3c>
  285c58:	80c010c4 	addi	r3,r16,67
  285c5c:	21000094 	ori	r4,r4,2
  285c60:	00800044 	movi	r2,1
  285c64:	80800515 	stw	r2,20(r16)
  285c68:	8100030d 	sth	r4,12(r16)
  285c6c:	80c00415 	stw	r3,16(r16)
  285c70:	80c00015 	stw	r3,0(r16)
  285c74:	003faa06 	br	285b20 <__smakebuf_r+0x3c>

00285c78 <_malloc_r>:
  285c78:	defff604 	addi	sp,sp,-40
  285c7c:	28c002c4 	addi	r3,r5,11
  285c80:	00800584 	movi	r2,22
  285c84:	dc800215 	stw	r18,8(sp)
  285c88:	dfc00915 	stw	ra,36(sp)
  285c8c:	df000815 	stw	fp,32(sp)
  285c90:	ddc00715 	stw	r23,28(sp)
  285c94:	dd800615 	stw	r22,24(sp)
  285c98:	dd400515 	stw	r21,20(sp)
  285c9c:	dd000415 	stw	r20,16(sp)
  285ca0:	dcc00315 	stw	r19,12(sp)
  285ca4:	dc400115 	stw	r17,4(sp)
  285ca8:	dc000015 	stw	r16,0(sp)
  285cac:	2025883a 	mov	r18,r4
  285cb0:	10c01236 	bltu	r2,r3,285cfc <_malloc_r+0x84>
  285cb4:	04400404 	movi	r17,16
  285cb8:	8940142e 	bgeu	r17,r5,285d0c <_malloc_r+0x94>
  285cbc:	00800304 	movi	r2,12
  285cc0:	0007883a 	mov	r3,zero
  285cc4:	90800015 	stw	r2,0(r18)
  285cc8:	1805883a 	mov	r2,r3
  285ccc:	dfc00917 	ldw	ra,36(sp)
  285cd0:	df000817 	ldw	fp,32(sp)
  285cd4:	ddc00717 	ldw	r23,28(sp)
  285cd8:	dd800617 	ldw	r22,24(sp)
  285cdc:	dd400517 	ldw	r21,20(sp)
  285ce0:	dd000417 	ldw	r20,16(sp)
  285ce4:	dcc00317 	ldw	r19,12(sp)
  285ce8:	dc800217 	ldw	r18,8(sp)
  285cec:	dc400117 	ldw	r17,4(sp)
  285cf0:	dc000017 	ldw	r16,0(sp)
  285cf4:	dec00a04 	addi	sp,sp,40
  285cf8:	f800283a 	ret
  285cfc:	00bffe04 	movi	r2,-8
  285d00:	18a2703a 	and	r17,r3,r2
  285d04:	883fed16 	blt	r17,zero,285cbc <_malloc_r+0x44>
  285d08:	897fec36 	bltu	r17,r5,285cbc <_malloc_r+0x44>
  285d0c:	9009883a 	mov	r4,r18
  285d10:	0286df00 	call	286df0 <__malloc_lock>
  285d14:	00807dc4 	movi	r2,503
  285d18:	14402b2e 	bgeu	r2,r17,285dc8 <_malloc_r+0x150>
  285d1c:	8806d27a 	srli	r3,r17,9
  285d20:	18003f1e 	bne	r3,zero,285e20 <_malloc_r+0x1a8>
  285d24:	880cd0fa 	srli	r6,r17,3
  285d28:	300490fa 	slli	r2,r6,3
  285d2c:	02c00a74 	movhi	r11,41
  285d30:	5af0d704 	addi	r11,r11,-15524
  285d34:	12cb883a 	add	r5,r2,r11
  285d38:	2c000317 	ldw	r16,12(r5)
  285d3c:	580f883a 	mov	r7,r11
  285d40:	2c00041e 	bne	r5,r16,285d54 <_malloc_r+0xdc>
  285d44:	00000a06 	br	285d70 <_malloc_r+0xf8>
  285d48:	1800860e 	bge	r3,zero,285f64 <_malloc_r+0x2ec>
  285d4c:	84000317 	ldw	r16,12(r16)
  285d50:	2c000726 	beq	r5,r16,285d70 <_malloc_r+0xf8>
  285d54:	80800117 	ldw	r2,4(r16)
  285d58:	00ffff04 	movi	r3,-4
  285d5c:	10c8703a 	and	r4,r2,r3
  285d60:	2447c83a 	sub	r3,r4,r17
  285d64:	008003c4 	movi	r2,15
  285d68:	10fff70e 	bge	r2,r3,285d48 <_malloc_r+0xd0>
  285d6c:	31bfffc4 	addi	r6,r6,-1
  285d70:	32400044 	addi	r9,r6,1
  285d74:	02800a74 	movhi	r10,41
  285d78:	52b0d904 	addi	r10,r10,-15516
  285d7c:	54000217 	ldw	r16,8(r10)
  285d80:	8280a026 	beq	r16,r10,286004 <_malloc_r+0x38c>
  285d84:	80800117 	ldw	r2,4(r16)
  285d88:	00ffff04 	movi	r3,-4
  285d8c:	10ca703a 	and	r5,r2,r3
  285d90:	2c4dc83a 	sub	r6,r5,r17
  285d94:	008003c4 	movi	r2,15
  285d98:	11808316 	blt	r2,r6,285fa8 <_malloc_r+0x330>
  285d9c:	52800315 	stw	r10,12(r10)
  285da0:	52800215 	stw	r10,8(r10)
  285da4:	30002916 	blt	r6,zero,285e4c <_malloc_r+0x1d4>
  285da8:	8147883a 	add	r3,r16,r5
  285dac:	18800117 	ldw	r2,4(r3)
  285db0:	9009883a 	mov	r4,r18
  285db4:	10800054 	ori	r2,r2,1
  285db8:	18800115 	stw	r2,4(r3)
  285dbc:	0286e100 	call	286e10 <__malloc_unlock>
  285dc0:	80c00204 	addi	r3,r16,8
  285dc4:	003fc006 	br	285cc8 <_malloc_r+0x50>
  285dc8:	02c00a74 	movhi	r11,41
  285dcc:	5af0d704 	addi	r11,r11,-15524
  285dd0:	8ac5883a 	add	r2,r17,r11
  285dd4:	14000317 	ldw	r16,12(r2)
  285dd8:	580f883a 	mov	r7,r11
  285ddc:	8806d0fa 	srli	r3,r17,3
  285de0:	14006c26 	beq	r2,r16,285f94 <_malloc_r+0x31c>
  285de4:	80c00117 	ldw	r3,4(r16)
  285de8:	00bfff04 	movi	r2,-4
  285dec:	81800317 	ldw	r6,12(r16)
  285df0:	1886703a 	and	r3,r3,r2
  285df4:	80c7883a 	add	r3,r16,r3
  285df8:	18800117 	ldw	r2,4(r3)
  285dfc:	81400217 	ldw	r5,8(r16)
  285e00:	9009883a 	mov	r4,r18
  285e04:	10800054 	ori	r2,r2,1
  285e08:	18800115 	stw	r2,4(r3)
  285e0c:	31400215 	stw	r5,8(r6)
  285e10:	29800315 	stw	r6,12(r5)
  285e14:	0286e100 	call	286e10 <__malloc_unlock>
  285e18:	80c00204 	addi	r3,r16,8
  285e1c:	003faa06 	br	285cc8 <_malloc_r+0x50>
  285e20:	00800104 	movi	r2,4
  285e24:	10c0052e 	bgeu	r2,r3,285e3c <_malloc_r+0x1c4>
  285e28:	00800504 	movi	r2,20
  285e2c:	10c07836 	bltu	r2,r3,286010 <_malloc_r+0x398>
  285e30:	198016c4 	addi	r6,r3,91
  285e34:	300490fa 	slli	r2,r6,3
  285e38:	003fbc06 	br	285d2c <_malloc_r+0xb4>
  285e3c:	8804d1ba 	srli	r2,r17,6
  285e40:	11800e04 	addi	r6,r2,56
  285e44:	300490fa 	slli	r2,r6,3
  285e48:	003fb806 	br	285d2c <_malloc_r+0xb4>
  285e4c:	00807fc4 	movi	r2,511
  285e50:	1140bb36 	bltu	r2,r5,286140 <_malloc_r+0x4c8>
  285e54:	2806d0fa 	srli	r3,r5,3
  285e58:	573ffe04 	addi	fp,r10,-8
  285e5c:	00800044 	movi	r2,1
  285e60:	180890fa 	slli	r4,r3,3
  285e64:	1807d0ba 	srai	r3,r3,2
  285e68:	e1c00117 	ldw	r7,4(fp)
  285e6c:	5909883a 	add	r4,r11,r4
  285e70:	21400217 	ldw	r5,8(r4)
  285e74:	10c4983a 	sll	r2,r2,r3
  285e78:	81000315 	stw	r4,12(r16)
  285e7c:	81400215 	stw	r5,8(r16)
  285e80:	388eb03a 	or	r7,r7,r2
  285e84:	2c000315 	stw	r16,12(r5)
  285e88:	24000215 	stw	r16,8(r4)
  285e8c:	e1c00115 	stw	r7,4(fp)
  285e90:	4807883a 	mov	r3,r9
  285e94:	4800cd16 	blt	r9,zero,2861cc <_malloc_r+0x554>
  285e98:	1807d0ba 	srai	r3,r3,2
  285e9c:	00800044 	movi	r2,1
  285ea0:	10c8983a 	sll	r4,r2,r3
  285ea4:	39004436 	bltu	r7,r4,285fb8 <_malloc_r+0x340>
  285ea8:	21c4703a 	and	r2,r4,r7
  285eac:	10000a1e 	bne	r2,zero,285ed8 <_malloc_r+0x260>
  285eb0:	2109883a 	add	r4,r4,r4
  285eb4:	00bfff04 	movi	r2,-4
  285eb8:	4884703a 	and	r2,r9,r2
  285ebc:	3906703a 	and	r3,r7,r4
  285ec0:	12400104 	addi	r9,r2,4
  285ec4:	1800041e 	bne	r3,zero,285ed8 <_malloc_r+0x260>
  285ec8:	2109883a 	add	r4,r4,r4
  285ecc:	3904703a 	and	r2,r7,r4
  285ed0:	4a400104 	addi	r9,r9,4
  285ed4:	103ffc26 	beq	r2,zero,285ec8 <_malloc_r+0x250>
  285ed8:	480490fa 	slli	r2,r9,3
  285edc:	4819883a 	mov	r12,r9
  285ee0:	023fff04 	movi	r8,-4
  285ee4:	589b883a 	add	r13,r11,r2
  285ee8:	6807883a 	mov	r3,r13
  285eec:	014003c4 	movi	r5,15
  285ef0:	1c000317 	ldw	r16,12(r3)
  285ef4:	1c00041e 	bne	r3,r16,285f08 <_malloc_r+0x290>
  285ef8:	0000a706 	br	286198 <_malloc_r+0x520>
  285efc:	3000ab0e 	bge	r6,zero,2861ac <_malloc_r+0x534>
  285f00:	84000317 	ldw	r16,12(r16)
  285f04:	1c00a426 	beq	r3,r16,286198 <_malloc_r+0x520>
  285f08:	80800117 	ldw	r2,4(r16)
  285f0c:	1204703a 	and	r2,r2,r8
  285f10:	144dc83a 	sub	r6,r2,r17
  285f14:	29bff90e 	bge	r5,r6,285efc <_malloc_r+0x284>
  285f18:	81000317 	ldw	r4,12(r16)
  285f1c:	80c00217 	ldw	r3,8(r16)
  285f20:	89400054 	ori	r5,r17,1
  285f24:	8445883a 	add	r2,r16,r17
  285f28:	20c00215 	stw	r3,8(r4)
  285f2c:	19000315 	stw	r4,12(r3)
  285f30:	81400115 	stw	r5,4(r16)
  285f34:	1187883a 	add	r3,r2,r6
  285f38:	31000054 	ori	r4,r6,1
  285f3c:	50800315 	stw	r2,12(r10)
  285f40:	50800215 	stw	r2,8(r10)
  285f44:	19800015 	stw	r6,0(r3)
  285f48:	11000115 	stw	r4,4(r2)
  285f4c:	12800215 	stw	r10,8(r2)
  285f50:	12800315 	stw	r10,12(r2)
  285f54:	9009883a 	mov	r4,r18
  285f58:	0286e100 	call	286e10 <__malloc_unlock>
  285f5c:	80c00204 	addi	r3,r16,8
  285f60:	003f5906 	br	285cc8 <_malloc_r+0x50>
  285f64:	8109883a 	add	r4,r16,r4
  285f68:	20800117 	ldw	r2,4(r4)
  285f6c:	80c00217 	ldw	r3,8(r16)
  285f70:	81400317 	ldw	r5,12(r16)
  285f74:	10800054 	ori	r2,r2,1
  285f78:	20800115 	stw	r2,4(r4)
  285f7c:	28c00215 	stw	r3,8(r5)
  285f80:	19400315 	stw	r5,12(r3)
  285f84:	9009883a 	mov	r4,r18
  285f88:	0286e100 	call	286e10 <__malloc_unlock>
  285f8c:	80c00204 	addi	r3,r16,8
  285f90:	003f4d06 	br	285cc8 <_malloc_r+0x50>
  285f94:	80800204 	addi	r2,r16,8
  285f98:	14000317 	ldw	r16,12(r2)
  285f9c:	143f911e 	bne	r2,r16,285de4 <_malloc_r+0x16c>
  285fa0:	1a400084 	addi	r9,r3,2
  285fa4:	003f7306 	br	285d74 <_malloc_r+0xfc>
  285fa8:	88c00054 	ori	r3,r17,1
  285fac:	8445883a 	add	r2,r16,r17
  285fb0:	80c00115 	stw	r3,4(r16)
  285fb4:	003fdf06 	br	285f34 <_malloc_r+0x2bc>
  285fb8:	e4000217 	ldw	r16,8(fp)
  285fbc:	00bfff04 	movi	r2,-4
  285fc0:	80c00117 	ldw	r3,4(r16)
  285fc4:	802d883a 	mov	r22,r16
  285fc8:	18aa703a 	and	r21,r3,r2
  285fcc:	ac401636 	bltu	r21,r17,286028 <_malloc_r+0x3b0>
  285fd0:	ac49c83a 	sub	r4,r21,r17
  285fd4:	008003c4 	movi	r2,15
  285fd8:	1100130e 	bge	r2,r4,286028 <_malloc_r+0x3b0>
  285fdc:	88800054 	ori	r2,r17,1
  285fe0:	8447883a 	add	r3,r16,r17
  285fe4:	80800115 	stw	r2,4(r16)
  285fe8:	20800054 	ori	r2,r4,1
  285fec:	18800115 	stw	r2,4(r3)
  285ff0:	e0c00215 	stw	r3,8(fp)
  285ff4:	9009883a 	mov	r4,r18
  285ff8:	0286e100 	call	286e10 <__malloc_unlock>
  285ffc:	80c00204 	addi	r3,r16,8
  286000:	003f3106 	br	285cc8 <_malloc_r+0x50>
  286004:	39c00117 	ldw	r7,4(r7)
  286008:	573ffe04 	addi	fp,r10,-8
  28600c:	003fa006 	br	285e90 <_malloc_r+0x218>
  286010:	00801504 	movi	r2,84
  286014:	10c06736 	bltu	r2,r3,2861b4 <_malloc_r+0x53c>
  286018:	8804d33a 	srli	r2,r17,12
  28601c:	11801b84 	addi	r6,r2,110
  286020:	300490fa 	slli	r2,r6,3
  286024:	003f4106 	br	285d2c <_malloc_r+0xb4>
  286028:	d0a6ff17 	ldw	r2,-25604(gp)
  28602c:	d0e00c17 	ldw	r3,-32720(gp)
  286030:	053fffc4 	movi	r20,-1
  286034:	10800404 	addi	r2,r2,16
  286038:	88a7883a 	add	r19,r17,r2
  28603c:	1d000326 	beq	r3,r20,28604c <_malloc_r+0x3d4>
  286040:	98c3ffc4 	addi	r3,r19,4095
  286044:	00bc0004 	movi	r2,-4096
  286048:	18a6703a 	and	r19,r3,r2
  28604c:	9009883a 	mov	r4,r18
  286050:	980b883a 	mov	r5,r19
  286054:	02864500 	call	286450 <_sbrk_r>
  286058:	1009883a 	mov	r4,r2
  28605c:	15000426 	beq	r2,r20,286070 <_malloc_r+0x3f8>
  286060:	854b883a 	add	r5,r16,r21
  286064:	1029883a 	mov	r20,r2
  286068:	11405a2e 	bgeu	r2,r5,2861d4 <_malloc_r+0x55c>
  28606c:	87000c26 	beq	r16,fp,2860a0 <_malloc_r+0x428>
  286070:	e4000217 	ldw	r16,8(fp)
  286074:	80c00117 	ldw	r3,4(r16)
  286078:	00bfff04 	movi	r2,-4
  28607c:	1884703a 	and	r2,r3,r2
  286080:	14400336 	bltu	r2,r17,286090 <_malloc_r+0x418>
  286084:	1449c83a 	sub	r4,r2,r17
  286088:	008003c4 	movi	r2,15
  28608c:	113fd316 	blt	r2,r4,285fdc <_malloc_r+0x364>
  286090:	9009883a 	mov	r4,r18
  286094:	0286e100 	call	286e10 <__malloc_unlock>
  286098:	0007883a 	mov	r3,zero
  28609c:	003f0a06 	br	285cc8 <_malloc_r+0x50>
  2860a0:	05c00a74 	movhi	r23,41
  2860a4:	bdf8db04 	addi	r23,r23,-7316
  2860a8:	b8800017 	ldw	r2,0(r23)
  2860ac:	988d883a 	add	r6,r19,r2
  2860b0:	b9800015 	stw	r6,0(r23)
  2860b4:	d0e00c17 	ldw	r3,-32720(gp)
  2860b8:	00bfffc4 	movi	r2,-1
  2860bc:	18808e26 	beq	r3,r2,2862f8 <_malloc_r+0x680>
  2860c0:	2145c83a 	sub	r2,r4,r5
  2860c4:	3085883a 	add	r2,r6,r2
  2860c8:	b8800015 	stw	r2,0(r23)
  2860cc:	20c001cc 	andi	r3,r4,7
  2860d0:	18005f1e 	bne	r3,zero,286250 <_malloc_r+0x5d8>
  2860d4:	000b883a 	mov	r5,zero
  2860d8:	a4c5883a 	add	r2,r20,r19
  2860dc:	1083ffcc 	andi	r2,r2,4095
  2860e0:	00c40004 	movi	r3,4096
  2860e4:	1887c83a 	sub	r3,r3,r2
  2860e8:	28e7883a 	add	r19,r5,r3
  2860ec:	9009883a 	mov	r4,r18
  2860f0:	980b883a 	mov	r5,r19
  2860f4:	02864500 	call	286450 <_sbrk_r>
  2860f8:	1007883a 	mov	r3,r2
  2860fc:	00bfffc4 	movi	r2,-1
  286100:	18807a26 	beq	r3,r2,2862ec <_malloc_r+0x674>
  286104:	1d05c83a 	sub	r2,r3,r20
  286108:	9885883a 	add	r2,r19,r2
  28610c:	10c00054 	ori	r3,r2,1
  286110:	b8800017 	ldw	r2,0(r23)
  286114:	a021883a 	mov	r16,r20
  286118:	a0c00115 	stw	r3,4(r20)
  28611c:	9885883a 	add	r2,r19,r2
  286120:	b8800015 	stw	r2,0(r23)
  286124:	e5000215 	stw	r20,8(fp)
  286128:	b7003626 	beq	r22,fp,286204 <_malloc_r+0x58c>
  28612c:	018003c4 	movi	r6,15
  286130:	35404b36 	bltu	r6,r21,286260 <_malloc_r+0x5e8>
  286134:	00800044 	movi	r2,1
  286138:	a0800115 	stw	r2,4(r20)
  28613c:	003fcd06 	br	286074 <_malloc_r+0x3fc>
  286140:	2808d27a 	srli	r4,r5,9
  286144:	2000371e 	bne	r4,zero,286224 <_malloc_r+0x5ac>
  286148:	2808d0fa 	srli	r4,r5,3
  28614c:	200690fa 	slli	r3,r4,3
  286150:	1ad1883a 	add	r8,r3,r11
  286154:	41800217 	ldw	r6,8(r8)
  286158:	41805b26 	beq	r8,r6,2862c8 <_malloc_r+0x650>
  28615c:	30800117 	ldw	r2,4(r6)
  286160:	00ffff04 	movi	r3,-4
  286164:	10c4703a 	and	r2,r2,r3
  286168:	2880022e 	bgeu	r5,r2,286174 <_malloc_r+0x4fc>
  28616c:	31800217 	ldw	r6,8(r6)
  286170:	41bffa1e 	bne	r8,r6,28615c <_malloc_r+0x4e4>
  286174:	32000317 	ldw	r8,12(r6)
  286178:	39c00117 	ldw	r7,4(r7)
  28617c:	82000315 	stw	r8,12(r16)
  286180:	81800215 	stw	r6,8(r16)
  286184:	07000a74 	movhi	fp,41
  286188:	e730d704 	addi	fp,fp,-15524
  28618c:	34000315 	stw	r16,12(r6)
  286190:	44000215 	stw	r16,8(r8)
  286194:	003f3e06 	br	285e90 <_malloc_r+0x218>
  286198:	63000044 	addi	r12,r12,1
  28619c:	608000cc 	andi	r2,r12,3
  2861a0:	10005d26 	beq	r2,zero,286318 <_malloc_r+0x6a0>
  2861a4:	18c00204 	addi	r3,r3,8
  2861a8:	003f5106 	br	285ef0 <_malloc_r+0x278>
  2861ac:	8089883a 	add	r4,r16,r2
  2861b0:	003f6d06 	br	285f68 <_malloc_r+0x2f0>
  2861b4:	00805504 	movi	r2,340
  2861b8:	10c02036 	bltu	r2,r3,28623c <_malloc_r+0x5c4>
  2861bc:	8804d3fa 	srli	r2,r17,15
  2861c0:	11801dc4 	addi	r6,r2,119
  2861c4:	300490fa 	slli	r2,r6,3
  2861c8:	003ed806 	br	285d2c <_malloc_r+0xb4>
  2861cc:	48c000c4 	addi	r3,r9,3
  2861d0:	003f3106 	br	285e98 <_malloc_r+0x220>
  2861d4:	05c00a74 	movhi	r23,41
  2861d8:	bdf8db04 	addi	r23,r23,-7316
  2861dc:	b8800017 	ldw	r2,0(r23)
  2861e0:	988d883a 	add	r6,r19,r2
  2861e4:	b9800015 	stw	r6,0(r23)
  2861e8:	293fb21e 	bne	r5,r4,2860b4 <_malloc_r+0x43c>
  2861ec:	2083ffcc 	andi	r2,r4,4095
  2861f0:	103fb01e 	bne	r2,zero,2860b4 <_malloc_r+0x43c>
  2861f4:	e4000217 	ldw	r16,8(fp)
  2861f8:	9d45883a 	add	r2,r19,r21
  2861fc:	10800054 	ori	r2,r2,1
  286200:	80800115 	stw	r2,4(r16)
  286204:	b8c00017 	ldw	r3,0(r23)
  286208:	d0a70017 	ldw	r2,-25600(gp)
  28620c:	10c0012e 	bgeu	r2,r3,286214 <_malloc_r+0x59c>
  286210:	d0e70015 	stw	r3,-25600(gp)
  286214:	d0a70117 	ldw	r2,-25596(gp)
  286218:	10ff962e 	bgeu	r2,r3,286074 <_malloc_r+0x3fc>
  28621c:	d0e70115 	stw	r3,-25596(gp)
  286220:	003f9406 	br	286074 <_malloc_r+0x3fc>
  286224:	00800104 	movi	r2,4
  286228:	11001e36 	bltu	r2,r4,2862a4 <_malloc_r+0x62c>
  28622c:	2804d1ba 	srli	r2,r5,6
  286230:	11000e04 	addi	r4,r2,56
  286234:	200690fa 	slli	r3,r4,3
  286238:	003fc506 	br	286150 <_malloc_r+0x4d8>
  28623c:	00815504 	movi	r2,1364
  286240:	10c01d2e 	bgeu	r2,r3,2862b8 <_malloc_r+0x640>
  286244:	01801f84 	movi	r6,126
  286248:	0080fc04 	movi	r2,1008
  28624c:	003eb706 	br	285d2c <_malloc_r+0xb4>
  286250:	00800204 	movi	r2,8
  286254:	10cbc83a 	sub	r5,r2,r3
  286258:	2169883a 	add	r20,r4,r5
  28625c:	003f9e06 	br	2860d8 <_malloc_r+0x460>
  286260:	00bffe04 	movi	r2,-8
  286264:	a93ffd04 	addi	r4,r21,-12
  286268:	2088703a 	and	r4,r4,r2
  28626c:	b10b883a 	add	r5,r22,r4
  286270:	00c00144 	movi	r3,5
  286274:	28c00215 	stw	r3,8(r5)
  286278:	28c00115 	stw	r3,4(r5)
  28627c:	b0800117 	ldw	r2,4(r22)
  286280:	1080004c 	andi	r2,r2,1
  286284:	2084b03a 	or	r2,r4,r2
  286288:	b0800115 	stw	r2,4(r22)
  28628c:	313fdd2e 	bgeu	r6,r4,286204 <_malloc_r+0x58c>
  286290:	b1400204 	addi	r5,r22,8
  286294:	9009883a 	mov	r4,r18
  286298:	02856500 	call	285650 <_free_r>
  28629c:	e4000217 	ldw	r16,8(fp)
  2862a0:	003fd806 	br	286204 <_malloc_r+0x58c>
  2862a4:	00800504 	movi	r2,20
  2862a8:	11001536 	bltu	r2,r4,286300 <_malloc_r+0x688>
  2862ac:	210016c4 	addi	r4,r4,91
  2862b0:	200690fa 	slli	r3,r4,3
  2862b4:	003fa606 	br	286150 <_malloc_r+0x4d8>
  2862b8:	8804d4ba 	srli	r2,r17,18
  2862bc:	11801f04 	addi	r6,r2,124
  2862c0:	300490fa 	slli	r2,r6,3
  2862c4:	003e9906 	br	285d2c <_malloc_r+0xb4>
  2862c8:	2009d0ba 	srai	r4,r4,2
  2862cc:	01400a74 	movhi	r5,41
  2862d0:	2970d704 	addi	r5,r5,-15524
  2862d4:	00c00044 	movi	r3,1
  2862d8:	28800117 	ldw	r2,4(r5)
  2862dc:	1906983a 	sll	r3,r3,r4
  2862e0:	10c4b03a 	or	r2,r2,r3
  2862e4:	28800115 	stw	r2,4(r5)
  2862e8:	003fa306 	br	286178 <_malloc_r+0x500>
  2862ec:	0027883a 	mov	r19,zero
  2862f0:	00c00044 	movi	r3,1
  2862f4:	003f8606 	br	286110 <_malloc_r+0x498>
  2862f8:	d1200c15 	stw	r4,-32720(gp)
  2862fc:	003f7306 	br	2860cc <_malloc_r+0x454>
  286300:	00801504 	movi	r2,84
  286304:	11001936 	bltu	r2,r4,28636c <_malloc_r+0x6f4>
  286308:	2804d33a 	srli	r2,r5,12
  28630c:	11001b84 	addi	r4,r2,110
  286310:	200690fa 	slli	r3,r4,3
  286314:	003f8e06 	br	286150 <_malloc_r+0x4d8>
  286318:	480b883a 	mov	r5,r9
  28631c:	6807883a 	mov	r3,r13
  286320:	288000cc 	andi	r2,r5,3
  286324:	18fffe04 	addi	r3,r3,-8
  286328:	297fffc4 	addi	r5,r5,-1
  28632c:	10001526 	beq	r2,zero,286384 <_malloc_r+0x70c>
  286330:	18800217 	ldw	r2,8(r3)
  286334:	10fffa26 	beq	r2,r3,286320 <_malloc_r+0x6a8>
  286338:	2109883a 	add	r4,r4,r4
  28633c:	393f1e36 	bltu	r7,r4,285fb8 <_malloc_r+0x340>
  286340:	203f1d26 	beq	r4,zero,285fb8 <_malloc_r+0x340>
  286344:	21c4703a 	and	r2,r4,r7
  286348:	10000226 	beq	r2,zero,286354 <_malloc_r+0x6dc>
  28634c:	6013883a 	mov	r9,r12
  286350:	003ee106 	br	285ed8 <_malloc_r+0x260>
  286354:	2109883a 	add	r4,r4,r4
  286358:	3904703a 	and	r2,r7,r4
  28635c:	63000104 	addi	r12,r12,4
  286360:	103ffc26 	beq	r2,zero,286354 <_malloc_r+0x6dc>
  286364:	6013883a 	mov	r9,r12
  286368:	003edb06 	br	285ed8 <_malloc_r+0x260>
  28636c:	00805504 	movi	r2,340
  286370:	11000836 	bltu	r2,r4,286394 <_malloc_r+0x71c>
  286374:	2804d3fa 	srli	r2,r5,15
  286378:	11001dc4 	addi	r4,r2,119
  28637c:	200690fa 	slli	r3,r4,3
  286380:	003f7306 	br	286150 <_malloc_r+0x4d8>
  286384:	0104303a 	nor	r2,zero,r4
  286388:	388e703a 	and	r7,r7,r2
  28638c:	e1c00115 	stw	r7,4(fp)
  286390:	003fe906 	br	286338 <_malloc_r+0x6c0>
  286394:	00815504 	movi	r2,1364
  286398:	1100032e 	bgeu	r2,r4,2863a8 <_malloc_r+0x730>
  28639c:	01001f84 	movi	r4,126
  2863a0:	00c0fc04 	movi	r3,1008
  2863a4:	003f6a06 	br	286150 <_malloc_r+0x4d8>
  2863a8:	2804d4ba 	srli	r2,r5,18
  2863ac:	11001f04 	addi	r4,r2,124
  2863b0:	200690fa 	slli	r3,r4,3
  2863b4:	003f6606 	br	286150 <_malloc_r+0x4d8>

002863b8 <memset>:
  2863b8:	008000c4 	movi	r2,3
  2863bc:	29403fcc 	andi	r5,r5,255
  2863c0:	2007883a 	mov	r3,r4
  2863c4:	1180022e 	bgeu	r2,r6,2863d0 <memset+0x18>
  2863c8:	2084703a 	and	r2,r4,r2
  2863cc:	10000826 	beq	r2,zero,2863f0 <memset+0x38>
  2863d0:	30000526 	beq	r6,zero,2863e8 <memset+0x30>
  2863d4:	2805883a 	mov	r2,r5
  2863d8:	30cd883a 	add	r6,r6,r3
  2863dc:	18800005 	stb	r2,0(r3)
  2863e0:	18c00044 	addi	r3,r3,1
  2863e4:	19bffd1e 	bne	r3,r6,2863dc <memset+0x24>
  2863e8:	2005883a 	mov	r2,r4
  2863ec:	f800283a 	ret
  2863f0:	2804923a 	slli	r2,r5,8
  2863f4:	020003c4 	movi	r8,15
  2863f8:	200f883a 	mov	r7,r4
  2863fc:	2884b03a 	or	r2,r5,r2
  286400:	1006943a 	slli	r3,r2,16
  286404:	10c6b03a 	or	r3,r2,r3
  286408:	41800a2e 	bgeu	r8,r6,286434 <memset+0x7c>
  28640c:	4005883a 	mov	r2,r8
  286410:	31bffc04 	addi	r6,r6,-16
  286414:	38c00015 	stw	r3,0(r7)
  286418:	38c00115 	stw	r3,4(r7)
  28641c:	38c00215 	stw	r3,8(r7)
  286420:	38c00315 	stw	r3,12(r7)
  286424:	39c00404 	addi	r7,r7,16
  286428:	11bff936 	bltu	r2,r6,286410 <memset+0x58>
  28642c:	008000c4 	movi	r2,3
  286430:	1180052e 	bgeu	r2,r6,286448 <memset+0x90>
  286434:	31bfff04 	addi	r6,r6,-4
  286438:	008000c4 	movi	r2,3
  28643c:	38c00015 	stw	r3,0(r7)
  286440:	39c00104 	addi	r7,r7,4
  286444:	11bffb36 	bltu	r2,r6,286434 <memset+0x7c>
  286448:	3807883a 	mov	r3,r7
  28644c:	003fe006 	br	2863d0 <memset+0x18>

00286450 <_sbrk_r>:
  286450:	defffd04 	addi	sp,sp,-12
  286454:	dc000015 	stw	r16,0(sp)
  286458:	04000a74 	movhi	r16,41
  28645c:	8438d704 	addi	r16,r16,-7332
  286460:	dc400115 	stw	r17,4(sp)
  286464:	80000015 	stw	zero,0(r16)
  286468:	2023883a 	mov	r17,r4
  28646c:	2809883a 	mov	r4,r5
  286470:	dfc00215 	stw	ra,8(sp)
  286474:	0286fb00 	call	286fb0 <sbrk>
  286478:	1007883a 	mov	r3,r2
  28647c:	00bfffc4 	movi	r2,-1
  286480:	18800626 	beq	r3,r2,28649c <_sbrk_r+0x4c>
  286484:	1805883a 	mov	r2,r3
  286488:	dfc00217 	ldw	ra,8(sp)
  28648c:	dc400117 	ldw	r17,4(sp)
  286490:	dc000017 	ldw	r16,0(sp)
  286494:	dec00304 	addi	sp,sp,12
  286498:	f800283a 	ret
  28649c:	80800017 	ldw	r2,0(r16)
  2864a0:	103ff826 	beq	r2,zero,286484 <_sbrk_r+0x34>
  2864a4:	88800015 	stw	r2,0(r17)
  2864a8:	1805883a 	mov	r2,r3
  2864ac:	dfc00217 	ldw	ra,8(sp)
  2864b0:	dc400117 	ldw	r17,4(sp)
  2864b4:	dc000017 	ldw	r16,0(sp)
  2864b8:	dec00304 	addi	sp,sp,12
  2864bc:	f800283a 	ret

002864c0 <__sclose>:
  2864c0:	2940038f 	ldh	r5,14(r5)
  2864c4:	02866841 	jmpi	286684 <_close_r>

002864c8 <__sseek>:
  2864c8:	defffe04 	addi	sp,sp,-8
  2864cc:	dc000015 	stw	r16,0(sp)
  2864d0:	2821883a 	mov	r16,r5
  2864d4:	2940038f 	ldh	r5,14(r5)
  2864d8:	dfc00115 	stw	ra,4(sp)
  2864dc:	02868fc0 	call	2868fc <_lseek_r>
  2864e0:	1007883a 	mov	r3,r2
  2864e4:	00bfffc4 	movi	r2,-1
  2864e8:	18800926 	beq	r3,r2,286510 <__sseek+0x48>
  2864ec:	8080030b 	ldhu	r2,12(r16)
  2864f0:	80c01415 	stw	r3,80(r16)
  2864f4:	10840014 	ori	r2,r2,4096
  2864f8:	8080030d 	sth	r2,12(r16)
  2864fc:	1805883a 	mov	r2,r3
  286500:	dfc00117 	ldw	ra,4(sp)
  286504:	dc000017 	ldw	r16,0(sp)
  286508:	dec00204 	addi	sp,sp,8
  28650c:	f800283a 	ret
  286510:	8080030b 	ldhu	r2,12(r16)
  286514:	10bbffcc 	andi	r2,r2,61439
  286518:	8080030d 	sth	r2,12(r16)
  28651c:	1805883a 	mov	r2,r3
  286520:	dfc00117 	ldw	ra,4(sp)
  286524:	dc000017 	ldw	r16,0(sp)
  286528:	dec00204 	addi	sp,sp,8
  28652c:	f800283a 	ret

00286530 <__swrite>:
  286530:	2880030b 	ldhu	r2,12(r5)
  286534:	defffb04 	addi	sp,sp,-20
  286538:	dcc00315 	stw	r19,12(sp)
  28653c:	1080400c 	andi	r2,r2,256
  286540:	dc800215 	stw	r18,8(sp)
  286544:	dc400115 	stw	r17,4(sp)
  286548:	dc000015 	stw	r16,0(sp)
  28654c:	3027883a 	mov	r19,r6
  286550:	3825883a 	mov	r18,r7
  286554:	dfc00415 	stw	ra,16(sp)
  286558:	2821883a 	mov	r16,r5
  28655c:	000d883a 	mov	r6,zero
  286560:	01c00084 	movi	r7,2
  286564:	2023883a 	mov	r17,r4
  286568:	10000226 	beq	r2,zero,286574 <__swrite+0x44>
  28656c:	2940038f 	ldh	r5,14(r5)
  286570:	02868fc0 	call	2868fc <_lseek_r>
  286574:	8080030b 	ldhu	r2,12(r16)
  286578:	8140038f 	ldh	r5,14(r16)
  28657c:	8809883a 	mov	r4,r17
  286580:	10bbffcc 	andi	r2,r2,61439
  286584:	980d883a 	mov	r6,r19
  286588:	900f883a 	mov	r7,r18
  28658c:	8080030d 	sth	r2,12(r16)
  286590:	dfc00417 	ldw	ra,16(sp)
  286594:	dcc00317 	ldw	r19,12(sp)
  286598:	dc800217 	ldw	r18,8(sp)
  28659c:	dc400117 	ldw	r17,4(sp)
  2865a0:	dc000017 	ldw	r16,0(sp)
  2865a4:	dec00504 	addi	sp,sp,20
  2865a8:	028660c1 	jmpi	28660c <_write_r>

002865ac <__sread>:
  2865ac:	defffe04 	addi	sp,sp,-8
  2865b0:	dc000015 	stw	r16,0(sp)
  2865b4:	2821883a 	mov	r16,r5
  2865b8:	2940038f 	ldh	r5,14(r5)
  2865bc:	dfc00115 	stw	ra,4(sp)
  2865c0:	02869740 	call	286974 <_read_r>
  2865c4:	1007883a 	mov	r3,r2
  2865c8:	10000816 	blt	r2,zero,2865ec <__sread+0x40>
  2865cc:	80801417 	ldw	r2,80(r16)
  2865d0:	10c5883a 	add	r2,r2,r3
  2865d4:	80801415 	stw	r2,80(r16)
  2865d8:	1805883a 	mov	r2,r3
  2865dc:	dfc00117 	ldw	ra,4(sp)
  2865e0:	dc000017 	ldw	r16,0(sp)
  2865e4:	dec00204 	addi	sp,sp,8
  2865e8:	f800283a 	ret
  2865ec:	8080030b 	ldhu	r2,12(r16)
  2865f0:	10bbffcc 	andi	r2,r2,61439
  2865f4:	8080030d 	sth	r2,12(r16)
  2865f8:	1805883a 	mov	r2,r3
  2865fc:	dfc00117 	ldw	ra,4(sp)
  286600:	dc000017 	ldw	r16,0(sp)
  286604:	dec00204 	addi	sp,sp,8
  286608:	f800283a 	ret

0028660c <_write_r>:
  28660c:	defffd04 	addi	sp,sp,-12
  286610:	dc000015 	stw	r16,0(sp)
  286614:	04000a74 	movhi	r16,41
  286618:	8438d704 	addi	r16,r16,-7332
  28661c:	dc400115 	stw	r17,4(sp)
  286620:	80000015 	stw	zero,0(r16)
  286624:	2023883a 	mov	r17,r4
  286628:	2809883a 	mov	r4,r5
  28662c:	300b883a 	mov	r5,r6
  286630:	380d883a 	mov	r6,r7
  286634:	dfc00215 	stw	ra,8(sp)
  286638:	028706c0 	call	28706c <write>
  28663c:	1007883a 	mov	r3,r2
  286640:	00bfffc4 	movi	r2,-1
  286644:	18800626 	beq	r3,r2,286660 <_write_r+0x54>
  286648:	1805883a 	mov	r2,r3
  28664c:	dfc00217 	ldw	ra,8(sp)
  286650:	dc400117 	ldw	r17,4(sp)
  286654:	dc000017 	ldw	r16,0(sp)
  286658:	dec00304 	addi	sp,sp,12
  28665c:	f800283a 	ret
  286660:	80800017 	ldw	r2,0(r16)
  286664:	103ff826 	beq	r2,zero,286648 <_write_r+0x3c>
  286668:	88800015 	stw	r2,0(r17)
  28666c:	1805883a 	mov	r2,r3
  286670:	dfc00217 	ldw	ra,8(sp)
  286674:	dc400117 	ldw	r17,4(sp)
  286678:	dc000017 	ldw	r16,0(sp)
  28667c:	dec00304 	addi	sp,sp,12
  286680:	f800283a 	ret

00286684 <_close_r>:
  286684:	defffd04 	addi	sp,sp,-12
  286688:	dc000015 	stw	r16,0(sp)
  28668c:	04000a74 	movhi	r16,41
  286690:	8438d704 	addi	r16,r16,-7332
  286694:	dc400115 	stw	r17,4(sp)
  286698:	80000015 	stw	zero,0(r16)
  28669c:	2023883a 	mov	r17,r4
  2866a0:	2809883a 	mov	r4,r5
  2866a4:	dfc00215 	stw	ra,8(sp)
  2866a8:	02838580 	call	283858 <close>
  2866ac:	1007883a 	mov	r3,r2
  2866b0:	00bfffc4 	movi	r2,-1
  2866b4:	18800626 	beq	r3,r2,2866d0 <_close_r+0x4c>
  2866b8:	1805883a 	mov	r2,r3
  2866bc:	dfc00217 	ldw	ra,8(sp)
  2866c0:	dc400117 	ldw	r17,4(sp)
  2866c4:	dc000017 	ldw	r16,0(sp)
  2866c8:	dec00304 	addi	sp,sp,12
  2866cc:	f800283a 	ret
  2866d0:	80800017 	ldw	r2,0(r16)
  2866d4:	103ff826 	beq	r2,zero,2866b8 <_close_r+0x34>
  2866d8:	88800015 	stw	r2,0(r17)
  2866dc:	1805883a 	mov	r2,r3
  2866e0:	dfc00217 	ldw	ra,8(sp)
  2866e4:	dc400117 	ldw	r17,4(sp)
  2866e8:	dc000017 	ldw	r16,0(sp)
  2866ec:	dec00304 	addi	sp,sp,12
  2866f0:	f800283a 	ret

002866f4 <_fclose_r>:
  2866f4:	defffc04 	addi	sp,sp,-16
  2866f8:	dc400115 	stw	r17,4(sp)
  2866fc:	dc000015 	stw	r16,0(sp)
  286700:	dfc00315 	stw	ra,12(sp)
  286704:	dc800215 	stw	r18,8(sp)
  286708:	2821883a 	mov	r16,r5
  28670c:	2023883a 	mov	r17,r4
  286710:	28002926 	beq	r5,zero,2867b8 <_fclose_r+0xc4>
  286714:	02852bc0 	call	2852bc <__sfp_lock_acquire>
  286718:	88000226 	beq	r17,zero,286724 <_fclose_r+0x30>
  28671c:	88800e17 	ldw	r2,56(r17)
  286720:	10002d26 	beq	r2,zero,2867d8 <_fclose_r+0xe4>
  286724:	8080030f 	ldh	r2,12(r16)
  286728:	10002226 	beq	r2,zero,2867b4 <_fclose_r+0xc0>
  28672c:	8809883a 	mov	r4,r17
  286730:	800b883a 	mov	r5,r16
  286734:	02850340 	call	285034 <_fflush_r>
  286738:	1025883a 	mov	r18,r2
  28673c:	80800b17 	ldw	r2,44(r16)
  286740:	10000426 	beq	r2,zero,286754 <_fclose_r+0x60>
  286744:	81400717 	ldw	r5,28(r16)
  286748:	8809883a 	mov	r4,r17
  28674c:	103ee83a 	callr	r2
  286750:	10002a16 	blt	r2,zero,2867fc <_fclose_r+0x108>
  286754:	8080030b 	ldhu	r2,12(r16)
  286758:	1080200c 	andi	r2,r2,128
  28675c:	1000231e 	bne	r2,zero,2867ec <_fclose_r+0xf8>
  286760:	81400c17 	ldw	r5,48(r16)
  286764:	28000526 	beq	r5,zero,28677c <_fclose_r+0x88>
  286768:	80801004 	addi	r2,r16,64
  28676c:	28800226 	beq	r5,r2,286778 <_fclose_r+0x84>
  286770:	8809883a 	mov	r4,r17
  286774:	02856500 	call	285650 <_free_r>
  286778:	80000c15 	stw	zero,48(r16)
  28677c:	81401117 	ldw	r5,68(r16)
  286780:	28000326 	beq	r5,zero,286790 <_fclose_r+0x9c>
  286784:	8809883a 	mov	r4,r17
  286788:	02856500 	call	285650 <_free_r>
  28678c:	80001115 	stw	zero,68(r16)
  286790:	8000030d 	sth	zero,12(r16)
  286794:	02852c00 	call	2852c0 <__sfp_lock_release>
  286798:	9005883a 	mov	r2,r18
  28679c:	dfc00317 	ldw	ra,12(sp)
  2867a0:	dc800217 	ldw	r18,8(sp)
  2867a4:	dc400117 	ldw	r17,4(sp)
  2867a8:	dc000017 	ldw	r16,0(sp)
  2867ac:	dec00404 	addi	sp,sp,16
  2867b0:	f800283a 	ret
  2867b4:	02852c00 	call	2852c0 <__sfp_lock_release>
  2867b8:	0025883a 	mov	r18,zero
  2867bc:	9005883a 	mov	r2,r18
  2867c0:	dfc00317 	ldw	ra,12(sp)
  2867c4:	dc800217 	ldw	r18,8(sp)
  2867c8:	dc400117 	ldw	r17,4(sp)
  2867cc:	dc000017 	ldw	r16,0(sp)
  2867d0:	dec00404 	addi	sp,sp,16
  2867d4:	f800283a 	ret
  2867d8:	8809883a 	mov	r4,r17
  2867dc:	02852cc0 	call	2852cc <__sinit>
  2867e0:	8080030f 	ldh	r2,12(r16)
  2867e4:	103fd11e 	bne	r2,zero,28672c <_fclose_r+0x38>
  2867e8:	003ff206 	br	2867b4 <_fclose_r+0xc0>
  2867ec:	81400417 	ldw	r5,16(r16)
  2867f0:	8809883a 	mov	r4,r17
  2867f4:	02856500 	call	285650 <_free_r>
  2867f8:	003fd906 	br	286760 <_fclose_r+0x6c>
  2867fc:	04bfffc4 	movi	r18,-1
  286800:	003fd406 	br	286754 <_fclose_r+0x60>

00286804 <fclose>:
  286804:	00800a74 	movhi	r2,41
  286808:	10b1e204 	addi	r2,r2,-14456
  28680c:	200b883a 	mov	r5,r4
  286810:	11000017 	ldw	r4,0(r2)
  286814:	02866f41 	jmpi	2866f4 <_fclose_r>

00286818 <_fstat_r>:
  286818:	defffd04 	addi	sp,sp,-12
  28681c:	dc000015 	stw	r16,0(sp)
  286820:	04000a74 	movhi	r16,41
  286824:	8438d704 	addi	r16,r16,-7332
  286828:	dc400115 	stw	r17,4(sp)
  28682c:	80000015 	stw	zero,0(r16)
  286830:	2023883a 	mov	r17,r4
  286834:	2809883a 	mov	r4,r5
  286838:	300b883a 	mov	r5,r6
  28683c:	dfc00215 	stw	ra,8(sp)
  286840:	0286a4c0 	call	286a4c <fstat>
  286844:	1007883a 	mov	r3,r2
  286848:	00bfffc4 	movi	r2,-1
  28684c:	18800626 	beq	r3,r2,286868 <_fstat_r+0x50>
  286850:	1805883a 	mov	r2,r3
  286854:	dfc00217 	ldw	ra,8(sp)
  286858:	dc400117 	ldw	r17,4(sp)
  28685c:	dc000017 	ldw	r16,0(sp)
  286860:	dec00304 	addi	sp,sp,12
  286864:	f800283a 	ret
  286868:	80800017 	ldw	r2,0(r16)
  28686c:	103ff826 	beq	r2,zero,286850 <_fstat_r+0x38>
  286870:	88800015 	stw	r2,0(r17)
  286874:	1805883a 	mov	r2,r3
  286878:	dfc00217 	ldw	ra,8(sp)
  28687c:	dc400117 	ldw	r17,4(sp)
  286880:	dc000017 	ldw	r16,0(sp)
  286884:	dec00304 	addi	sp,sp,12
  286888:	f800283a 	ret

0028688c <_isatty_r>:
  28688c:	defffd04 	addi	sp,sp,-12
  286890:	dc000015 	stw	r16,0(sp)
  286894:	04000a74 	movhi	r16,41
  286898:	8438d704 	addi	r16,r16,-7332
  28689c:	dc400115 	stw	r17,4(sp)
  2868a0:	80000015 	stw	zero,0(r16)
  2868a4:	2023883a 	mov	r17,r4
  2868a8:	2809883a 	mov	r4,r5
  2868ac:	dfc00215 	stw	ra,8(sp)
  2868b0:	0286b800 	call	286b80 <isatty>
  2868b4:	1007883a 	mov	r3,r2
  2868b8:	00bfffc4 	movi	r2,-1
  2868bc:	18800626 	beq	r3,r2,2868d8 <_isatty_r+0x4c>
  2868c0:	1805883a 	mov	r2,r3
  2868c4:	dfc00217 	ldw	ra,8(sp)
  2868c8:	dc400117 	ldw	r17,4(sp)
  2868cc:	dc000017 	ldw	r16,0(sp)
  2868d0:	dec00304 	addi	sp,sp,12
  2868d4:	f800283a 	ret
  2868d8:	80800017 	ldw	r2,0(r16)
  2868dc:	103ff826 	beq	r2,zero,2868c0 <_isatty_r+0x34>
  2868e0:	88800015 	stw	r2,0(r17)
  2868e4:	1805883a 	mov	r2,r3
  2868e8:	dfc00217 	ldw	ra,8(sp)
  2868ec:	dc400117 	ldw	r17,4(sp)
  2868f0:	dc000017 	ldw	r16,0(sp)
  2868f4:	dec00304 	addi	sp,sp,12
  2868f8:	f800283a 	ret

002868fc <_lseek_r>:
  2868fc:	defffd04 	addi	sp,sp,-12
  286900:	dc000015 	stw	r16,0(sp)
  286904:	04000a74 	movhi	r16,41
  286908:	8438d704 	addi	r16,r16,-7332
  28690c:	dc400115 	stw	r17,4(sp)
  286910:	80000015 	stw	zero,0(r16)
  286914:	2023883a 	mov	r17,r4
  286918:	2809883a 	mov	r4,r5
  28691c:	300b883a 	mov	r5,r6
  286920:	380d883a 	mov	r6,r7
  286924:	dfc00215 	stw	ra,8(sp)
  286928:	0286ca00 	call	286ca0 <lseek>
  28692c:	1007883a 	mov	r3,r2
  286930:	00bfffc4 	movi	r2,-1
  286934:	18800626 	beq	r3,r2,286950 <_lseek_r+0x54>
  286938:	1805883a 	mov	r2,r3
  28693c:	dfc00217 	ldw	ra,8(sp)
  286940:	dc400117 	ldw	r17,4(sp)
  286944:	dc000017 	ldw	r16,0(sp)
  286948:	dec00304 	addi	sp,sp,12
  28694c:	f800283a 	ret
  286950:	80800017 	ldw	r2,0(r16)
  286954:	103ff826 	beq	r2,zero,286938 <_lseek_r+0x3c>
  286958:	88800015 	stw	r2,0(r17)
  28695c:	1805883a 	mov	r2,r3
  286960:	dfc00217 	ldw	ra,8(sp)
  286964:	dc400117 	ldw	r17,4(sp)
  286968:	dc000017 	ldw	r16,0(sp)
  28696c:	dec00304 	addi	sp,sp,12
  286970:	f800283a 	ret

00286974 <_read_r>:
  286974:	defffd04 	addi	sp,sp,-12
  286978:	dc000015 	stw	r16,0(sp)
  28697c:	04000a74 	movhi	r16,41
  286980:	8438d704 	addi	r16,r16,-7332
  286984:	dc400115 	stw	r17,4(sp)
  286988:	80000015 	stw	zero,0(r16)
  28698c:	2023883a 	mov	r17,r4
  286990:	2809883a 	mov	r4,r5
  286994:	300b883a 	mov	r5,r6
  286998:	380d883a 	mov	r6,r7
  28699c:	dfc00215 	stw	ra,8(sp)
  2869a0:	0286e300 	call	286e30 <read>
  2869a4:	1007883a 	mov	r3,r2
  2869a8:	00bfffc4 	movi	r2,-1
  2869ac:	18800626 	beq	r3,r2,2869c8 <_read_r+0x54>
  2869b0:	1805883a 	mov	r2,r3
  2869b4:	dfc00217 	ldw	ra,8(sp)
  2869b8:	dc400117 	ldw	r17,4(sp)
  2869bc:	dc000017 	ldw	r16,0(sp)
  2869c0:	dec00304 	addi	sp,sp,12
  2869c4:	f800283a 	ret
  2869c8:	80800017 	ldw	r2,0(r16)
  2869cc:	103ff826 	beq	r2,zero,2869b0 <_read_r+0x3c>
  2869d0:	88800015 	stw	r2,0(r17)
  2869d4:	1805883a 	mov	r2,r3
  2869d8:	dfc00217 	ldw	ra,8(sp)
  2869dc:	dc400117 	ldw	r17,4(sp)
  2869e0:	dc000017 	ldw	r16,0(sp)
  2869e4:	dec00304 	addi	sp,sp,12
  2869e8:	f800283a 	ret

002869ec <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  2869ec:	defffd04 	addi	sp,sp,-12
  2869f0:	df000215 	stw	fp,8(sp)
  2869f4:	df000204 	addi	fp,sp,8
  2869f8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  2869fc:	e0bfff17 	ldw	r2,-4(fp)
  286a00:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  286a04:	e0bffe17 	ldw	r2,-8(fp)
  286a08:	1005003a 	cmpeq	r2,r2,zero
  286a0c:	1000021e 	bne	r2,zero,286a18 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  286a10:	002af070 	cmpltui	zero,zero,43969
  286a14:	00000106 	br	286a1c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  286a18:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  286a1c:	e037883a 	mov	sp,fp
  286a20:	df000017 	ldw	fp,0(sp)
  286a24:	dec00104 	addi	sp,sp,4
  286a28:	f800283a 	ret

00286a2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  286a2c:	defffd04 	addi	sp,sp,-12
  286a30:	dfc00215 	stw	ra,8(sp)
  286a34:	df000115 	stw	fp,4(sp)
  286a38:	df000104 	addi	fp,sp,4
  286a3c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  286a40:	e13fff17 	ldw	r4,-4(fp)
  286a44:	02869ec0 	call	2869ec <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  286a48:	003fff06 	br	286a48 <_exit+0x1c>

00286a4c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  286a4c:	defff904 	addi	sp,sp,-28
  286a50:	dfc00615 	stw	ra,24(sp)
  286a54:	df000515 	stw	fp,20(sp)
  286a58:	df000504 	addi	fp,sp,20
  286a5c:	e13ffc15 	stw	r4,-16(fp)
  286a60:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  286a64:	e0bffc17 	ldw	r2,-16(fp)
  286a68:	1004803a 	cmplt	r2,r2,zero
  286a6c:	1000081e 	bne	r2,zero,286a90 <fstat+0x44>
  286a70:	e0bffc17 	ldw	r2,-16(fp)
  286a74:	10800324 	muli	r2,r2,12
  286a78:	1007883a 	mov	r3,r2
  286a7c:	00800a74 	movhi	r2,41
  286a80:	10af7704 	addi	r2,r2,-16932
  286a84:	1887883a 	add	r3,r3,r2
  286a88:	e0ffff15 	stw	r3,-4(fp)
  286a8c:	00000106 	br	286a94 <fstat+0x48>
  286a90:	e03fff15 	stw	zero,-4(fp)
  286a94:	e0bfff17 	ldw	r2,-4(fp)
  286a98:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  286a9c:	e0bffb17 	ldw	r2,-20(fp)
  286aa0:	1005003a 	cmpeq	r2,r2,zero
  286aa4:	1000121e 	bne	r2,zero,286af0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  286aa8:	e0bffb17 	ldw	r2,-20(fp)
  286aac:	10800017 	ldw	r2,0(r2)
  286ab0:	10800817 	ldw	r2,32(r2)
  286ab4:	1005003a 	cmpeq	r2,r2,zero
  286ab8:	1000081e 	bne	r2,zero,286adc <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  286abc:	e0bffb17 	ldw	r2,-20(fp)
  286ac0:	10800017 	ldw	r2,0(r2)
  286ac4:	10800817 	ldw	r2,32(r2)
  286ac8:	e13ffb17 	ldw	r4,-20(fp)
  286acc:	e17ffd17 	ldw	r5,-12(fp)
  286ad0:	103ee83a 	callr	r2
  286ad4:	e0bffe15 	stw	r2,-8(fp)
  286ad8:	00000b06 	br	286b08 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  286adc:	e0fffd17 	ldw	r3,-12(fp)
  286ae0:	00880004 	movi	r2,8192
  286ae4:	18800115 	stw	r2,4(r3)
      return 0;
  286ae8:	e03ffe15 	stw	zero,-8(fp)
  286aec:	00000606 	br	286b08 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  286af0:	0286b200 	call	286b20 <alt_get_errno>
  286af4:	1007883a 	mov	r3,r2
  286af8:	00801444 	movi	r2,81
  286afc:	18800015 	stw	r2,0(r3)
    return -1;
  286b00:	00bfffc4 	movi	r2,-1
  286b04:	e0bffe15 	stw	r2,-8(fp)
  286b08:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  286b0c:	e037883a 	mov	sp,fp
  286b10:	dfc00117 	ldw	ra,4(sp)
  286b14:	df000017 	ldw	fp,0(sp)
  286b18:	dec00204 	addi	sp,sp,8
  286b1c:	f800283a 	ret

00286b20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  286b20:	defffd04 	addi	sp,sp,-12
  286b24:	dfc00215 	stw	ra,8(sp)
  286b28:	df000115 	stw	fp,4(sp)
  286b2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  286b30:	00800a74 	movhi	r2,41
  286b34:	10b1de04 	addi	r2,r2,-14472
  286b38:	10800017 	ldw	r2,0(r2)
  286b3c:	1005003a 	cmpeq	r2,r2,zero
  286b40:	1000061e 	bne	r2,zero,286b5c <alt_get_errno+0x3c>
  286b44:	00800a74 	movhi	r2,41
  286b48:	10b1de04 	addi	r2,r2,-14472
  286b4c:	10800017 	ldw	r2,0(r2)
  286b50:	103ee83a 	callr	r2
  286b54:	e0bfff15 	stw	r2,-4(fp)
  286b58:	00000306 	br	286b68 <alt_get_errno+0x48>
  286b5c:	00800a74 	movhi	r2,41
  286b60:	10b8d704 	addi	r2,r2,-7332
  286b64:	e0bfff15 	stw	r2,-4(fp)
  286b68:	e0bfff17 	ldw	r2,-4(fp)
}
  286b6c:	e037883a 	mov	sp,fp
  286b70:	dfc00117 	ldw	ra,4(sp)
  286b74:	df000017 	ldw	fp,0(sp)
  286b78:	dec00204 	addi	sp,sp,8
  286b7c:	f800283a 	ret

00286b80 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  286b80:	deffeb04 	addi	sp,sp,-84
  286b84:	dfc01415 	stw	ra,80(sp)
  286b88:	df001315 	stw	fp,76(sp)
  286b8c:	df001304 	addi	fp,sp,76
  286b90:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  286b94:	e0bffd17 	ldw	r2,-12(fp)
  286b98:	1004803a 	cmplt	r2,r2,zero
  286b9c:	1000081e 	bne	r2,zero,286bc0 <isatty+0x40>
  286ba0:	e0bffd17 	ldw	r2,-12(fp)
  286ba4:	10800324 	muli	r2,r2,12
  286ba8:	1007883a 	mov	r3,r2
  286bac:	00800a74 	movhi	r2,41
  286bb0:	10af7704 	addi	r2,r2,-16932
  286bb4:	1887883a 	add	r3,r3,r2
  286bb8:	e0ffff15 	stw	r3,-4(fp)
  286bbc:	00000106 	br	286bc4 <isatty+0x44>
  286bc0:	e03fff15 	stw	zero,-4(fp)
  286bc4:	e0bfff17 	ldw	r2,-4(fp)
  286bc8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  286bcc:	e0bfed17 	ldw	r2,-76(fp)
  286bd0:	1005003a 	cmpeq	r2,r2,zero
  286bd4:	10000f1e 	bne	r2,zero,286c14 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  286bd8:	e0bfed17 	ldw	r2,-76(fp)
  286bdc:	10800017 	ldw	r2,0(r2)
  286be0:	10800817 	ldw	r2,32(r2)
  286be4:	1004c03a 	cmpne	r2,r2,zero
  286be8:	1000031e 	bne	r2,zero,286bf8 <isatty+0x78>
    {
      return 1;
  286bec:	00800044 	movi	r2,1
  286bf0:	e0bffe15 	stw	r2,-8(fp)
  286bf4:	00000c06 	br	286c28 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  286bf8:	e17fee04 	addi	r5,fp,-72
  286bfc:	e13ffd17 	ldw	r4,-12(fp)
  286c00:	0286a4c0 	call	286a4c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  286c04:	e0bfef17 	ldw	r2,-68(fp)
  286c08:	10880020 	cmpeqi	r2,r2,8192
  286c0c:	e0bffe15 	stw	r2,-8(fp)
  286c10:	00000506 	br	286c28 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  286c14:	0286c400 	call	286c40 <alt_get_errno>
  286c18:	1007883a 	mov	r3,r2
  286c1c:	00801444 	movi	r2,81
  286c20:	18800015 	stw	r2,0(r3)
    return 0;
  286c24:	e03ffe15 	stw	zero,-8(fp)
  286c28:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  286c2c:	e037883a 	mov	sp,fp
  286c30:	dfc00117 	ldw	ra,4(sp)
  286c34:	df000017 	ldw	fp,0(sp)
  286c38:	dec00204 	addi	sp,sp,8
  286c3c:	f800283a 	ret

00286c40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  286c40:	defffd04 	addi	sp,sp,-12
  286c44:	dfc00215 	stw	ra,8(sp)
  286c48:	df000115 	stw	fp,4(sp)
  286c4c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  286c50:	00800a74 	movhi	r2,41
  286c54:	10b1de04 	addi	r2,r2,-14472
  286c58:	10800017 	ldw	r2,0(r2)
  286c5c:	1005003a 	cmpeq	r2,r2,zero
  286c60:	1000061e 	bne	r2,zero,286c7c <alt_get_errno+0x3c>
  286c64:	00800a74 	movhi	r2,41
  286c68:	10b1de04 	addi	r2,r2,-14472
  286c6c:	10800017 	ldw	r2,0(r2)
  286c70:	103ee83a 	callr	r2
  286c74:	e0bfff15 	stw	r2,-4(fp)
  286c78:	00000306 	br	286c88 <alt_get_errno+0x48>
  286c7c:	00800a74 	movhi	r2,41
  286c80:	10b8d704 	addi	r2,r2,-7332
  286c84:	e0bfff15 	stw	r2,-4(fp)
  286c88:	e0bfff17 	ldw	r2,-4(fp)
}
  286c8c:	e037883a 	mov	sp,fp
  286c90:	dfc00117 	ldw	ra,4(sp)
  286c94:	df000017 	ldw	fp,0(sp)
  286c98:	dec00204 	addi	sp,sp,8
  286c9c:	f800283a 	ret

00286ca0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  286ca0:	defff804 	addi	sp,sp,-32
  286ca4:	dfc00715 	stw	ra,28(sp)
  286ca8:	df000615 	stw	fp,24(sp)
  286cac:	df000604 	addi	fp,sp,24
  286cb0:	e13ffc15 	stw	r4,-16(fp)
  286cb4:	e17ffd15 	stw	r5,-12(fp)
  286cb8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  286cbc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  286cc0:	e0bffc17 	ldw	r2,-16(fp)
  286cc4:	1004803a 	cmplt	r2,r2,zero
  286cc8:	1000081e 	bne	r2,zero,286cec <lseek+0x4c>
  286ccc:	e0bffc17 	ldw	r2,-16(fp)
  286cd0:	10800324 	muli	r2,r2,12
  286cd4:	1007883a 	mov	r3,r2
  286cd8:	00800a74 	movhi	r2,41
  286cdc:	10af7704 	addi	r2,r2,-16932
  286ce0:	1887883a 	add	r3,r3,r2
  286ce4:	e0ffff15 	stw	r3,-4(fp)
  286ce8:	00000106 	br	286cf0 <lseek+0x50>
  286cec:	e03fff15 	stw	zero,-4(fp)
  286cf0:	e0bfff17 	ldw	r2,-4(fp)
  286cf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  286cf8:	e0bffb17 	ldw	r2,-20(fp)
  286cfc:	1005003a 	cmpeq	r2,r2,zero
  286d00:	1000111e 	bne	r2,zero,286d48 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  286d04:	e0bffb17 	ldw	r2,-20(fp)
  286d08:	10800017 	ldw	r2,0(r2)
  286d0c:	10800717 	ldw	r2,28(r2)
  286d10:	1005003a 	cmpeq	r2,r2,zero
  286d14:	1000091e 	bne	r2,zero,286d3c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  286d18:	e0bffb17 	ldw	r2,-20(fp)
  286d1c:	10800017 	ldw	r2,0(r2)
  286d20:	10800717 	ldw	r2,28(r2)
  286d24:	e13ffb17 	ldw	r4,-20(fp)
  286d28:	e17ffd17 	ldw	r5,-12(fp)
  286d2c:	e1bffe17 	ldw	r6,-8(fp)
  286d30:	103ee83a 	callr	r2
  286d34:	e0bffa15 	stw	r2,-24(fp)
  286d38:	00000506 	br	286d50 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  286d3c:	00bfde84 	movi	r2,-134
  286d40:	e0bffa15 	stw	r2,-24(fp)
  286d44:	00000206 	br	286d50 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  286d48:	00bfebc4 	movi	r2,-81
  286d4c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  286d50:	e0bffa17 	ldw	r2,-24(fp)
  286d54:	1004403a 	cmpge	r2,r2,zero
  286d58:	1000071e 	bne	r2,zero,286d78 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  286d5c:	0286d900 	call	286d90 <alt_get_errno>
  286d60:	1007883a 	mov	r3,r2
  286d64:	e0bffa17 	ldw	r2,-24(fp)
  286d68:	0085c83a 	sub	r2,zero,r2
  286d6c:	18800015 	stw	r2,0(r3)
    rc = -1;
  286d70:	00bfffc4 	movi	r2,-1
  286d74:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  286d78:	e0bffa17 	ldw	r2,-24(fp)
}
  286d7c:	e037883a 	mov	sp,fp
  286d80:	dfc00117 	ldw	ra,4(sp)
  286d84:	df000017 	ldw	fp,0(sp)
  286d88:	dec00204 	addi	sp,sp,8
  286d8c:	f800283a 	ret

00286d90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  286d90:	defffd04 	addi	sp,sp,-12
  286d94:	dfc00215 	stw	ra,8(sp)
  286d98:	df000115 	stw	fp,4(sp)
  286d9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  286da0:	00800a74 	movhi	r2,41
  286da4:	10b1de04 	addi	r2,r2,-14472
  286da8:	10800017 	ldw	r2,0(r2)
  286dac:	1005003a 	cmpeq	r2,r2,zero
  286db0:	1000061e 	bne	r2,zero,286dcc <alt_get_errno+0x3c>
  286db4:	00800a74 	movhi	r2,41
  286db8:	10b1de04 	addi	r2,r2,-14472
  286dbc:	10800017 	ldw	r2,0(r2)
  286dc0:	103ee83a 	callr	r2
  286dc4:	e0bfff15 	stw	r2,-4(fp)
  286dc8:	00000306 	br	286dd8 <alt_get_errno+0x48>
  286dcc:	00800a74 	movhi	r2,41
  286dd0:	10b8d704 	addi	r2,r2,-7332
  286dd4:	e0bfff15 	stw	r2,-4(fp)
  286dd8:	e0bfff17 	ldw	r2,-4(fp)
}
  286ddc:	e037883a 	mov	sp,fp
  286de0:	dfc00117 	ldw	ra,4(sp)
  286de4:	df000017 	ldw	fp,0(sp)
  286de8:	dec00204 	addi	sp,sp,8
  286dec:	f800283a 	ret

00286df0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  286df0:	defffe04 	addi	sp,sp,-8
  286df4:	df000115 	stw	fp,4(sp)
  286df8:	df000104 	addi	fp,sp,4
  286dfc:	e13fff15 	stw	r4,-4(fp)
}
  286e00:	e037883a 	mov	sp,fp
  286e04:	df000017 	ldw	fp,0(sp)
  286e08:	dec00104 	addi	sp,sp,4
  286e0c:	f800283a 	ret

00286e10 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  286e10:	defffe04 	addi	sp,sp,-8
  286e14:	df000115 	stw	fp,4(sp)
  286e18:	df000104 	addi	fp,sp,4
  286e1c:	e13fff15 	stw	r4,-4(fp)
}
  286e20:	e037883a 	mov	sp,fp
  286e24:	df000017 	ldw	fp,0(sp)
  286e28:	dec00104 	addi	sp,sp,4
  286e2c:	f800283a 	ret

00286e30 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  286e30:	defff704 	addi	sp,sp,-36
  286e34:	dfc00815 	stw	ra,32(sp)
  286e38:	df000715 	stw	fp,28(sp)
  286e3c:	df000704 	addi	fp,sp,28
  286e40:	e13ffb15 	stw	r4,-20(fp)
  286e44:	e17ffc15 	stw	r5,-16(fp)
  286e48:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  286e4c:	e0bffb17 	ldw	r2,-20(fp)
  286e50:	1004803a 	cmplt	r2,r2,zero
  286e54:	1000081e 	bne	r2,zero,286e78 <read+0x48>
  286e58:	e0bffb17 	ldw	r2,-20(fp)
  286e5c:	10800324 	muli	r2,r2,12
  286e60:	1007883a 	mov	r3,r2
  286e64:	00800a74 	movhi	r2,41
  286e68:	10af7704 	addi	r2,r2,-16932
  286e6c:	1887883a 	add	r3,r3,r2
  286e70:	e0ffff15 	stw	r3,-4(fp)
  286e74:	00000106 	br	286e7c <read+0x4c>
  286e78:	e03fff15 	stw	zero,-4(fp)
  286e7c:	e0bfff17 	ldw	r2,-4(fp)
  286e80:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  286e84:	e0bffa17 	ldw	r2,-24(fp)
  286e88:	1005003a 	cmpeq	r2,r2,zero
  286e8c:	1000241e 	bne	r2,zero,286f20 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  286e90:	e0bffa17 	ldw	r2,-24(fp)
  286e94:	10800217 	ldw	r2,8(r2)
  286e98:	108000cc 	andi	r2,r2,3
  286e9c:	10800060 	cmpeqi	r2,r2,1
  286ea0:	10001a1e 	bne	r2,zero,286f0c <read+0xdc>
  286ea4:	e0bffa17 	ldw	r2,-24(fp)
  286ea8:	10800017 	ldw	r2,0(r2)
  286eac:	10800517 	ldw	r2,20(r2)
  286eb0:	1005003a 	cmpeq	r2,r2,zero
  286eb4:	1000151e 	bne	r2,zero,286f0c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  286eb8:	e0bffa17 	ldw	r2,-24(fp)
  286ebc:	10800017 	ldw	r2,0(r2)
  286ec0:	10800517 	ldw	r2,20(r2)
  286ec4:	e17ffc17 	ldw	r5,-16(fp)
  286ec8:	e1bffd17 	ldw	r6,-12(fp)
  286ecc:	e13ffa17 	ldw	r4,-24(fp)
  286ed0:	103ee83a 	callr	r2
  286ed4:	e0bff915 	stw	r2,-28(fp)
  286ed8:	e0bff917 	ldw	r2,-28(fp)
  286edc:	1004403a 	cmpge	r2,r2,zero
  286ee0:	1000071e 	bne	r2,zero,286f00 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  286ee4:	0286f500 	call	286f50 <alt_get_errno>
  286ee8:	e0fff917 	ldw	r3,-28(fp)
  286eec:	00c7c83a 	sub	r3,zero,r3
  286ef0:	10c00015 	stw	r3,0(r2)
          return -1;
  286ef4:	00bfffc4 	movi	r2,-1
  286ef8:	e0bffe15 	stw	r2,-8(fp)
  286efc:	00000e06 	br	286f38 <read+0x108>
        }
        return rval;
  286f00:	e0bff917 	ldw	r2,-28(fp)
  286f04:	e0bffe15 	stw	r2,-8(fp)
  286f08:	00000b06 	br	286f38 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  286f0c:	0286f500 	call	286f50 <alt_get_errno>
  286f10:	1007883a 	mov	r3,r2
  286f14:	00800344 	movi	r2,13
  286f18:	18800015 	stw	r2,0(r3)
  286f1c:	00000406 	br	286f30 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  286f20:	0286f500 	call	286f50 <alt_get_errno>
  286f24:	1007883a 	mov	r3,r2
  286f28:	00801444 	movi	r2,81
  286f2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  286f30:	00bfffc4 	movi	r2,-1
  286f34:	e0bffe15 	stw	r2,-8(fp)
  286f38:	e0bffe17 	ldw	r2,-8(fp)
}
  286f3c:	e037883a 	mov	sp,fp
  286f40:	dfc00117 	ldw	ra,4(sp)
  286f44:	df000017 	ldw	fp,0(sp)
  286f48:	dec00204 	addi	sp,sp,8
  286f4c:	f800283a 	ret

00286f50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  286f50:	defffd04 	addi	sp,sp,-12
  286f54:	dfc00215 	stw	ra,8(sp)
  286f58:	df000115 	stw	fp,4(sp)
  286f5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  286f60:	00800a74 	movhi	r2,41
  286f64:	10b1de04 	addi	r2,r2,-14472
  286f68:	10800017 	ldw	r2,0(r2)
  286f6c:	1005003a 	cmpeq	r2,r2,zero
  286f70:	1000061e 	bne	r2,zero,286f8c <alt_get_errno+0x3c>
  286f74:	00800a74 	movhi	r2,41
  286f78:	10b1de04 	addi	r2,r2,-14472
  286f7c:	10800017 	ldw	r2,0(r2)
  286f80:	103ee83a 	callr	r2
  286f84:	e0bfff15 	stw	r2,-4(fp)
  286f88:	00000306 	br	286f98 <alt_get_errno+0x48>
  286f8c:	00800a74 	movhi	r2,41
  286f90:	10b8d704 	addi	r2,r2,-7332
  286f94:	e0bfff15 	stw	r2,-4(fp)
  286f98:	e0bfff17 	ldw	r2,-4(fp)
}
  286f9c:	e037883a 	mov	sp,fp
  286fa0:	dfc00117 	ldw	ra,4(sp)
  286fa4:	df000017 	ldw	fp,0(sp)
  286fa8:	dec00204 	addi	sp,sp,8
  286fac:	f800283a 	ret

00286fb0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  286fb0:	defff804 	addi	sp,sp,-32
  286fb4:	df000715 	stw	fp,28(sp)
  286fb8:	df000704 	addi	fp,sp,28
  286fbc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  286fc0:	0005303a 	rdctl	r2,status
  286fc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  286fc8:	e0fffb17 	ldw	r3,-20(fp)
  286fcc:	00bfff84 	movi	r2,-2
  286fd0:	1884703a 	and	r2,r3,r2
  286fd4:	1001703a 	wrctl	status,r2
  
  return context;
  286fd8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  286fdc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  286fe0:	d0a00d17 	ldw	r2,-32716(gp)
  286fe4:	10c000c4 	addi	r3,r2,3
  286fe8:	00bfff04 	movi	r2,-4
  286fec:	1884703a 	and	r2,r3,r2
  286ff0:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  286ff4:	d0e00d17 	ldw	r3,-32716(gp)
  286ff8:	e0bffe17 	ldw	r2,-8(fp)
  286ffc:	1887883a 	add	r3,r3,r2
  287000:	00800b74 	movhi	r2,45
  287004:	10ac0004 	addi	r2,r2,-20480
  287008:	10c0072e 	bgeu	r2,r3,287028 <sbrk+0x78>
  28700c:	e0bffd17 	ldw	r2,-12(fp)
  287010:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  287014:	e0bffa17 	ldw	r2,-24(fp)
  287018:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  28701c:	00bfffc4 	movi	r2,-1
  287020:	e0bfff15 	stw	r2,-4(fp)
  287024:	00000c06 	br	287058 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  287028:	d0a00d17 	ldw	r2,-32716(gp)
  28702c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  287030:	d0e00d17 	ldw	r3,-32716(gp)
  287034:	e0bffe17 	ldw	r2,-8(fp)
  287038:	1885883a 	add	r2,r3,r2
  28703c:	d0a00d15 	stw	r2,-32716(gp)
  287040:	e0bffd17 	ldw	r2,-12(fp)
  287044:	e0bff915 	stw	r2,-28(fp)
  287048:	e0bff917 	ldw	r2,-28(fp)
  28704c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  287050:	e0bffc17 	ldw	r2,-16(fp)
  287054:	e0bfff15 	stw	r2,-4(fp)
  287058:	e0bfff17 	ldw	r2,-4(fp)
} 
  28705c:	e037883a 	mov	sp,fp
  287060:	df000017 	ldw	fp,0(sp)
  287064:	dec00104 	addi	sp,sp,4
  287068:	f800283a 	ret

0028706c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  28706c:	defff704 	addi	sp,sp,-36
  287070:	dfc00815 	stw	ra,32(sp)
  287074:	df000715 	stw	fp,28(sp)
  287078:	df000704 	addi	fp,sp,28
  28707c:	e13ffb15 	stw	r4,-20(fp)
  287080:	e17ffc15 	stw	r5,-16(fp)
  287084:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  287088:	e0bffb17 	ldw	r2,-20(fp)
  28708c:	1004803a 	cmplt	r2,r2,zero
  287090:	1000081e 	bne	r2,zero,2870b4 <write+0x48>
  287094:	e0bffb17 	ldw	r2,-20(fp)
  287098:	10800324 	muli	r2,r2,12
  28709c:	1007883a 	mov	r3,r2
  2870a0:	00800a74 	movhi	r2,41
  2870a4:	10af7704 	addi	r2,r2,-16932
  2870a8:	1887883a 	add	r3,r3,r2
  2870ac:	e0ffff15 	stw	r3,-4(fp)
  2870b0:	00000106 	br	2870b8 <write+0x4c>
  2870b4:	e03fff15 	stw	zero,-4(fp)
  2870b8:	e0bfff17 	ldw	r2,-4(fp)
  2870bc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  2870c0:	e0bffa17 	ldw	r2,-24(fp)
  2870c4:	1005003a 	cmpeq	r2,r2,zero
  2870c8:	1000241e 	bne	r2,zero,28715c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  2870cc:	e0bffa17 	ldw	r2,-24(fp)
  2870d0:	10800217 	ldw	r2,8(r2)
  2870d4:	108000cc 	andi	r2,r2,3
  2870d8:	1005003a 	cmpeq	r2,r2,zero
  2870dc:	10001a1e 	bne	r2,zero,287148 <write+0xdc>
  2870e0:	e0bffa17 	ldw	r2,-24(fp)
  2870e4:	10800017 	ldw	r2,0(r2)
  2870e8:	10800617 	ldw	r2,24(r2)
  2870ec:	1005003a 	cmpeq	r2,r2,zero
  2870f0:	1000151e 	bne	r2,zero,287148 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  2870f4:	e0bffa17 	ldw	r2,-24(fp)
  2870f8:	10800017 	ldw	r2,0(r2)
  2870fc:	10800617 	ldw	r2,24(r2)
  287100:	e17ffc17 	ldw	r5,-16(fp)
  287104:	e1bffd17 	ldw	r6,-12(fp)
  287108:	e13ffa17 	ldw	r4,-24(fp)
  28710c:	103ee83a 	callr	r2
  287110:	e0bff915 	stw	r2,-28(fp)
  287114:	e0bff917 	ldw	r2,-28(fp)
  287118:	1004403a 	cmpge	r2,r2,zero
  28711c:	1000071e 	bne	r2,zero,28713c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  287120:	028718c0 	call	28718c <alt_get_errno>
  287124:	e0fff917 	ldw	r3,-28(fp)
  287128:	00c7c83a 	sub	r3,zero,r3
  28712c:	10c00015 	stw	r3,0(r2)
        return -1;
  287130:	00bfffc4 	movi	r2,-1
  287134:	e0bffe15 	stw	r2,-8(fp)
  287138:	00000e06 	br	287174 <write+0x108>
      }
      return rval;
  28713c:	e0bff917 	ldw	r2,-28(fp)
  287140:	e0bffe15 	stw	r2,-8(fp)
  287144:	00000b06 	br	287174 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  287148:	028718c0 	call	28718c <alt_get_errno>
  28714c:	1007883a 	mov	r3,r2
  287150:	00800344 	movi	r2,13
  287154:	18800015 	stw	r2,0(r3)
  287158:	00000406 	br	28716c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  28715c:	028718c0 	call	28718c <alt_get_errno>
  287160:	1007883a 	mov	r3,r2
  287164:	00801444 	movi	r2,81
  287168:	18800015 	stw	r2,0(r3)
  }
  return -1;
  28716c:	00bfffc4 	movi	r2,-1
  287170:	e0bffe15 	stw	r2,-8(fp)
  287174:	e0bffe17 	ldw	r2,-8(fp)
}
  287178:	e037883a 	mov	sp,fp
  28717c:	dfc00117 	ldw	ra,4(sp)
  287180:	df000017 	ldw	fp,0(sp)
  287184:	dec00204 	addi	sp,sp,8
  287188:	f800283a 	ret

0028718c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  28718c:	defffd04 	addi	sp,sp,-12
  287190:	dfc00215 	stw	ra,8(sp)
  287194:	df000115 	stw	fp,4(sp)
  287198:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  28719c:	00800a74 	movhi	r2,41
  2871a0:	10b1de04 	addi	r2,r2,-14472
  2871a4:	10800017 	ldw	r2,0(r2)
  2871a8:	1005003a 	cmpeq	r2,r2,zero
  2871ac:	1000061e 	bne	r2,zero,2871c8 <alt_get_errno+0x3c>
  2871b0:	00800a74 	movhi	r2,41
  2871b4:	10b1de04 	addi	r2,r2,-14472
  2871b8:	10800017 	ldw	r2,0(r2)
  2871bc:	103ee83a 	callr	r2
  2871c0:	e0bfff15 	stw	r2,-4(fp)
  2871c4:	00000306 	br	2871d4 <alt_get_errno+0x48>
  2871c8:	00800a74 	movhi	r2,41
  2871cc:	10b8d704 	addi	r2,r2,-7332
  2871d0:	e0bfff15 	stw	r2,-4(fp)
  2871d4:	e0bfff17 	ldw	r2,-4(fp)
}
  2871d8:	e037883a 	mov	sp,fp
  2871dc:	dfc00117 	ldw	ra,4(sp)
  2871e0:	df000017 	ldw	fp,0(sp)
  2871e4:	dec00204 	addi	sp,sp,8
  2871e8:	f800283a 	ret
  2871ec:	00284e80 	call	284e8 <__reset-0x257b18>
